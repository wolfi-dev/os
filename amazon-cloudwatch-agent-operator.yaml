package:
  name: amazon-cloudwatch-agent-operator
  version: "2.1.0"
  epoch: 1
  description: Software developed to manage the CloudWatch Agent on kubernetes.
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 76988ab7b84f80f4d3757fb2235624f4fa2dc98c
      repository: https://github.com/aws/amazon-cloudwatch-agent-operator
      tag: v${{package.version}}

  - uses: go/build
    with:
      output: manager
      packages: .
      ldflags: |
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.version=${{package.version}}
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.buildDate=$(date -u -d "@${SOURCE_DATE_EPOCH:-$(date +%s)}" "+%Y-%m-%dT%H:%M:%SZ")
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.agent=$(grep -v '\#' versions.txt | grep cloudwatch-agent | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.autoInstrumentationJava=$(grep -v '\#' versions.txt | grep aws-otel-java-instrumentation | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.autoInstrumentationPython=$(grep -v '\#' versions.txt | grep aws-otel-python-instrumentation | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.autoInstrumentationDotNet=$(grep -v '\#' versions.txt | grep aws-otel-dotnet-instrumentation | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.autoInstrumentationNodeJS=$(grep -v '\#' versions.txt | grep aws-otel-nodejs-instrumentation | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.dcgmExporter=$(grep -v '\#' versions.txt | grep dcgm-exporter | awk -F= '{print $$2}')
        -X github.com/aws/amazon-cloudwatch-agent-operator/internal/version.neuronMonitor=$(grep -v '\#' versions.txt | grep neuron-monitor | awk -F= '{print $$2}')

  - uses: strip

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          ln -sf /usr/bin/manager ${{targets.contextdir}}/manager
    description: Compatibility symlink for ${{package.name}}

update:
  enabled: true
  github:
    identifier: aws/amazon-cloudwatch-agent-operator
    strip-prefix: v
    tag-filter: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - kustomize
        - kubectl
        - git
        - mkcert
        - nss
        - curl
  pipeline:
    - uses: test/kwok/cluster
    - name: Fetch the testdata from the source repo
      runs: git clone --depth=1 https://github.com/aws/amazon-cloudwatch-agent-operator
    - name: Install CRDs
      working-directory: amazon-cloudwatch-agent-operator/config/crd/
      runs: |
        kubectl wait --for=condition=Ready nodes --all
        kustomize build | kubectl apply --server-side=true -f -
        # wait for all CRDs to be created
        sleep 3
    - name: "Test manager run"
      uses: test/daemon-check-output
      with:
        setup: |
          mkdir -p /tmp/k8s-webhook-server/serving-certs/
          mkcert -install
          mkcert -key-file /tmp/k8s-webhook-server/serving-certs/tls.key -cert-file /tmp/k8s-webhook-server/serving-certs/tls.crt localhost
        start: /usr/bin/manager
        timeout: 30
        expected_output: |
          starting manager
          Starting webhook server
          starting server
          Starting workers
        post: |
          sleep 3
          STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" http://localhost:8081/healthz)
          # Check if the status code is 200, if so exit 0, otherwise exit 1
          if [ "$STATUS" -eq 200 ]; then
              echo "Health check passed with status code 200"
              exit 0
          else
              echo "Health check failed with status code $STATUS"
              exit 1
          fi
