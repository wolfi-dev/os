package:
  name: apache-hop
  version: "2.14.0-rc1"
  epoch: 0
  description: Apache Hop is a data orchestration and data engineering platform
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - bash
      - busybox
      - coreutils
      - curl
      - fontconfig
      - glibc-locale-en
      - gtk-3
      - gtk-4
      - libx11
      - libxext
      - libxrender
      - libxtst
      - openjdk-17-default-jvm
      - procps
      - ttf-dejavu

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils
      - fontconfig-dev
      - maven
      - ttf-dejavu
      - openjdk-17-default-jdk
      - unzip
  environment:
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk
    MAVEN_OPTS: |
      -Xmx2g
      -XX:+UseG1GC
      -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/apache/hop
      tag: ${{package.version}}
      expected-commit: 53f31e1b2657d558a9d2321dbc67a85b22d508f4

  - runs: |
      mvn clean install -DskipTests
      
      # Create installation directory structure
      mkdir -p "${{targets.contextdir}}"/opt/hop
      
      # Unzip the built Hop client
      unzip assemblies/client/target/hop-client-*.zip -d /tmp/hop-unpacked
      
      # Copy the unpacked Hop client with error checking
      if [ -d "/tmp/hop-unpacked/hop" ]; then
        cp -r /tmp/hop-unpacked/hop/* "${{targets.contextdir}}"/opt/hop/
      else
        echo "Unexpected ZIP structure. Checking for alternative structure..."
        # Check if files are directly in the unpacked directory
        if [ -f "/tmp/hop-unpacked/hop-gui.sh" ]; then
          cp -r /tmp/hop-unpacked/* "${{targets.contextdir}}"/opt/hop/
        else
          echo "Could not find hop files in expected locations. Directory contents:"
          ls -la /tmp/hop-unpacked/
          exit 1
        fi
      fi
      
      # Create symlinks for Hop tools in /usr/bin
      mkdir -p "${{targets.contextdir}}"/usr/bin
      for tool in hop-conf hop-encrypt hop-gui hop-import hop-run hop-search hop-server; do
        if [ -f "${{targets.contextdir}}/opt/hop/$tool.sh" ]; then
          ln -sf /opt/hop/$tool.sh "${{targets.contextdir}}"/usr/bin/$tool
        fi
      done
      
      # Ensure scripts are executable
      chmod +x "${{targets.contextdir}}"/opt/hop/*.sh
      
      # Create hop user home directory
      mkdir -p "${{targets.contextdir}}"/home/hop
      
      # Create files volume mount point
      mkdir -p "${{targets.contextdir}}"/files

  - uses: strip

subpackages:
  - name: "${{package.name}}-compat"
    description: "Compatibility package to place binaries in the location expected by upstream container image"
    dependencies:
      runtime:
        - apache-hop
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}/opt"
          ln -sf /opt/hop "${{targets.contextdir}}/opt/hop"
          mkdir -p "${{targets.contextdir}}/home"
          ln -sf /home/hop "${{targets.contextdir}}/home/hop"
    test:
      pipeline:
        - runs: |
            [ "$(readlink -f /opt/hop)" = "/opt/hop" ] || exit 1
            [ "$(readlink -f /home/hop)" = "/home/hop" ] || exit 1

update:
  enabled: true
  github:
    identifier: apache/hop
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ${{package.name}}
        - bash
        - curl
        - fontconfig
        - gtk-3
        - gtk-4
        - libx11
        - libxext
        - libxrender
        - libxtst
        - openjdk-17-default-jvm
        - xmlstarlet
        - xvfb-run
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      HOP_HOME: /opt/hop
      PATH: /opt/hop:/usr/lib/jvm/java-17-openjdk/bin:$PATH
  pipeline:
    - name: "Test Hop installation and basic functionality"
      runs: |
        set -e
        
        # Verify core directories exist and are writable
        for dir in /opt/hop /home/hop /files; do
          if [ ! -d "$dir" ] || [ ! -w "$dir" ]; then
            echo "Error: Directory does not exist or is not writable: $dir"
            exit 1
          fi
        done
        
        # Verify binary executables
        for bin in /opt/hop/hop-gui.sh /opt/hop/hop-run.sh /opt/hop/hop-server.sh /opt/hop/hop-conf.sh; do
          if [ ! -x "$bin" ]; then
            echo "Error: Binary is not executable: $bin"
            exit 1
          fi
        done
        
        # Verify symlinks exist and point to correct targets
        [ "$(readlink -f /usr/bin/hop-gui)" = "/opt/hop/hop-gui.sh" ] || exit 1
        [ "$(readlink -f /usr/bin/hop-run)" = "/opt/hop/hop-run.sh" ] || exit 1
        [ "$(readlink -f /usr/bin/hop-server)" = "/opt/hop/hop-server.sh" ] || exit 1
        [ "$(readlink -f /usr/bin/hop-conf)" = "/opt/hop/hop-conf.sh" ] || exit 1
        
        java -version
        xvfb-run -a hop-gui --version

    - name: "Test Hop configuration management"
      runs: |
        hop-conf --help
        hop-conf -l
        hop-run --help

    - name: "Test pipeline creation and execution"
      runs: |
        mkdir -p /tmp/hop-test
        cat > /tmp/hop-test/simple-pipeline.hpl <<'PIPELINE_EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <pipeline>
          <info>
            <name>test-pipeline</name>
            <description>Simple test pipeline for validation</description>
          </info>
          <transforms>
            <transform>
              <name>Generate Test Data</name>
              <type>RowGenerator</type>
              <location>
                <x>100</x>
                <y>100</y>
              </location>
              <fields>
                <field>
                  <name>test_message</name>
                  <type>String</type>
                  <value>Hello from Apache Hop!</value>
                  <length>50</length>
                </field>
                <field>
                  <name>test_number</name>
                  <type>Integer</type>
                  <value>42</value>
                </field>
              </fields>
              <limit>3</limit>
            </transform>
          </transforms>
        </pipeline>
        PIPELINE_EOF
        xmlstarlet val /tmp/hop-test/simple-pipeline.hpl
        timeout 60 hop-run -f /tmp/hop-test/simple-pipeline.hpl

    - name: "Test Hop server functionality"
      runs: |
        timeout 30 hop-server -p 8080 &
        HOP_SERVER_PID=$!
        sleep 15
        kill -0 $HOP_SERVER_PID
        curl -f -m 10 http://localhost:8080/
        kill $HOP_SERVER_PID
        wait $HOP_SERVER_PID

    - name: "Test file and directory structure"
      runs: |
        set -e
        
        # Verify core Hop directories exist and are writable
        for dir in /opt/hop/lib /opt/hop/plugins /opt/hop/config; do
          if [ ! -d "$dir" ] || [ ! -w "$dir" ]; then
            echo "Error: Directory does not exist or is not writable: $dir"
            exit 1
          fi
        done
        
        # Verify JAR files exist in lib directory
        ls /opt/hop/lib/*.jar
        ls -la /opt/hop/le