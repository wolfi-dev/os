package:
  name: apache-hop
  version: "2.14.0-rc1"
  epoch: 1
  description: Apache Hop is a data orchestration and data engineering platform
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - bash
      - fontconfig
      - glibc-locale-en
      - gtk-3-dev
      - gtk-4
      - libx11-dev
      - libxext
      - libxrender
      - libxtst
      - msttcorefonts-installer
      - openjdk-17-default-jvm
      - ttf-dejavu

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - maven
      - openjdk-17-default-jdk
      - unzip
  environment:
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk
    DEPLOYMENT_PATH: /opt/hop
    VOLUME_MOUNT_POINT: /files
    HOP_LOG_LEVEL: Basic
    HOP_FILE_PATH: ""
    HOP_LOG_PATH: /opt/hop/hop.err.log
    HOP_SHARED_JDBC_FOLDERS: ""
    HOP_PROJECT_NAME: project1
    HOP_PROJECT_DIRECTORY: ""
    HOP_PROJECT_FOLDER: ""
    HOP_PROJECT_CONFIG_FILE_NAME: project-config.json
    HOP_ENVIRONMENT_NAME: environment1
    HOP_ENVIRONMENT_CONFIG_FILE_NAME_PATHS: ""
    HOP_RUN_CONFIG: ""
    HOP_RUN_PARAMETERS: ""
    HOP_RUN_METADATA_EXPORT: ""
    HOP_SYSTEM_PROPERTIES: ""
    HOP_OPTIONS: -XX:+AggressiveHeap
    HOP_CUSTOM_ENTRYPOINT_EXTENSION_SHELL_FILE_PATH: ""
    HOP_SERVER_USER: cluster
    HOP_SERVER_PASSWORD: cluster
    HOP_SERVER_HOSTNAME: 0.0.0.0
    HOP_SERVER_PORT: "8080"
    HOP_SERVER_SHUTDOWNPORT: "8079"
    HOP_SERVER_METADATA_FOLDER: ""
    HOP_SERVER_KEYSTORE: ""
    HOP_SERVER_KEYSTORE_PASSWORD: ""
    HOP_SERVER_KEY_PASSWORD: ""
    HOP_SERVER_MAX_LOG_LINES: ""
    HOP_SERVER_MAX_LOG_TIMEOUT: ""
    HOP_SERVER_MAX_OBJECT_TIMEOUT: ""
    MAVEN_OPTS: |
      -Xmx2g
      -XX:+UseG1GC
      -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/apache/hop
      tag: ${{package.version}}
      expected-commit: 53f31e1b2657d558a9d2321dbc67a85b22d508f4

  - runs: |
      mvn clean install -DskipTests -Dmaven.javadoc.skip=true

      ls -la assemblies/client/target/

      unzip assemblies/client/target/hop-client-*.zip -d /tmp/hop-unpacked
      cd /tmp/hop-unpacked/hop

      mkdir -p "${{targets.contextdir}}"/opt/hop
      mkdir -p "${{targets.contextdir}}"/usr/bin

      cp -r ./* "${{targets.contextdir}}"/opt/hop/

      for tool in hop-conf hop-encrypt hop-gui hop-import hop-run hop-search hop-server; do
        ln -sf /opt/hop/$tool.sh "${{targets.contextdir}}"/usr/bin/$tool
      done

      mkdir -p "${{targets.contextdir}}"/home/hop
      mkdir -p "${{targets.contextdir}}"/files

      # Copy Docker container scripts from source directory (not unpacked client)

      cp /home/build/docker/resources/run.sh "${{targets.contextdir}}"/opt/hop/run.sh
      cp /home/build/docker/resources/load-and-execute.sh "${{targets.contextdir}}"/opt/hop/load-and-execute.sh
      chmod +x "${{targets.contextdir}}"/opt/hop/run.sh
      chmod +x "${{targets.contextdir}}"/opt/hop/load-and-execute.sh

  - uses: strip

update:
  enabled: true
  github:
    identifier: apache/hop
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ${{package.name}}
        - curl
        - xmlstarlet
        - xvfb-run
        - wait-for-it
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      DEPLOYMENT_PATH: /opt/hop
      VOLUME_MOUNT_POINT: /files
      HOP_LOG_LEVEL: Basic
      HOP_FILE_PATH: ""
      HOP_LOG_PATH: /opt/hop/hop.err.log
      HOP_SHARED_JDBC_FOLDERS: ""
      HOP_PROJECT_NAME: project1
      HOP_PROJECT_DIRECTORY: ""
      HOP_PROJECT_FOLDER: ""
      HOP_PROJECT_CONFIG_FILE_NAME: project-config.json
      HOP_ENVIRONMENT_NAME: environment1
      HOP_ENVIRONMENT_CONFIG_FILE_NAME_PATHS: ""
      HOP_RUN_CONFIG: ""
      HOP_RUN_PARAMETERS: ""
      HOP_RUN_METADATA_EXPORT: ""
      HOP_SYSTEM_PROPERTIES: ""
      HOP_OPTIONS: -XX:+AggressiveHeap
      HOP_CUSTOM_ENTRYPOINT_EXTENSION_SHELL_FILE_PATH: ""
      HOP_SERVER_USER: cluster
      HOP_SERVER_PASSWORD: cluster
      HOP_SERVER_HOSTNAME: 0.0.0.0
      HOP_SERVER_PORT: "8080"
      HOP_SERVER_SHUTDOWNPORT: "8079"
      HOP_SERVER_METADATA_FOLDER: ""
      HOP_SERVER_KEYSTORE: ""
      HOP_SERVER_KEYSTORE_PASSWORD: ""
      HOP_SERVER_KEY_PASSWORD: ""
      HOP_SERVER_MAX_LOG_LINES: ""
      HOP_SERVER_MAX_LOG_TIMEOUT: ""
      HOP_SERVER_MAX_OBJECT_TIMEOUT: ""
  pipeline:
    - name: "Verify Installation"
      runs: |
        # Verify symlinks
        [ "$(readlink -f /usr/bin/hop-gui)" = "/opt/hop/hop-gui.sh" ]
        [ "$(readlink -f /usr/bin/hop-run)" = "/opt/hop/hop-run.sh" ]
        [ "$(readlink -f /usr/bin/hop-conf)" = "/opt/hop/hop-conf.sh" ]
        [ "$(readlink -f /usr/bin/hop-encrypt)" = "/opt/hop/hop-encrypt.sh" ]
        [ "$(readlink -f /usr/bin/hop-import)" = "/opt/hop/hop-import.sh" ]
        [ "$(readlink -f /usr/bin/hop-search)" = "/opt/hop/hop-search.sh" ]
        [ "$(readlink -f /usr/bin/hop-server)" = "/opt/hop/hop-server.sh" ]

        # Verify shell scripts are executable
        [ -x "${DEPLOYMENT_PATH}/hop-conf.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-encrypt.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-gui.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-import.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-run.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-search.sh" ]
        [ -x "${DEPLOYMENT_PATH}/hop-server.sh" ]
        [ -x "${DEPLOYMENT_PATH}/run.sh" ]
        [ -x "${DEPLOYMENT_PATH}/load-and-execute.sh" ]

        # Verify batch files exist
        [ -f "${DEPLOYMENT_PATH}/hop-conf.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-encrypt.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-gui.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-import.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-run.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-search.bat" ]
        [ -f "${DEPLOYMENT_PATH}/hop-server.bat" ]

        # Verify key directories exist
        [ -d "${DEPLOYMENT_PATH}/lib" ]
        [ -d "${DEPLOYMENT_PATH}/plugins" ]
        [ -d "${DEPLOYMENT_PATH}/config" ]
        [ -d "${DEPLOYMENT_PATH}/static" ]
        [ -d "${DEPLOYMENT_PATH}/licenses" ]
        [ -d "${VOLUME_MOUNT_POINT}" ]
        [ -d "/home/hop" ]

        # Verify core files exist
        [ -f "${DEPLOYMENT_PATH}/LICENSE" ]
        [ -f "${DEPLOYMENT_PATH}/NOTICE" ]
        [ -f "${DEPLOYMENT_PATH}/hop-server.xml" ]
    - name: "Test Basic Functionality"
      runs: |
        cd "${DEPLOYMENT_PATH}"
        ./hop-run.sh --version 2>&1 | grep -E "^[0-9]+\.[0-9]+\.[0-9]+"
        ./hop-conf.sh --help 2>&1 | grep -E "Usage: <main class>"
    - name: "Test Desktop GUI Application"
      runs: |
        cd "${DEPLOYMENT_PATH}"
        timeout 15s xvfb-run -a ./hop-gui.sh 2>&1 | grep "Enabling project.*default"
    - name: "Test Pipeline Validation"
      runs: |
        mkdir -p /tmp/hop-test
        cat > /tmp/hop-test/test-pipeline.hpl <<'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <pipeline>
          <info>
            <name>test-pipeline</name>
            <description>Test pipeline for validation</description>
          </info>
          <transforms>
            <transform>
              <name>Generate Data</name>
              <type>RowGenerator</type>
              <fields>
                <field>
                  <name>message</name>
                  <type>String</type>
                  <value>Hello Hop</value>
                </field>
              </fields>
              <limit>1</limit>
            </transform>
          </transforms>
        </pipeline>
        EOF
        xmlstarlet val /tmp/hop-test/test-pipeline.hpl

        cd "${DEPLOYMENT_PATH}"
        ./hop-run.sh --file=/tmp/hop-test/test-pipeline.hpl 2>&1 | grep "Starting pipeline.*test-pipeline"
    - uses: test/daemon-check-output
      with:
        setup: |
          # Ensure hop server can start (basic smoke test)
          echo "Setting up Hop Server test environment"
        start: ${DEPLOYMENT_PATH}/load-and-execute.sh
        expected_output: |
          Starting a hop-server on port
          Writing a hop-server config file to /tmp/hop-server.xml
          Starting a hop-server on port 8080
        timeout: 45
        post: |-
          wait-for-it localhost:${HOP_SERVER_PORT} -t 10
          # Test web UI root page
          curl -s -u cluster:cluster http://localhost:${HOP_SERVER_PORT}/ | grep "Hop hop server"
