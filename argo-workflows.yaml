package:
  name: argo-workflows
  version: "3.6.4"
  epoch: 0
  description: Workflow engine for Kubernetes.
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - busybox
      - ca-certificates-bundle
      - go
      - node-gyp
      - nodejs-20
      - openssl
      - yarn
  environment:
    CGO_ENABLED: 0

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 77552d852da5c53a1d8c9918b3474d8bff06260a
      repository: https://github.com/argoproj/argo-workflows
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: remedieate-cve-bump-ui-dependencies.patch

  - name: Generate yarn UI
    runs: |
      rm -rf ui/.yarnrc ui/yarn.lock
      JOBS=max yarn --cwd ui install
      JOBS=max yarn --cwd ui build

      # Install staticfiles for build time
      go install bou.ke/staticfiles@dd04075
      # Pack yarn UI into go binary
      /home/build/.cache/go/bin/staticfiles -o server/static/files.go ui/dist/app

  - uses: go/build
    with:
      packages: ./cmd/argo
      output: argo
      ldflags: |
        -X github.com/argoproj/argo-workflows/v3.version=$(git describe --exact-match --tags --abbrev=0  2> /dev/null || echo untagged)
        -X github.com/argoproj/argo-workflows/v3.buildDate=$(date -u ${SOURCE_DATE_EPOCH:+ -d@${SOURCE_DATE_EPOCH}} "+%Y-%m-%dT%H:%M:%SZ")
        -X github.com/argoproj/argo-workflows/v3.gitCommit=$(git rev-parse HEAD || echo unknown)
        -X github.com/argoproj/argo-workflows/v3.gitTreeState=$(if [ -z "`git status --porcelain`" ]; then echo "clean" ; else echo "dirty"; fi)

  - uses: strip

subpackages:
  - name: "argo-workflows-known-hosts"
    description: "known hosts file for argo workflows"
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/etc/ssh
          cp hack/ssh_known_hosts ${{targets.subpkgdir}}/etc/ssh/
      - uses: strip

  - name: "argo-workflow-controller"
    description: "Argo workflow controller"
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/workflow-controller
          output: workflow-controller
          ldflags: |
            -X github.com/argoproj/argo-workflows/v3.version=$(git describe --exact-match --tags --abbrev=0  2> /dev/null || echo untagged)
            -X github.com/argoproj/argo-workflows/v3.buildDate=$(date -u ${SOURCE_DATE_EPOCH:+ -d@${SOURCE_DATE_EPOCH}} "+%Y-%m-%dT%H:%M:%SZ")
            -X github.com/argoproj/argo-workflows/v3.gitCommit=$(git rev-parse HEAD || echo unknown)
            -X github.com/argoproj/argo-workflows/v3.gitTreeState=$(if [ -z "`git status --porcelain`" ]; then echo "clean" ; else echo "dirty"; fi)
      - uses: strip
    test:
      pipeline:
        - runs: |
            workflow-controller version
            workflow-controller --help

  - name: "argo-workflow-executor"
    description: "Argo workflow executor"
    pipeline:
      - uses: go/build
        with:
          packages: ./cmd/argoexec
          output: argoexec
          ldflags: |
            -X github.com/argoproj/argo-workflows/v3.version=$(git describe --exact-match --tags --abbrev=0  2> /dev/null || echo untagged)
            -X github.com/argoproj/argo-workflows/v3.buildDate=$(date -u ${SOURCE_DATE_EPOCH:+ -d@${SOURCE_DATE_EPOCH}} "+%Y-%m-%dT%H:%M:%SZ")
            -X github.com/argoproj/argo-workflows/v3.gitCommit=$(git rev-parse HEAD || echo unknown)
            -X github.com/argoproj/argo-workflows/v3.gitTreeState=$(if [ -z "`git status --porcelain`" ]; then echo "clean" ; else echo "dirty"; fi)
      - uses: strip
    test:
      pipeline:
        - runs: |
            argoexec version
            argoexec --help

  - name: argo-workflow-controller-compat
    pipeline:
      - runs: |
          # Symlink the binary from usr/bin to /
          mkdir -p "${{targets.subpkgdir}}"
          ln -sf /usr/bin/workflow-controller ${{targets.subpkgdir}}/workflow-controller
    dependencies:
      runtime:
        - argo-workflow-controller

  - name: argo-workflow-executor-compat
    pipeline:
      - runs: |
          # Symlink the binary from usr/bin to /
          mkdir -p "${{targets.subpkgdir}}"
          ln -sf /usr/bin/argoexec ${{targets.subpkgdir}}/argoexec
    dependencies:
      runtime:
        - argo-workflow-executor

  - name: argo-workflow-cli
    pipeline:
      - runs: |
          # Symlink the binary from usr/bin to /
          # Argocli serves the server https://github.com/argoproj/argo-workflows/blob/master/Dockerfile#L110
          mkdir -p "${{targets.subpkgdir}}"
          ln -sf /usr/bin/argo ${{targets.subpkgdir}}/argo
    dependencies:
      runtime:
        - argo-workflows

  - name: "argo-workflows-ui"
    description: "Argo workflows embedded UI"
    dependencies:
      runtime:
        - esbuild
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui
          cp -ar ui/ ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui
      # Mitigate CVE-2025-22866
      - assertions:
          required-steps: 1
        pipeline:
          - if: ${{build.arch}} == "x86_64"
            runs: |
              rm ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui/ui/node_modules/@esbuild/linux-x64/bin/esbuild
              ln -sf /usr/bin/esbuild ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui/ui/node_modules/@esbuild/linux-x64/bin/esbuild
          - if: ${{build.arch}} == "aarch64"
            runs: |
              rm ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui/ui/node_modules/@esbuild/linux-arm64/bin/esbuild
              ln -sf /usr/bin/esbuild ${{targets.subpkgdir}}/usr/lib/argo-workflows-ui/ui/node_modules/@esbuild/linux-arm64/bin/esbuild

update:
  enabled: true
  github:
    identifier: argoproj/argo-workflows
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - argo-workflow-cli
        - argo-workflow-controller-compat
        - argo-workflow-controller
        - argo-workflow-executor-compat
        - argo-workflow-executor
  pipeline:
    - runs: |
        # Test compat packages and full paths
        /usr/bin/argo --help
        /usr/bin/argoexec --help
        /usr/bin/workflow-controller --help
        /argo --help
        /workflow-controller --help
        /argoexec --help
