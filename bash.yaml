package:
  name: bash
  version: 5.2.37
  epoch: 34
  description: "GNU bourne again shell"
  copyright:
    - license: GPL-3.0-or-later
  dependencies:
    runtime:
      - merged-bin
      - wolfi-baselayout

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - ncurses-dev
  environment:
    # Should be able to drop std=17 once v5.3 is released
    CFLAGS: "-std=c17 -DSYS_BASHRC='\"/etc/bash.bashrc\"' -DSYS_BASH_LOGOUT='\"/etc/bash.bash_logout\"'"

pipeline:
  - uses: fetch
    with:
      uri: https://ftp.gnu.org/gnu/bash/bash-${{package.version}}.tar.gz
      expected-sha256: 9599b22ecd1d5787ad7d3b7bf0c59f312b3396d1e281175dd1f8a4014da621ff

  - uses: autoconf/configure
    with:
      opts: |
        --prefix=/usr \
        --bindir=/usr/bin \
        --sysconfdir=/etc \
        --without-libidn \
        --with-ssl=openssl \
        --disable-nls \
        --enable-readline \
        --without-bash-malloc \
        --with-curses

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: bash-binsh
    dependencies:
      provider-priority: 60
      runtime:
        - bash
        - merged-bin
        - wolfi-baselayout
    pipeline:
      - runs: |
          install -d "${{targets.subpkgdir}}/usr/bin"
          ln -s bash "${{targets.subpkgdir}}/usr/bin/sh"
    test:
      pipeline:
        - runs: |
            if ! [ /usr/bin/sh -ef /usr/bin/bash ] ; then
              printf "\n/usr/bin/sh is not same as /usr/bin/bash" 1> /dev/stderr
              exit 1
            fi
            sh --version | grep "${{package.version}}"
            sh --help | grep 'Type.*for more information about shell options.$'

  - name: "bash-doc"
    description: "bash documentation"
    pipeline:
      - uses: split/manpages
      - uses: split/infodir
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/
    test:
      pipeline:
        - uses: test/docs
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: "bash-dev"
    description: "bash development headers"
    pipeline:
      - uses: split/dev
      - runs: |
          install -d "${{targets.subpkgdir}}/usr/bin/"
          mv "${{targets.destdir}}"/usr/bin/bashbug "${{targets.subpkgdir}}"/usr/bin/
    test:
      pipeline:
        - runs: |
            bashbug --version | grep "${{package.version}}"
            bashbug --help | grep "^Bashbug is used to send mail to the Bash maintainers$"
        - uses: test/pkgconf
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: "bash-builtins"
    description: "bash loadable builtins"
    pipeline:
      - runs: |
          install -d "${{targets.subpkgdir}}/usr/lib"
          mv "${{targets.destdir}}/usr/lib/bash" ${{targets.subpkgdir}}/usr/lib/
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

update:
  enabled: true
  release-monitor:
    identifier: 166

test:
  pipeline:
    - name: Smoke tests
      runs: |
        bash --version | grep "${{package.version}}"
        bash --help | grep 'Type.*for more information about shell options.$'
    - name: Ensure POSIX functionality works
      # Nothing particularly defined here, this is just some functionality we usually need on tests
      # If there is any other idea, like maybe some (un)official bash/POSIX compliance test that would be better than having this test
      runs: |
        bash <<'EOF' | tee output.txt
        #!/usr/bin/env bash
        set -euo pipefail
        echo "Hello world!"
        echo "This is the first command"; echo "This is the second command"
        variable="Some string"
        echo "$variable"
        echo '$variable'
        echo "${variable}"
        echo "${variable/Some/A}"
        length=7
        echo "${variable:0:length}"
        echo "${variable: -5}"
        echo "${foo:-"DefaultValueIfFooIsMissingOrEmpty"}"
        array=(one two three four five six)
        echo "${array[0]}" # => "one"
        echo "${array[@]}"
        echo "${#array[@]}"
        echo "${#array[2]}"
        echo "${array[@]:3:2}"
        echo {1..10}
        echo {a..z}
        name="linky"
        not_name="not_linky"
        if [[ "$name" != "$not_name" ]]; then
            echo "Variables do not match"
        fi
        echo "this is a file" > file1.txt
        cp file1.txt file2.txt
        mkdir directory
        cp file*.txt directory
        cp -r directory directory2
        pushd directory
        touch "emptyfile"
        ln -s ./emptyfile alsoempty
        popd
        touch postpopd
        echo "pipe" | tr e a
        EOF
        get_line() { cat output.txt | sed -n "${1}p"; }

        get_line 1 | grep "^Hello world!$"
        get_line 2 | grep "^This is the first command$"
        get_line 3 | grep "^This is the second command$"
        get_line 4 | grep "^Some string$"
        get_line 5 | grep "^\$variable$"
        get_line 6 | grep "^Some string$"
        get_line 7 | grep "^A string$"
        get_line 8 | grep "^Some st$"
        get_line 9 | grep "^tring$"
        get_line 10 | grep "^DefaultValueIfFooIsMissingOrEmpty$"
        get_line 11 | grep "^one$"
        get_line 12 | grep "^one two three four five six$"
        get_line 13 | grep "^6$"
        get_line 14 | grep "^5$"
        get_line 15 | grep "^four five$"
        get_line 16 | grep "^1 2 3 4 5 6 7 8 9 10$"
        get_line 17 | grep "^a b c d e f g h i j k l m n o p q r s t u v w x y z$"
        get_line 18 | grep "^Variables do not match$"
        get_line 19 | grep "^/home/build/directory /home/build$"
        get_line 20 | grep "^/home/build$"
        get_line 21 | grep "^pipa$"

        cat file1.txt | grep "^this is a file$"
        cat file2.txt | grep "^this is a file$"
        stat directory/*
        stat directory/emptyfile
        test -L directory/alsoempty
        stat directory/alsoempty
        stat directory2/*
        stat postpopd
