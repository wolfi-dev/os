package:
  name: bats
  version: 1.11.1
  epoch: 0
  description: Bash Automated Testing System
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - bash
      - busybox
      - ncurses
      - parallel

environment:
  contents:
    packages:
      - bash
      - wget

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/bats-core/bats-core
      tag: v${{package.version}}
      expected-commit: b640ec3cf2c7c9cfc9e6351479261186f76eeec8

  - runs: |
      ./install.sh "${{targets.contextdir}}/usr"
      mkdir -p "${{targets.contextdir}}/tmp/"
      cp -r ./docker "${{targets.contextdir}}/tmp/docker"
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" support 0.3.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" file 0.4.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" assert 2.1.0
      "${{targets.contextdir}}/tmp/docker/install_libs.sh" detik 1.3.1
      find "${{targets.contextdir}}" -type f -perm /2000 -exec chmod g-s {} \;
      rm -rf "${{targets.contextdir}}/tmp/"

subpackages:
  - name: bats-compat
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}/opt/bats/"
          find . -maxdepth 1 \
            -not -name '.*' \
            -not -name 'melange-out' \
            -exec mv {} "${{targets.contextdir}}/opt/bats/" \;
          mkdir -p "${{targets.contextdir}}/usr/local/bin"
          ln -s /opt/bats/bin/bats "${{targets.contextdir}}/usr/local/bin/bats"
    description: bats compatibility package

  - name: bats-doc
    pipeline:
      - uses: split/manpages
    description: bats manpages
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  github:
    identifier: bats-core/bats-core
    strip-prefix: v

test:
  pipeline:
    - runs: |
        bats --version

        # Create the example.sh script using heredocs
        cat << 'EOF' > /tmp/example.sh
        add_numbers() {
          echo $(( $1 + $2 ))
        }

        file_exists() {
          if [[ -f "$1" ]]; then
            echo "true"
          else
            echo "false"
          fi
        }

        string_contains() {
          if [[ "$1" == *"$2"* ]]; then
            echo "true"
          else
            echo "false"
          fi
        }
        EOF

        # Create the inline_test.bats script using heredocs
        cat << 'EOF' > /tmp/inline_test.bats
        #!/usr/bin/env bats

        load_file() {
          source "/tmp/example.sh"
        }

        setup() {
          load_file
        }

        teardown() {
          rm -f testfile.txt
        }

        @test "add_numbers should correctly add two numbers" {
          run add_numbers 3 5
          [ "$status" -eq 0 ]
          [ "$output" -eq 8 ]
        }

        @test "file_exists should return true for existing file" {
          touch testfile.txt
          run file_exists testfile.txt
          [ "$status" -eq 0 ]
          [ "$output" = "true" ]
        }

        @test "file_exists should return false for non-existing file" {
          run file_exists non_existing_file.txt
          [ "$status" -eq 0 ]
          [ "$output" = "false" ]
        }

        @test "string_contains should return true if substring is found" {
          run string_contains "hello world" "hello"
          [ "$status" -eq 0 ]
          [ "$output" = "true" ]
        }

        @test "string_contains should return false if substring is not found" {
          run string_contains "hello world" "bye"
          [ "$status" -eq 0 ]
          [ "$output" = "false" ]
        }
        EOF

        # Make the scripts executable
        chmod +x /tmp/example.sh
        chmod +x /tmp/inline_test.bats

        # Run the bats tests
        bats /tmp/inline_test.bats

        # Clean up
        rm -f /tmp/example.sh
        rm -f /tmp/inline_test.bats
