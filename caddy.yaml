package:
  name: caddy
  version: 2.9.1
  epoch: 4
  description: Fast and extensible multi-platform HTTP/1-2-3 web server with automatic HTTPS
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - busybox
      - ca-certificates-bundle
  environment:
    CGO_ENABLED: "0"

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 0e570e0cc717f02cf3800ae741df70cd074c7275
      repository: https://github.com/caddyserver/caddy
      tag: v${{package.version}}

  - runs: |
      install -m644 -D "./Caddyfile" "${{targets.destdir}}/etc/caddy/Caddyfile"
      install -m755 -D "./index.html" "${{targets.destdir}}/usr/share/caddy/index.html"

  - runs: tar cfv caddy-src.tar .

  - uses: go/bump
    with:
      deps: |-
        github.com/golang/glog@v1.2.4

  - uses: go/build
    with:
      output: caddy
      packages: ./cmd/caddy

subpackages:
  - name: caddy-man
    description: caddy manpages
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          "${{targets.destdir}}"/usr/bin/caddy manpage --directory "${{targets.subpkgdir}}"/usr/share/

  - name: caddy-src
    description: Caddy sources
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}/usr/src/caddy"
          tar xfv caddy-src.tar -C "${{targets.subpkgdir}}/usr/src/caddy"

update:
  enabled: true
  manual: false
  github:
    identifier: caddyserver/caddy
    strip-prefix: v
    tag-filter: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - curl
        - netcat-openbsd
        - procps
        - coreutils
  pipeline:
    - name: "Verify binary and version"
      runs: |
        caddy version
        caddy --version
    - name: "Check basic help output"
      runs: |
        caddy help
        caddy list-modules
    - name: "Test basic HTTP server"
      uses: test/daemon-check-output
      with:
        setup: |
          echo "http://localhost:2020 {
            respond \"Hello, Wolfi!\"
          }" > test.Caddyfile
        start: caddy run --config test.Caddyfile
        expected_output: "serving initial configuration"
        error_strings: |
          "msg":"error"
          "level":"error"
          "panic"
          "fatal"
          failed
          Error:
          error:
          denied
    - name: "Test static file serving"
      uses: test/daemon-check-output
      with:
        setup: |
          mkdir -p webroot
          echo "Static Test" > webroot/test.txt
          echo "http://localhost:2021 {
            root * webroot
            file_server
          }" > static.Caddyfile
        start: caddy run --config static.Caddyfile
        expected_output: "serving initial configuration"
        error_strings: |
          "msg":"error"
          "level":"error"
          "panic"
          "fatal"
          failed
          Error:
          error:
          denied
        post: |
          curl -s http://localhost:2021/test.txt | grep -q "Static Test"
    - name: "Test module loading and functionality"
      uses: test/daemon-check-output
      with:
        setup: |
          cat <<EOF > modules.Caddyfile
          http://localhost:2024 {
            route /headers {
              header Content-Type "text/plain"
              respond "Headers Test"
            }
            route /reverse/* {
              uri strip_prefix /reverse
              reverse_proxy http://localhost:2024 {
                header_up X-Real-IP {remote_host}
              }
            }
            route /compress {
              encode gzip
              respond "Compression Test"
            }
          }
          EOF
        start: caddy run --config modules.Caddyfile
        expected_output: "serving initial configuration"
        error_strings: |
          "msg":"error"
          "level":"error"
          "panic"
          "fatal"
          failed
          Error:
          error:
          denied
        post: |
          # Test header module
          curl -s -i http://localhost:2024/headers | grep -q "Content-Type: text/plain"

          # Test reverse_proxy module
          curl -s http://localhost:2024/reverse/headers | grep -q "Headers Test"

          # Test compression module
          curl -s -H "Accept-Encoding: gzip" http://localhost:2024/compress | grep -q "Compression Test"
