package:
  name: clickhouse-25.2
  version: "25.2.2.39"
  epoch: 40
  description: ClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics.
  copyright:
    - license: Apache-2.0
  resources:
    cpu: 65
    memory: 128Gi
  dependencies:
    provides:
      - clickhouse=${{package.full-version}}
    runtime:
      - merged-usrsbin
      - wolfi-baselayout

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang~19
      - cmake
      - coreutils
      - findutils
      - git
      - grep
      - ini-file
      - libcxx1
      - lld
      - nasm
      - ninja
      - perl
      - python3
      - shadow
      - xmlstarlet
      - yasm

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ClickHouse/ClickHouse
      tag: v${{package.version}}-stable
      expected-commit: a1200cff50a7ceb17f5fff71e47f5d20d9ada287

  # The default build script is defensive and tries to protect against defining cflags.
  - uses: patch
    with:
      patches: allow_cflags.patch

  - runs: |
      git submodule update --init
      mkdir build
      cd build
      cmake \
        -DCOMPILER_CACHE=disabled \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Release \
        -DNO_ARMV81_OR_HIGHER=1 \
        -DCMAKE_INSTALL_LIBDIR=lib \
        -DCMAKE_CXX_FLAGS="-Wno-error=unused-result" \
        ..

  - runs: |
      cd build
      ninja -j $(nproc)
      mkdir -p  ${{targets.destdir}}/var/log/clickhouse-server
      DESTDIR=${{targets.destdir}} ninja install
      rm -rf ${{targets.destdir}}/usr/lib/debug

  - uses: strip

subpackages:
  - name: "${{package.name}}-dev"
    description: "headers for clickhouse"
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - merged-usrsbin
        - wolfi-baselayout

  - name: "${{package.name}}-bash-completion"
    description: "bash completion for clickhouse"
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/share/bash-completion/completions
          mv ${{targets.destdir}}/usr/share/bash-completion/completions/clickhouse ${{targets.subpkgdir}}/usr/share/bash-completion/completions
    dependencies:
      runtime:
        - merged-usrsbin
        - wolfi-baselayout

  - name: "${{package.name}}-compat"
    description: "docker compat for clickhouse"
    pipeline:
      - runs: |
          cd build
          install -Dm755 ../docker/server/entrypoint.sh ${{targets.subpkgdir}}/entrypoint.sh
          mkdir -p ${{targets.subpkgdir}}/etc/clickhouse-server/config.d/
          cp  ../docker/server/docker_related_config.xml ${{targets.subpkgdir}}/etc/clickhouse-server/config.d/docker_related_config.xml
    dependencies:
      runtime:
        - merged-usrsbin
        - wolfi-baselayout

  - name: ${{package.name}}-bitnami-compat
    dependencies:
      provides:
        - clickhouse-bitnami-compat=${{package.full-version}}
      runtime:
        - bash
        - busybox
        - coreutils
        - merged-usrsbin
        - wolfi-baselayout
        - xmlstarlet
    pipeline:
      - uses: bitnami/compat
        with:
          image: clickhouse
          version-path: 25/debian-12
      - runs: |
          set -x
          mkdir -p ${{targets.contextdir}}/bitnami/clickhouse/etc
          mkdir -p ${{targets.contextdir}}/bitnami/clickhouse/data
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/etc.default
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/config.d
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/conf.d
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/users.d
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/bin
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/logs
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/tmp
          mkdir -p ${{targets.contextdir}}/opt/bitnami/clickhouse/licenses
          mkdir -p ${{targets.contextdir}}/var/log/clickhouse-server

          mkdir ${{targets.contextdir}}/docker-entrypoint-initdb.d
          mkdir ${{targets.contextdir}}/docker-entrypoint-startdb.d

          install -m755 ${{targets.destdir}}/etc/clickhouse-keeper/keeper_config.xml ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/keeper_config.xml
          install -m755 ${{targets.destdir}}/etc/clickhouse-server/users.xml ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/users.xml
          install -m755 ${{targets.destdir}}/etc/clickhouse-server/config.xml ${{targets.contextdir}}/opt/bitnami/clickhouse/etc/config.xml

          mkdir -p ${{targets.contextdir}}/var/log/

          # Disable some commands used in Bitnami scripts. These commands more likely fail in this since this image take non root approach
          # sed -i 's/owned_by "$dir" "$owner_user" "$owner_group"/continue/g' ${{targets.contextdir}}/opt/bitnami/scripts/libfs.sh
          sed -i 's/ensure_user_exists/# ensure_user_exists/g' ${{targets.contextdir}}/opt/bitnami/scripts/clickhouse/postunpack.sh
          # sed -i 's/am_i_root/# am_i_root/g' ${{targets.contextdir}}/opt/bitnami/scripts/clickhouse/setup.sh

          # The `--userspec`` flag belongs to GNU's chroot, whereas we are use BusyBox's. As a workaround, use `su-exec` instead.
          sed -i 's|exec chroot --userspec="$userspec" /|exec chroot / su-exec "$userspec"|' ${{targets.contextdir}}/opt/bitnami/scripts/libos.sh
          sed -i 's|chroot --userspec="$userspec" /|chroot / su-exec "$userspec"|' ${{targets.contextdir}}/opt/bitnami/scripts/libos.sh

          # Use package path while unpacking
          find . -iname "*.sh" -exec sed 's#/opt/bitnami#${{targets.contextdir}}/opt/bitnami#g' -i {} \;
          find . -iname "*.sh" -exec sed -i '/chown/c\continue'  -i {} \;
          find . -iname "*.sh" -exec sed 's#/BITNAMI_VOLUME_DIR="/bitnami"#BITNAMI_VOLUME_DIR="${{targets.contextdir}}/bitnami"#g' -i {} \;
          find . -iname "*.sh" -exec sed 's#"/bitnami/clickhouse"#"${{targets.contextdir}}/bitnami/clickhouse"#g' -i {} \;

          ${{targets.contextdir}}/opt/bitnami/scripts/clickhouse/postunpack.sh
          # Restore path
          find ${{targets.contextdir}}/opt/bitnami -type f -exec sed 's#${{targets.contextdir}}##g' -i {} \;

          # Find all files in /usr/bin that are either named "clickhouse" or symlinks pointing to "clickhouse"
          for file in ${{targets.destdir}}/usr/bin/*; do
              if [ -f "$file" ] && [ "$(basename "$file")" = "clickhouse" ]; then
                  # Found a direct match for "clickhouse"
                  ln -sf /usr/bin/clickhouse ${{targets.contextdir}}/opt/bitnami/clickhouse/bin/clickhouse
              elif [ -L "$file" ]; then
                  # Check if the symlink points to clickhouse
                  target=$(readlink -f "$file")
                  if [ "$(basename "$target")" = "clickhouse" ]; then
                      link_name=$(basename "$file")
                      ln -sf /usr/bin/clickhouse "${{targets.contextdir}}/opt/bitnami/clickhouse/bin/$link_name"
                  fi
              fi
          done

          ln -s /usr/bin/clickhouse-library-bridge ${{targets.contextdir}}/opt/bitnami/clickhouse/bin/clickhouse-library-bridge
          ln -s /usr/bin/clickhouse-odbc-bridge ${{targets.contextdir}}/opt/bitnami/clickhouse/bin/clickhouse-odbc-bridge
          ln -s /dev/stdout ${{targets.contextdir}}/var/log/clickhouse-server/clickhouse.log
          ln -s /dev/stderr ${{targets.contextdir}}/var/log/clickhouse-server/clickhouse_error.log
          mkdir -p ${{targets.contextdir}}/var/lib
          ln -s /bitnami/clickhouse/data ${{targets.contextdir}}/var/lib/clickhouse
    test:
      environment:
        contents:
          packages:
            - ${{package.name}}
      pipeline:
        - uses: bitnami/validate-welcome-message
          with:
            app-name: clickhouse

update:
  enabled: true
  ignore-regex-patterns:
    - '-stable$'
  git:
    tag-filter-prefix: v25.2.
    strip-prefix: v
    strip-suffix: -stable

test:
  environment:
    accounts:
      groups:
        - groupname: nonroot
          gid: 1001
      users:
        - username: nonroot
          gid: 1001
          uid: 1001
      run-as: 0
    contents:
      packages:
        - bash
        - coreutils
        - findutils
        - procps # for checking server process
        - curl # for HTTP interface testing
  pipeline:
    # AUTOGENERATED
    - runs: |
        ch --version
        chc --version
        chl --version
        clickhouse --version
        clickhouse-benchmark --help
        clickhouse-client --version
        clickhouse-compressor --help
        # clickhouse-disks does not support --version
        # clickhouse-disks --version
        clickhouse-format version
        clickhouse-git-import version
        clickhouse-keeper --version
        clickhouse-keeper-client --help
        clickhouse-keeper-converter --help
        clickhouse-library-bridge --help
        clickhouse-local --version
        clickhouse-obfuscator --help
        clickhouse-odbc-bridge --help
        clickhouse-server --version
        clickhouse-static-files-disk-uploader --help
        clickhouse-su --version
        ch --help
        chc --help
        chl --help
        clickhouse --help
        clickhouse-client --help
        clickhouse-disks --help
        clickhouse-format help
        clickhouse-git-import help
        clickhouse-keeper --help
        clickhouse-local --help
        clickhouse-obfuscator version
        clickhouse-server --help
        clickhouse-static-files-disk-uploader version
        clickhouse-su --help
    - name: "Test server"
      uses: test/daemon-check-output
      with:
        start: clickhouse-server
        expected_output: |
          Starting ClickHouse
          starting up
          Scanning
        post: |
          ./test-daemon.sh
