package:
  name: cluster-proportional-autoscaler
  version: "1.10.2"
  epoch: 0
  description: Kubernetes Cluster Proportional Autoscaler Container
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubernetes-sigs/cluster-proportional-autoscaler
      tag: v${{package.version}}
      expected-commit: ccf8617916aebe4f5d985ae36993c0551a6a4d32

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0
      modroot: .

  - uses: go/build
    with:
      modroot: .
      packages: ./cmd/cluster-proportional-autoscaler
      output: cluster-proportional-autoscaler
      ldflags: -X github.com/kubernetes-sigs/cluster-proportional-autoscaler/pkg/version.VERSION=v${{package.version}}

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - working-directory: ${{targets.subpkgdir}}
        runs: |
          # The helm chart expects to be able to call "./cluster-proportional-autoscaler"
          ln -s /usr/bin/cluster-proportional-autoscaler "cluster-proportional-autoscaler"

update:
  enabled: true
  github:
    identifier: kubernetes-sigs/cluster-proportional-autoscaler
    strip-prefix: v
    use-tag: true
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - kubectl
  pipeline:
    - uses: test/kwok/cluster
    - runs: |
        # Create the ConfigMap
        kubectl create configmap nginx-autoscaler --from-literal=linear='{
          "coresPerReplica": 2,
          "nodesPerReplica": 1,
          "max": 3,
          "preventSinglePointFailure": true
        }' --namespace=default

        # Create the Deployment
        kubectl create deployment nginx-autoscale-example --image=nginx --replicas=1 --namespace=default
        kubectl expose deployment nginx-autoscale-example --port=80 --target-port=80 --namespace=default

        # Create the ServiceAccount
        kubectl create serviceaccount nginx-autoscaler --namespace=default

        # Create the ClusterRole
        kubectl create clusterrole system:nginx-autoscaler \
          --verb=list,watch --resource=nodes \
          --verb=get,update --resource=replicationcontrollers/scale \
          --verb=get,update --resource=deployments/scale,replicasets/scale \
          --verb=get,create --resource=configmaps

        # Create the ClusterRoleBinding
        kubectl create clusterrolebinding system:nginx-autoscaler \
          --clusterrole=system:nginx-autoscaler \
          --serviceaccount=default:nginx-autoscaler
          sleep 2

        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        export KUBERNETES_SERVICE_HOST=127.0.0.1
        export KUBERNETES_SERVICE_PORT=32764
        CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
        cp $CA /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        kubectl create token nginx-autoscaler > /var/run/secrets/kubernetes.io/serviceaccount/token
        cluster-proportional-autoscaler --namespace=default --configmap=nginx-autoscaler --target=deployment/nginx-autoscale-example --logtostderr=true --v=2 > /dev/null 2>&1 &
        sleep 5

        kubectl get pods -A

        # get the replica count of the pod -l app=nginx-autoscale-example
        REPLICAS=$(kubectl get deployment nginx-autoscale-example -o jsonpath='{.spec.replicas}')
        if [ "$REPLICAS" -eq 3 ]; then
          echo "Replica count is 3"
        else
          echo "Replica count is not 3"
          exit 1
        fi
