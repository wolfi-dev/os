package:
  name: containerd-2
  version: "2.1.4"
  epoch: 0
  description: An open and reliable container runtime
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - containerd=${{package.full-version}}
    # Aggregate all the subpackages into this meta-package.
    runtime:
      - containerd-shim-runc-v2-2
      - containerd-stress-2
      - ctr
      - runc

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 75cb2b7193e4e490e9fbdc236c0e811ccaba3376
      repository: https://github.com/containerd/containerd
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/net@v0.39.0

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/net@v0.39.0
      modroot: api

  - runs: |
      make VERSION="v${{package.version}}"

  - runs: |
      install -Dm755 ./bin/containerd "${{targets.destdir}}"/usr/bin/containerd

      mkdir -p "${{targets.destdir}}"/etc/containerd
      ./bin/containerd config default > "${{targets.destdir}}"/etc/containerd/config.toml

  - uses: strip

data:
  - name: bins
    items:
      ctr: client for containerd
      containerd-stress: stress utility
      containerd-shim-runc-v2: runc shim v2

subpackages:
  - range: bins
    name: ${{range.key}}-2
    description: ${{range.value}}
    dependencies:
      provides:
        - ${{range.key}}=${{package.full-version}}
    pipeline:
      # Move each binary into its own subpackage, which gets runtime-depended-on by the containerd meta-package.
      # This allows users who only want one of these tools to get it, or get all of them by depending on `containerd` (with its config)
      - runs: |
          install -Dm755 "./bin/${{range.key}}" "${{targets.subpkgdir}}"/usr/bin/${{range.key}}

  - name: containerd-service-2
    description: "Systemd services for containerd"
    dependencies:
      provides:
        - containerd-service=${{package.full-version}}
      runtime:
        - containerd-2
        - systemd
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/systemd/system/
          mkdir -p ${{targets.subpkgdir}}/usr/lib/systemd/system-preset/
          install -Dm644 containerd.service "${{targets.subpkgdir}}"/usr/lib/systemd/system/containerd.service
          sed -i "s|/usr/local/bin|/usr/bin|g" "${{targets.subpkgdir}}"/usr/lib/systemd/system/containerd.service
          sed -i "s|/sbin|/usr/sbin|g" "${{targets.subpkgdir}}"/usr/lib/systemd/system/containerd.service
          echo "enable containerd.service" > "${{targets.subpkgdir}}/usr/lib/systemd/system-preset/81-containerd.preset"

update:
  enabled: true
  github:
    identifier: containerd/containerd
    strip-prefix: v
    tag-filter: v2
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ctr-2
        - containerd-shim-runc-v2-2
        - containerd-stress-2
  pipeline:
    - name: Basic version checks
      runs: |
        containerd --version
        ctr --version
        containerd-shim-runc-v2 -v
        containerd-stress --help
    - name: Verify default config generation
      runs: |
        # Test config file was generated during package install
        [ -f /etc/containerd/config.toml ] || exit 1

        # Generate a test config and validate it
        containerd config default > /tmp/test-config.toml
        containerd config dump > /tmp/dump-config.toml
        [ -s /tmp/test-config.toml ] || exit 1
        [ -s /tmp/dump-config.toml ] || exit 1
    - uses: test/daemon-check-output
      with:
        setup: |
          # Create a minimal loopback CNI config to satisfy the CRI plugin
          mkdir -p /etc/cni/net.d
          cat > /etc/cni/net.d/99-loopback.conf << 'EOF'
          {
            "cniVersion": "0.3.1",
            "name": "loopback",
            "type": "loopback"
          }
          EOF
        start: containerd -l debug
        timeout: 10
        expected_output: |
          starting containerd
          serving
          containerd successfully booted
        error_strings: |
          ERROR
          FATAL
          panic
          failed to start
    - name: Test ctr operations with daemon
      runs: |
        # Create a minimal loopback CNI config to satisfy the CRI plugin
        mkdir -p /etc/cni/net.d
        cat > /etc/cni/net.d/99-loopback.conf << 'EOF'
        {
          "cniVersion": "0.3.1",
          "name": "loopback",
          "type": "loopback"
        }
        EOF

        # Start containerd in background
        containerd &
        CONTAINERD_PID=$!

        # Wait for daemon to be ready
        for i in $(seq 1 10); do
          if [ -S /run/containerd/containerd.sock ]; then
            break
          fi
          sleep 1
        done

        # Ensure socket exists
        [ -S /run/containerd/containerd.sock ] || exit 1

        # Test namespace operations
        echo "Testing namespace operations..."
        ctr namespace list | grep -E "(default|NAME)"
        ctr namespace create test-namespace
        ctr namespace list | grep test-namespace
        ctr namespace remove test-namespace

        # Verify removal
        if ctr namespace list | grep -q test-namespace; then
          echo "Failed to remove test namespace"
          kill $CONTAINERD_PID
          exit 1
        fi

        # Test plugin list
        echo "Testing plugin operations..."
        ctr plugin list | grep -E "(io.containerd|TYPE)"
        ctr plugin list | grep "io.containerd.content"
        ctr plugin list | grep "io.containerd.snapshotter"
        ctr plugin list | grep "io.containerd.runtime"
        ctr plugin list | grep "io.containerd.service"

        # Test version negotiation
        echo "Testing version negotiation..."
        ctr version
        ctr version | grep "Client"
        ctr version | grep "Server"

        # Test content/image commands
        echo "Testing content and image commands..."
        ctr images list
        ctr content list
        ctr snapshots list

        # Test container commands
        echo "Testing container commands..."
        ctr containers list
        ctr tasks list

        # Test event monitoring
        echo "Testing event functionality..."
        timeout 2 ctr events || true

        # Cleanup
        kill $CONTAINERD_PID
        wait $CONTAINERD_PID
    - name: Test ctr command completeness
      runs: |
        # Test main command groups exist
        ctr --help | grep "containers"
        ctr --help | grep "images"
        ctr --help | grep "namespaces"
        ctr --help | grep "tasks"
        ctr --help | grep "snapshots"
        ctr --help | grep "content"
        ctr --help | grep "plugins"
        ctr --help | grep "events"
    - name: Test containerd-stress
      runs: |
        # Test that containerd-stress help works
        containerd-stress --help
