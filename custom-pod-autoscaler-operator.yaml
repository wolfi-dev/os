package:
  name: custom-pod-autoscaler-operator
  version: "1.4.2"
  epoch: 2 # CVE-2025-47906
  description: Operator for managing Kubernetes Custom Pod Autoscalers (CPA).
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 657d0a3a829e596404e4f5c09e71071237721d35
      repository: https://github.com/jthomperoo/custom-pod-autoscaler-operator
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/net@v0.38.0
        golang.org/x/oauth2@v0.27.0
        google.golang.org/protobuf@v1.33.0

  - uses: go/build
    with:
      packages: .
      output: custom-pod-autoscaler-operator
      vendor: true

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}/app"
          ln -s /usr/bin/custom-pod-autoscaler-operator "${{targets.contextdir}}/operator"
    test:
      pipeline:
        - runs: test "$(readlink /operator)" = "/usr/bin/custom-pod-autoscaler-operator"

update:
  enabled: true
  github:
    identifier: jthomperoo/custom-pod-autoscaler-operator
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-compat
        - curl
        - wait-for-it
        - helm
    environment:
      KUBERNETES_SERVICE_HOST: "127.0.0.1"
      KUBERNETES_SERVICE_PORT: 32764
  pipeline:
    - uses: test/tw/ldd-check
    - uses: test/kwok/cluster
    - name: Fix SA token
      runs: |
        #!/usr/bin/env bash
        set -euo pipefail
        # Workaround fix for: "Fail to create in-cluster Kubernetes config: open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory"
        # InClusterConfig() parses the file and insists it contain a real PEM-encoded CA certificate.
        DIR=/var/run/secrets/kubernetes.io/serviceaccount
        mkdir -p "$DIR"
        kwokctl --name kwok kubectl create serviceaccount cpa
        kwokctl --name kwok kubectl -n default create token cpa --duration=8760h > "$DIR/token"
        CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
        cp $CA /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        echo default > "$DIR/namespace"
    - name: "start daemon on localhost"
      uses: test/daemon-check-output
      with:
        setup: |
          # Fix permissions
          kubectl apply -f - <<'EOF'
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: cpa-operator
          rules:
            # Manage CPA CRs
            - apiGroups: ["custompodautoscaler.com"]
              resources: ["custompodautoscalers"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["custompodautoscaler.com"]
              resources: ["custompodautoscalers/status", "custompodautoscalers/finalizers"]
              verbs: ["get", "update", "patch"]

            # Core objects the operator reads/creates
            - apiGroups: [""]
              resources: ["pods", "serviceaccounts", "secrets", "configmaps", "events"]
              verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

            # Workload APIs it may manage for runners
            - apiGroups: ["apps"]
              resources: ["deployments", "replicasets", "statefulsets"]
              verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
            - apiGroups: ["apps"]
              resources: ["deployments/scale", "replicasets/scale", "statefulsets/scale"]
              verbs: ["get", "update", "patch"]
            - apiGroups: [""]
              resources: ["replicationcontrollers"]
              verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
            - apiGroups: [""]
              resources: ["replicationcontrollers/scale"]
              verbs: ["get", "update", "patch"]

            # RBAC: allow creating roles/bindings AND granting perms (escalate/bind)
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["roles", "rolebindings"]
              verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "escalate", "bind"]
            # Often helpful so it can bind existing ClusterRoles if needed
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["clusterroles", "clusterrolebindings"]
              verbs: ["get", "list", "watch", "bind"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: cpa-operator
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cpa-operator
          subjects:
            - kind: ServiceAccount
              name: cpa
              namespace: default
          EOF
          helm show crds https://github.com/jthomperoo/custom-pod-autoscaler-operator/releases/download/v${{package.version}}/custom-pod-autoscaler-operator-v${{package.version}}.tgz \
            | kubectl apply --server-side -f -
          kubectl wait --for=condition=Established crd/custompodautoscalers.custompodautoscaler.com --timeout=60s
          helm install custom-pod-autoscaler-operator \
            https://github.com/jthomperoo/custom-pod-autoscaler-operator/releases/download/v${{package.version}}/custom-pod-autoscaler-operator-v${{package.version}}.tgz \
            -n default --create-namespace \
            --set serviceAccount.create=false \
            --set serviceAccount.name=cpa \
            --set rbac.create=false \
            --wait
        start: "/operator"
        timeout: 10
        expected_output: |
          starting manager
          Serving metrics server
          Starting Controller
        post: |
          wait-for-it -t 5 --strict localhost:8000 -- echo "Server is up"
          kubectl apply -f https://raw.githubusercontent.com/jthomperoo/custom-pod-autoscaler/refs/heads/master/example/python-custom-autoscaler/cpa.yaml
