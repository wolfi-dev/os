diff --git a/pkg/collector/corechecks/ebpf/probe/oomkill/oom_kill.go b/pkg/collector/corechecks/ebpf/probe/oomkill/oom_kill.go
index db83de192f..d0684f95cc 100644
--- a/pkg/collector/corechecks/ebpf/probe/oomkill/oom_kill.go
+++ b/pkg/collector/corechecks/ebpf/probe/oomkill/oom_kill.go
@@ -62,6 +62,7 @@ func loadOOMKillCOREProbe() (*Probe, error) {
 	}
 
 	var probe *Probe
+	log.Info("(maxgio92) Trying to load the CO-RE oom-kill probe")
 	err = ebpf.LoadCOREAsset("oom-kill.o", func(buf bytecode.AssetReader, opts manager.Options) error {
 		probe, err = startOOMKillProbe(buf, opts)
 		return err
diff --git a/pkg/ebpf/bytecode/asset_reader_bindata.go b/pkg/ebpf/bytecode/asset_reader_bindata.go
index 5a3996db5d..a506fbd89d 100644
--- a/pkg/ebpf/bytecode/asset_reader_bindata.go
+++ b/pkg/ebpf/bytecode/asset_reader_bindata.go
@@ -10,8 +10,12 @@ package bytecode
 import (
 	"bytes"
 	"embed"
+	"fmt"
 	"io"
+	"io/fs"
 	"path"
+
+	"github.com/DataDog/datadog-agent/pkg/util/log"
 )
 
 // Note that these files are placed in the build directory by the tasks/system_probe.py:copy_bundled_ebpf_files
@@ -29,6 +33,16 @@ func GetReader(dir, name string) (AssetReader, error) {
 	dir = "build"
 	assetPath := path.Join(dir, name)
 
+	log.Info("(maxgio92) The ebpf_bindata embed.FS content is printed below.")
+	fs.WalkDir(bindata, ".", func(path string, d fs.DirEntry, err error) error {
+		if err != nil {
+			return err
+		}
+		fmt.Println(path)
+		return nil
+	})
+	log.Infof("(maxgio92)  Trying to read %s (filename: %s, dir: %s).", assetPath, name, dir)
+
 	content, err := bindata.ReadFile(assetPath)
 	if err != nil {
 		return nil, err
diff --git a/pkg/ebpf/bytecode/asset_reader_nobindata.go b/pkg/ebpf/bytecode/asset_reader_nobindata.go
index cea9d9b8c1..c1dbf773ba 100644
--- a/pkg/ebpf/bytecode/asset_reader_nobindata.go
+++ b/pkg/ebpf/bytecode/asset_reader_nobindata.go
@@ -9,13 +9,27 @@ package bytecode
 
 import (
 	"fmt"
+	"io/fs"
 	"os"
 	"path"
+
+	"github.com/DataDog/datadog-agent/pkg/util/log"
 )
 
 // GetReader returns a new AssetReader for the specified file asset
 func GetReader(dir, name string) (AssetReader, error) {
 	assetPath := path.Join(dir, path.Base(name))
+
+	log.Infof("(maxgio92) The %s dir content is printed below\n", dir)
+	fs.WalkDir(os.DirFS(dir), ".", func(path string, d fs.DirEntry, err error) error {
+		if err != nil {
+			return err
+		}
+		fmt.Println(path)
+		return nil
+	})
+	log.Infof("(maxgio92) Trying to read %s (filename: %s, dir: %s).", assetPath, name, dir)
+
 	err := VerifyAssetPermissions(assetPath)
 	if err != nil {
 		return nil, err
diff --git a/pkg/ebpf/co_re.go b/pkg/ebpf/co_re.go
index d651cfd504..bdfe2225e8 100644
--- a/pkg/ebpf/co_re.go
+++ b/pkg/ebpf/co_re.go
@@ -19,6 +19,7 @@ import (
 	"github.com/DataDog/datadog-agent/pkg/ebpf/bytecode"
 	"github.com/DataDog/datadog-agent/pkg/telemetry"
 	"github.com/DataDog/datadog-agent/pkg/util/kernel"
+	"github.com/DataDog/datadog-agent/pkg/util/log"
 )
 
 type coreAssetLoader struct {
@@ -68,6 +69,7 @@ func (c *coreAssetLoader) loadCOREAsset(filename string, startFn func(bytecode.A
 		return fmt.Errorf("no BTF data")
 	}
 
+	log.Infof("(maxgio92) trying to bytecode.GetReader for c.coreDir %s and filename %s", c.coreDir, filename)
 	buf, err := bytecode.GetReader(c.coreDir, filename)
 	if err != nil {
 		result = AssetReadError
