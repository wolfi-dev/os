Patch out embedded Python discovery, as we want the system Python to be
used.

This was previously a revert of commit
f631ce2b49f34fff1811e2eb090c6d27a08412ed, but upstream refactoring means
that no longer cleanly applies.
---

diff --git a/pkg/collector/python/init.go b/pkg/collector/python/init.go
index 229a0b92..983ebbe3 100644
--- a/pkg/collector/python/init.go
+++ b/pkg/collector/python/init.go
@@ -293,35 +293,6 @@ func pathToBinary(name string, ignoreErrors bool) (string, error) {
 }
 
 func resolvePythonHome() {
-	// Allow to relatively import python
-	_here, err := executable.Folder()
-	if err != nil {
-		log.Warnf("Error getting executable folder: %v", err)
-		log.Warnf("Trying again allowing symlink resolution to fail")
-		_here, err = executable.FolderAllowSymlinkFailure()
-		if err != nil {
-			log.Warnf("Error getting executable folder w/o symlinks: %v", err)
-		}
-	}
-	log.Debugf("Executable folder is %v", _here)
-
-	var embeddedPythonHome3 string
-	if runtime.GOOS == "windows" {
-		embeddedPythonHome3 = filepath.Join(_here, "..", "embedded3")
-	} else { // Both macOS and Linux have the same relative paths
-		embeddedPythonHome3 = filepath.Join(_here, "../..", "embedded")
-	}
-
-	// We want to use the path-relative embedded2/3 directories above by default.
-	// They will be correct for normal installation on Windows. However, if they
-	// are not present for cases like running unit tests, fall back to the compile
-	// time values.
-	if _, err := os.Stat(embeddedPythonHome3); os.IsNotExist(err) {
-		log.Warnf("Relative embedded directory not found for Python 3. Using default: %s", pythonHome3)
-	} else {
-		pythonHome3 = embeddedPythonHome3
-	}
-
 	PythonHome = pythonHome3
 
 	log.Infof("Using '%s' as Python home", PythonHome)
