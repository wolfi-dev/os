From c0eb789c2d2d9f0090e767d7b3502bac18e41668 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C5=81ukasz=20=27sil2100=27=20Zemczak?=
 <lukasz.zemczak@chainguard.dev>
Date: Mon, 17 Feb 2025 12:37:45 +0100
Subject: [PATCH] Revert "Import python relatively instead of using the build
 time pythonHome variable (#31426)"

This reverts commit f631ce2b49f34fff1811e2eb090c6d27a08412ed.
---
 pkg/collector/python/init.go | 47 +++++++++++++++++-------------------
 1 file changed, 22 insertions(+), 25 deletions(-)

diff --git a/pkg/collector/python/init.go b/pkg/collector/python/init.go
index 6f83ae8f92..f45f915fac 100644
--- a/pkg/collector/python/init.go
+++ b/pkg/collector/python/init.go
@@ -291,33 +291,30 @@ func pathToBinary(name string, ignoreErrors bool) (string, error) {
 }
 
 func resolvePythonExecPath(ignoreErrors bool) (string, error) {
-	// Allow to relatively import python
-	_here, err := executable.Folder()
-	if err != nil {
-		log.Warnf("Error getting executable folder: %v", err)
-		log.Warnf("Trying again allowing symlink resolution to fail")
-		_here, err = executable.FolderAllowSymlinkFailure()
+	// Since the install location can be set by the user on Windows we use relative import
+	if runtime.GOOS == "windows" {
+		_here, err := executable.Folder()
 		if err != nil {
-			log.Warnf("Error getting executable folder w/o symlinks: %v", err)
+			log.Warnf("Error getting executable folder: %v", err)
+			log.Warnf("Trying again allowing symlink resolution to fail")
+			_here, err = executable.FolderAllowSymlinkFailure()
+			if err != nil {
+				log.Warnf("Error getting executable folder w/o symlinks: %v", err)
+			}
+		}
+		log.Debugf("Executable folder is %v", _here)
+
+		embeddedPythonHome3 := filepath.Join(_here, "..", "embedded3")
+
+		// We want to use the path-relative embedded2/3 directories above by default.
+		// They will be correct for normal installation on Windows. However, if they
+		// are not present for cases like running unit tests, fall back to the compile
+		// time values.
+		if _, err := os.Stat(embeddedPythonHome3); os.IsNotExist(err) {
+			log.Warnf("Relative embedded directory not found for Python 3. Using default: %s", pythonHome3)
+		} else {
+			pythonHome3 = embeddedPythonHome3
 		}
-	}
-	log.Debugf("Executable folder is %v", _here)
-
-	var embeddedPythonHome3 string
-	if runtime.GOOS == "windows" {
-		embeddedPythonHome3 = filepath.Join(_here, "..", "embedded3")
-	} else { // Both macOS and Linux have the same relative paths
-		embeddedPythonHome3 = filepath.Join(_here, "../..", "embedded")
-	}
-
-	// We want to use the path-relative embedded2/3 directories above by default.
-	// They will be correct for normal installation on Windows. However, if they
-	// are not present for cases like running unit tests, fall back to the compile
-	// time values.
-	if _, err := os.Stat(embeddedPythonHome3); os.IsNotExist(err) {
-		log.Warnf("Relative embedded directory not found for Python 3. Using default: %s", pythonHome3)
-	} else {
-		pythonHome3 = embeddedPythonHome3
 	}
 
 	PythonHome = pythonHome3