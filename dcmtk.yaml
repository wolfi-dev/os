package:
  name: dcmtk
  version: "3.6.9"
  epoch: 1
  description: "DCMTK is a collection of libraries and applications implementing large parts the DICOM standard."
  copyright:
    - license: "MIT"

environment:
  contents:
    packages:
      - build-base
      - libjpeg-turbo-dev
      - libpng-dev
      - libxml2-dev
      - openssl-dev
      - tiff-dev
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/DCMTK/dcmtk
      tag: DCMTK-${{package.version}}
      expected-commit: ac002900cab167509881e5b837cdef5dcb07cd37

  - uses: cmake/configure
    with:
      opts: |
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DBUILD_SHARED_LIBS=ON \
        -DDCMTK_WITH_PNG=ON \
        -DDCMTK_WITH_TIFF=ON \
        -DDCMTK_WITH_XML=ON \
        -DDCMTK_WITH_ZLIB=ON

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    description: Development files for DCMTK
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - dcmtk
    test:
      pipeline:
        - uses: test/tw/ldd-check

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-dev
        - gcc
  pipeline:
    - uses: test/tw/ldd-check
    - name: Test basic DICOM functionality
      runs: |
        cat > /tmp/test_dcmtk.cpp << 'EOF'
        #include <dcmtk/dcmdata/dctk.h>
        #include <dcmtk/dcmdata/dcfilefo.h>
        #include <iostream>

        int main() {
            // Test basic DCMTK initialization
            DcmFileFormat fileformat;
            DcmDataset *dataset = fileformat.getDataset();

            if (!dataset) {
                std::cerr << "Failed to create DCMTK dataset" << std::endl;
                return 1;
            }

            // Test adding a basic DICOM element
            OFCondition status = dataset->putAndInsertString(DCM_PatientName, "Test^Patient");
            if (status.bad()) {
                std::cerr << "Failed to add DICOM element: " << status.text() << std::endl;
                return 1;
            }

            // Test reading the element back
            OFString patientName;
            status = dataset->findAndGetOFString(DCM_PatientName, patientName);
            if (status.bad()) {
                std::cerr << "Failed to read DICOM element: " << status.text() << std::endl;
                return 1;
            }

            if (patientName != "Test^Patient") {
                std::cerr << "Expected 'Test^Patient', got '" << patientName << "'" << std::endl;
                return 1;
            }

            std::cout << "DCMTK basic functionality test passed!" << std::endl;
            std::cout << "Patient name: " << patientName << std::endl;

            return 0;
        }
        EOF

        # Compile and run the test
        g++ -o /tmp/test_dcmtk /tmp/test_dcmtk.cpp \
            -I/usr/include/dcmtk \
            -ldcmdata -lofstd -loflog \
            -lpthread

        /tmp/test_dcmtk
        echo "DCMTK C++ functionality test completed successfully!"

update:
  enabled: true
  ignore-regex-patterns:
    - "_[0-9]{8}$"
  github:
    identifier: DCMTK/dcmtk
    use-tag: true
    strip-prefix: DCMTK-
    tag-filter-prefix: DCMTK-
