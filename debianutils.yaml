package:
  name: debianutils
  version: 5.23.2
  epoch: 0
  description: Miscellaneous utilities specific to Debian
  copyright:
    - license: GPL-2.0-or-later
    - license: SMAIL-GPL
  dependencies:
    replaces:
      - busybox

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - coreutils

pipeline:
  - uses: git-checkout
    with:
      repository: https://salsa.debian.org/debian/debianutils.git
      tag: debian/${{package.version}}
      expected-commit: b999bb0969471d302f1db85e58f17dcb64f274c2

  - uses: autoconf/configure

  - runs: |
      # Build only the C programs, skip po4a translations
      make run-parts tempfile ischroot

  - runs: |
      # Install manually to avoid make install tripping on .po generation
      install -d ${{targets.destdir}}/usr/bin
      install -m755 run-parts ${{targets.destdir}}/usr/bin/
      install -m755 tempfile ${{targets.destdir}}/usr/bin/
      install -m755 ischroot ${{targets.destdir}}/usr/bin/
      install -m755 which.debianutils ${{targets.destdir}}/usr/bin/which
      install -m755 savelog ${{targets.destdir}}/usr/bin/
      install -m755 installkernel ${{targets.destdir}}/usr/bin/
      install -m755 add-shell ${{targets.destdir}}/usr/bin/
      install -m755 remove-shell ${{targets.destdir}}/usr/bin/
      install -m755 update-shells ${{targets.destdir}}/usr/bin/
      # Copy license info in to cover which.debianutils and savelog
      install -d ${{targets.destdir}}/usr/share/doc/debianutils
      install -m644 debian/copyright ${{targets.destdir}}/usr/share/doc/debianutils/

  - uses: strip

test:
  environment:
    contents:
      packages:
        - coreutils
  pipeline:
    # TODO: add ischroot test back once arm64 CI is on qemu
    - runs: |
        set -euo pipefail

        # Test run-parts
        run-parts --version

        # Test tempfile
        tempfile --version

        # Test ischroot
        ischroot --version

        # Test which (no --version flag)
        which echo

        # Test shell management scripts exist
        stat /usr/bin/add-shell
        stat /usr/bin/remove-shell
        stat /usr/bin/update-shells
        stat /usr/bin/installkernel
        stat /usr/bin/savelog
    - runs: |
        set -euo pipefail

        # Create test directory with executable scripts
        mkdir -p /tmp/test-scripts

        # Create executable script that should run
        cat > /tmp/test-scripts/10-test << 'EOF'
        #!/bin/sh
        echo "script-10-executed"
        EOF
        chmod +x /tmp/test-scripts/10-test

        # Create non-executable file that should be skipped
        cat > /tmp/test-scripts/20-skip << 'EOF'
        #!/bin/sh
        echo "should-not-run"
        EOF
        chmod 644 /tmp/test-scripts/20-skip

        # Create executable script with invalid name that should be skipped
        cat > /tmp/test-scripts/bad.name.script << 'EOF'
        #!/bin/sh
        echo "bad-name-should-not-run"
        EOF
        chmod +x /tmp/test-scripts/bad.name.script

        # Test basic functionality
        OUTPUT=$(run-parts /tmp/test-scripts)
        echo "$OUTPUT" | grep -q "script-10-executed"

        # Test --test mode (should list what would run)
        TEST_OUTPUT=$(run-parts --test /tmp/test-scripts)
        echo "$TEST_OUTPUT" | grep -q "/tmp/test-scripts/10-test"

        # Verify non-executable and invalid names are skipped
        if echo "$OUTPUT" | grep -q "should-not-run\|bad-name-should-not-run"; then
          echo "run-parts executed files it should have skipped"
          exit 1
        fi

        echo "run-parts test passed"
    - runs: |
        set -euo pipefail

        # Test tempfile creates unique files
        TEMP1=$(tempfile)
        TEMP2=$(tempfile)
        if [ $TEMP1 = $TEMP2 ]; then
          echo "tempfiles are not unique"
          exit 1
        fi

        # Test custom prefix and suffix
        TEMP3=$(tempfile --prefix=test --suffix=.tmp)
        echo "$TEMP3" | grep -q "test.*\.tmp"
    - runs: |
        set -euo pipefail

        # Test which finds commands
        RESULT=$(which sh)
        stat "$RESULT"

        # Test non-existent command
        if which nonexistent-command-xyz; then
          echo "which should have failed for non-existent command"
          exit 1
        fi
    - runs: |
        set -euo pipefail

        # Create test log file
        echo "test log content" > /tmp/test.log

        # Test savelog rotation
        savelog /tmp/test.log
        stat /tmp/test.log.0
        test ! -f /tmp/test.log
    - runs: |
        set -euo pipefail

        # Test add-shell
        add-shell /usr/bin/testshell
        grep -q "/usr/bin/testshell" /etc/shells

        # Test remove-shell
        remove-shell /usr/bin/testshell
        if grep -q "/usr/bin/testshell" /etc/shells; then
          echo "remove-shell failed to remove shell"
          exit 1
        fi

        # Test update-shells functionality
        update-shells

update:
  enabled: true
  git:
    strip-prefix: debian/
  ignore-regex-patterns:
    - .*\.git$ # Ignore .git tags like 5.23.2.git
