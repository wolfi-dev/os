package:
  name: dotnet-6
  version: 6.0.136
  epoch: 1
  description: ".NET SDK, version 6"
  copyright:
    - license: MIT
  resources:
    cpu: 2
    memory: 32Gi
  dependencies:
    runtime:
      - icu
    provides:
      - dotnet=${{package.version}}

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-15
      - clang-15-default
      - cmake
      - curl
      - glibc-locale-en
      - icu-dev
      - krb5-dev
      - libunwind-dev
      - llvm15
      - llvm15-cmake-default
      - llvm15-dev
      - llvm15-tools
      - lttng-ust-dev
      - ncurses-dev
      - openssl-dev
      - python3
      - samurai
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/dotnet/installer
      tag: v${{package.version}}
      expected-commit: d638663530d923adbe0442604b7a6562127321e9
      destination: /home/build/installer

  - working-directory: /home/build/installer
    runs: |
      ./build.sh /p:ArcadeBuildTarball=true /p:TarballDir=/home/build/src

  - working-directory: /home/build/src
    environment:
      # Build NuGet packages in RTM mode.
      BuildRTM: true
      # Prevents prerelease dependency errors.
      NoWarn: NU5104
    pipeline:
      - runs: |
          sed -i -E 's|( /p:BuildDebPackage=false)|\1 /p:EnablePackageValidation=false|' src/runtime/eng/SourceBuild.props
          sed -i -E 's|( /p:BuildDebPackage=false)|\1 --cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE|' src/runtime/eng/SourceBuild.props
          ./prep.sh --bootstrap
      - assertions:
          required-steps: 1
        pipeline:
          - if: ${{build.arch}} == 'aarch64'
            runs: |
              ./build.sh --online --clean-while-building \
                -- \
                /v:n \
                /p:ContinueOnPrebuiltBaselineError=true \
                /p:MinimalConsoleLogOutput=false \
                /p:PrebuiltPackagesPath=/home/build/src/packages \
                /p:SkipPortableRuntimeBuild=true \
                /p:TargetRid=linux-arm64
          - if: ${{build.arch}} == 'x86_64'
            runs: |
              ./build.sh --online --clean-while-building \
                -- \
                /v:n \
                /p:ContinueOnPrebuiltBaselineError=true \
                /p:MinimalConsoleLogOutput=false \
                /p:PrebuiltPackagesPath=/home/build/src/packages \
                /p:SkipPortableRuntimeBuild=true \
                /p:TargetRid=linux-x64
      - runs: |
          mkdir -p "${{targets.destdir}}"/usr/share/dotnet
          mkdir -p "${{targets.destdir}}"/usr/bin
      - assertions:
          required-steps: 1
        pipeline:
          - if: ${{build.arch}} == 'aarch64'
            runs: |
              tar zxf artifacts/arm64/Release/dotnet-sdk-*.tar.gz -C "${{targets.destdir}}"/usr/share/dotnet
          - if: ${{build.arch}} == 'x86_64'
            runs: |
              tar zxf artifacts/x64/Release/dotnet-sdk-*.tar.gz -C "${{targets.destdir}}"/usr/share/dotnet
      - runs: |
          ln -s /usr/share/dotnet/dotnet "${{targets.destdir}}"/usr/bin/dotnet

  - uses: strip

subpackages:
  - name: dotnet-6-runtime
    description: "The .NET Core Runtime, version 6"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/dotnet/shared
          mv "${{targets.destdir}}"/usr/share/dotnet/shared/Microsoft.NETCore.App "${{targets.subpkgdir}}"/usr/share/dotnet/shared/
    dependencies:
      runtime:
        - dotnet-6

  - name: dotnet-6-runtime-default
    dependencies:
      runtime:
        - dotnet-6-runtime
      provides:
        - dotnet-runtime=6

  - name: aspnet-6-runtime
    description: "The ASP.NET Core Runtime, version 6"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/dotnet/shared
          mv "${{targets.destdir}}"/usr/share/dotnet/shared/Microsoft.AspNetCore.App "${{targets.subpkgdir}}"/usr/share/dotnet/shared/
    dependencies:
      runtime:
        - dotnet-6-runtime

  - name: aspnet-6-runtime-default
    dependencies:
      runtime:
        - aspnet-6-runtime
      provides:
        - aspnet-runtime=6

  - name: dotnet-6-targeting-pack
    description: "The .NET Core targeting pack, version 6"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/dotnet/packs
          mv "${{targets.destdir}}"/usr/share/dotnet/packs/NETStandard.Library.* "${{targets.subpkgdir}}"/usr/share/dotnet/packs/
          mv "${{targets.destdir}}"/usr/share/dotnet/packs/Microsoft.NETCore.App.* "${{targets.subpkgdir}}"/usr/share/dotnet/packs/

  - name: aspnet-6-targeting-pack
    description: "The ASP.NET targeting pack, version 6"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/dotnet/packs
          mv "${{targets.destdir}}"/usr/share/dotnet/packs/Microsoft.AspNetCore.App.* "${{targets.subpkgdir}}"/usr/share/dotnet/packs/
    dependencies:
      runtime:
        - dotnet-6-targeting-pack

  - name: dotnet-6-sdk
    description: "The .NET Core SDK, version 6"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/dotnet

          for i in sdk sdk-manifests templates; do
            mv "${{targets.destdir}}"/usr/share/dotnet/$i "${{targets.subpkgdir}}"/usr/share/dotnet/
          done
    dependencies:
      runtime:
        - dotnet-6-runtime
        - aspnet-6-runtime
        - dotnet-6-targeting-pack
        - aspnet-6-targeting-pack

  - name: dotnet-6-sdk-default
    dependencies:
      runtime:
        - dotnet-6-sdk
        - dotnet-6-runtime-default
        - aspnet-6-runtime-default
      provides:
        - dotnet-sdk=6

update:
  enabled: true
  github:
    identifier: dotnet/installer
    strip-prefix: v
    use-tag: true
    tag-filter: "v6.0.1" # We specifically the 6.0.1xx releases since those are intended for prod.
  ignore-regex-patterns:
    - '-servicing'
    - '-preview'

test:
  environment:
    contents:
      packages:
        - dotnet-6-sdk
  pipeline:
    - name: Basic .NET command test
      runs: |
        dotnet --info
    - name: Compile and run a simple .NET application
      runs: |
        cat <<'EOF' > HelloWorld.cs
        using System;

        class Program
        {
            static void Main()
            {
                Console.WriteLine("Hello, World!");
            }
        }
        EOF
        dotnet new console -o HelloWorldApp --force
        mv HelloWorld.cs HelloWorldApp/Program.cs
        dotnet run --project HelloWorldApp
    - name: Compile and run a .NET application with arguments
      runs: |
        cat <<'EOF' > ArgumentEcho.cs
        using System;

        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Arguments: " + String.Join(", ", args));
            }
        }
        EOF
        dotnet new console -o ArgumentEchoApp --force
        mv ArgumentEcho.cs ArgumentEchoApp/Program.cs
        dotnet run --project ArgumentEchoApp -- arg1 arg2 arg3
    - uses: test/tw/ldd-check
