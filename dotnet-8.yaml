package:
  name: dotnet-8
  version: "8.0.121"
  epoch: 1
  description: ".NET ${{vars.major-version}} host"
  copyright:
    - license: MIT
  resources:
    cpu: 32
    memory: 64Gi
  dependencies:
    runtime:
      - icu
    provides:
      - dotnet=${{package.full-version}}

vars:
  # This is the major.minor version of the .NET Standard
  # targeting pack. We validate this version is correct
  # below, but as the version progresses, this will need
  # to be manually bumped.
  netstandard-version: '2.1'

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+)\.\d+\.\d+$
    replace: "$1"
    to: major-version

environment:
  environment:
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
  contents:
    packages:
      - bash
      - brotli-dev
      - busybox
      - clang-20
      - cmake
      - curl
      - dotnet-bootstrap-${{vars.major-version}}
      - glibc-locale-en
      - icu-dev
      - krb5-dev
      - libunwind-dev
      - lttng-ust-dev
      - make
      - openssl-dev
      - python3
      - rapidjson-dev
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/dotnet/dotnet
      tag: v${{package.version}}
      expected-commit: eed318ae2d2a3b35d344b9ec73c361265a938310

  - runs: |
      sed -i -E 's|( /p:BuildDebPackage=false)|\1 /p:EnablePackageValidation=false|' src/runtime/eng/SourceBuild.props
      sed -i -E 's|( /p:BuildDebPackage=false)|\1 --cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE|' src/runtime/eng/SourceBuild.props

      if [ ${{build.arch}} = "aarch64" ]; then
        # Dotnet does not have support for PAC/BTI which Axion uses
        # See: https://github.com/dotnet/runtime/pull/110472
        # EXTRA_${FLAG} is supposed to work, but it doesn't
        # so directly override the values which is supposedly a no-no
        # See also: https://github.com/dotnet/runtime/issues/61859
        export CFLAGS="-mbranch-protection=none"
        export CXXFLAGS="-mbranch-protection=none"
      fi

      # Setup bootstrap .NET SDK
      mkdir -p prereqs/packages/archive
      ln -sf /usr/share/dotnet-bootstrap/dotnet .dotnet
      ln -sf /usr/share/dotnet-bootstrap/Private.SourceBuilt.Artifacts.Bootstrap.tar.gz \
        prereqs/packages/archive/Private.SourceBuilt.Artifacts.Bootstrap.tar.gz

      # Extract .NET bootstrap archive
      mkdir -p prereqs/packages/previously-source-built
      tar -xzvf prereqs/packages/archive/Private.SourceBuilt.Artifacts.Bootstrap.tar.gz \
        -C prereqs/packages/previously-source-built/

      # Build .NET SDK
      ./build.sh --clean-while-building -- \
        /v:n \
        /p:ContinueOnPrebuiltBaselineError=true \
        /p:MinimalConsoleLogOutput=false \
        /p:SkipPortableRuntimeBuild=true \
        /p:BuildWithOnlineSources=false \
        /p:CustomPrebuiltSourceBuiltPackagesPath=$(realpath prereqs/packages/previously-source-built)

      # Install .NET
      mkdir -p ${{targets.contextdir}}/usr/share/dotnet
      tar zxf artifacts/*/Release/dotnet-sdk-*.tar.gz -C ${{targets.contextdir}}/usr/share/dotnet

      # Symlink .NET host to path
      mkdir -p ${{targets.contextdir}}/usr/bin
      ln -s /usr/share/dotnet/dotnet ${{targets.contextdir}}/usr/bin/dotnet

  - uses: strip

subpackages:
  - name: dotnet-${{vars.major-version}}-sdk
    description: ".NET ${{vars.major-version}} SDK"
    dependencies:
      runtime:
        - aspnet-${{vars.major-version}}-runtime=${{package.full-version}}
        - aspnet-${{vars.major-version}}-targeting-pack=${{package.full-version}}
        - dotnet-${{vars.major-version}}-runtime=${{package.full-version}}
        - dotnet-${{vars.major-version}}-targeting-pack=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet
          for i in sdk sdk-manifests templates; do
            mv ${{targets.destdir}}/usr/share/dotnet/$i \
               ${{targets.contextdir}}/usr/share/dotnet/
          done
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - runs: dotnet tool install -g Microsoft.Web.LibraryManager.Cli

  - name: dotnet-${{vars.major-version}}-runtime
    description: "The .NET ${{vars.major-version}} Core Runtime"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet/shared
          mv ${{targets.destdir}}/usr/share/dotnet/shared/Microsoft.NETCore.App ${{targets.contextdir}}/usr/share/dotnet/shared/
    dependencies:
      provides:
        - dotnet-runtime=${{package.full-version}}
      runtime:
        - dotnet
    test:
      pipeline:
        - uses: test/tw/ldd-check

  - name: aspnet-${{vars.major-version}}-runtime
    description: "The ASP.NET ${{vars.major-version}} Core Runtime"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet/shared
          mv ${{targets.destdir}}/usr/share/dotnet/shared/Microsoft.AspNetCore.App ${{targets.contextdir}}/usr/share/dotnet/shared/
    dependencies:
      provides:
        - aspnet-runtime=${{package.full-version}}
      runtime:
        - dotnet-${{vars.major-version}}-runtime=${{package.full-version}}
        - libexpat1
        - libbrotlidec1
    test:
      pipeline:
        - uses: test/virtualpackage
          with:
            virtual-pkg-name: aspnet-runtime
            real-pkg-name: ${{subpkg.name}}

  # We separate the .NET Standard targeting pack to allow for
  # co-installation of .NET versions. Different .NET versions
  # may depend on the same version of this targeting pack.
  - name: netstandard-${{vars.major-version}}-targeting-pack
    description: "The .NET ${{vars.major-version}} Standard targeting pack"
    dependencies:
      provides:
        - netstandard-targeting-pack-${{vars.netstandard-version}}=${{package.full-version}}
    pipeline:
      - runs: |
          # This is just the .NET Standard major minor version we specify above
          expected_version="${{vars.netstandard-version}}"

          # We retrieve the full .NET Standard version by listing the contents of
          # the directory that contains the .NET Standard targeting pack
          full_version="$(ls ${{targets.destdir}}/usr/share/dotnet/packs/NETStandard.Library.Ref/)"

          # And we manipulate the full version to derive the major minor version
          found_version="${full_version%.*}"

          if [ $expected_version != $found_version ]; then
            echo ".NET Standard expected version does not match found version!"
            echo "Expected: $expected_version"
            echo "Found: $found_version"
            echo "Please update the .NET Standard targeting pack version."
            exit 1
          fi

          # Install .NET Standard targeting pack
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet
          mv ${{targets.destdir}}/usr/share/dotnet/packs/NETStandard.Library.* \
             ${{targets.contextdir}}/usr/share/dotnet/packs/

  - name: dotnet-${{vars.major-version}}-targeting-pack
    description: "The .NET ${{vars.major-version}} Core targeting pack"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet/packs
          mv ${{targets.destdir}}/usr/share/dotnet/packs/Microsoft.NETCore.App.* ${{targets.contextdir}}/usr/share/dotnet/packs/
    dependencies:
      provides:
        - dotnet-targeting-pack=${{package.full-version}}
      runtime:
        - netstandard-targeting-pack-${{vars.netstandard-version}}
    test:
      pipeline:
        - uses: test/virtualpackage
          with:
            virtual-pkg-name: dotnet-targeting-pack
            real-pkg-name: ${{subpkg.name}}

  - name: aspnet-${{vars.major-version}}-targeting-pack
    description: "The ASP.NET ${{vars.major-version}} targeting pack"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/share/dotnet/packs
          mv ${{targets.destdir}}/usr/share/dotnet/packs/Microsoft.AspNetCore.App.* ${{targets.contextdir}}/usr/share/dotnet/packs/
    dependencies:
      provides:
        - aspnet-targeting-pack=${{package.full-version}}
      runtime:
        - dotnet-${{vars.major-version}}-targeting-pack=${{package.full-version}}
    test:
      pipeline:
        - uses: test/virtualpackage
          with:
            virtual-pkg-name: aspnet-targeting-pack
            real-pkg-name: ${{subpkg.name}}

update:
  enabled: true
  github:
    identifier: dotnet/dotnet
    strip-prefix: v
    tag-filter: "v8"

test:
  environment:
    contents:
      packages:
        - dotnet-${{vars.major-version}}-sdk=${{package.full-version}}
  pipeline:
    - name: Basic .NET command test
      runs: |
        dotnet --info
    - name: Compile and run a simple .NET application
      runs: |
        cat <<'EOF' > HelloWorld.cs
        using System;

        class Program
        {
            static void Main()
            {
                Console.WriteLine("Hello, World!");
            }
        }
        EOF
        dotnet new console -o HelloWorldApp --force
        mv HelloWorld.cs HelloWorldApp/Program.cs
        dotnet run --project HelloWorldApp
    - name: Compile and run a .NET application with arguments
      runs: |
        cat <<'EOF' > ArgumentEcho.cs
        using System;

        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Arguments: " + String.Join(", ", args));
            }
        }
        EOF
        dotnet new console -o ArgumentEchoApp --force
        mv ArgumentEcho.cs ArgumentEchoApp/Program.cs
        dotnet run --project ArgumentEchoApp -- arg1 arg2 arg3
    - uses: test/tw/ldd-check
