From 525d71d7a8fb1b42e96dd4992b3866951d68ff9a Mon Sep 17 00:00:00 2001
From: James Page <james.page@chainguard.dev>
Date: Fri, 15 Aug 2025 12:19:56 +0100
Subject: [PATCH] Allow MD5 if ALLOW_MD5 environment variable is set

Add support for loading the default OpenSSL provider when the ALLOW_MD5
environment variable is set to "1" or "true". This enables MD5 hash
operations in environments where the default provider may not be loaded
by default.

Changes:
- Add OSSL_PROVIDER_available to function pointer system
- Implement CryptoNative_LoadDefaultProvider and CryptoNative_UnloadProvider
- Modify EnsureFetchEvpMdAlgorithms to check ALLOW_MD5 environment variable
- Add cleanup function for proper provider management
---
 .../openssl.c                                 | 31 +++++++++++++++++++
 .../openssl.h                                 |  4 +++
 .../opensslshim.h                             |  2 ++
 .../osslcompat_30.h                           |  1 +
 .../pal_evp.c                                 | 20 ++++++++++++
 .../pal_evp.h                                 |  9 ++++++
 6 files changed, 67 insertions(+)

diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.c b/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.c
index 32ad26dd8bb..9a27e7c0809 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.c
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.c
@@ -1320,6 +1320,37 @@ void CryptoNative_RegisterLegacyAlgorithms(void)
 #endif
 }
 
+void* CryptoNative_LoadDefaultProvider(void)
+{
+#ifdef NEED_OPENSSL_3_0
+    if (!API_EXISTS(OSSL_PROVIDER_available) || !API_EXISTS(OSSL_PROVIDER_load))
+    {
+        return NULL;
+    }
+
+    if (!OSSL_PROVIDER_available(NULL, "default"))
+    {
+        return NULL;
+    }
+
+    OSSL_PROVIDER* prov = OSSL_PROVIDER_load(NULL, "default");
+    return (void*)prov;
+#else
+    return NULL;
+#endif
+}
+
+void CryptoNative_UnloadProvider(void* provider)
+{
+#ifdef NEED_OPENSSL_3_0
+    if (provider != NULL && API_EXISTS(OSSL_PROVIDER_unload))
+    {
+        OSSL_PROVIDER_unload((OSSL_PROVIDER*)provider);
+    }
+#endif
+    (void)provider;
+}
+
 #ifdef NEED_OPENSSL_1_0
 // Lock used to make sure EnsureopenSslInitialized itself is thread safe
 static pthread_mutex_t g_initLock = PTHREAD_MUTEX_INITIALIZER;
diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.h b/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.h
index 10ed8480e47..3c16f9f8f7b 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.h
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/openssl.h
@@ -76,3 +76,7 @@ PALEXPORT int64_t CryptoNative_OpenSslVersionNumber(void);
 PALEXPORT void CryptoNative_RegisterLegacyAlgorithms(void);
 
 PALEXPORT int32_t CryptoNative_OpenSslAvailable(void);
+
+PALEXPORT void* CryptoNative_LoadDefaultProvider(void);
+
+PALEXPORT void CryptoNative_UnloadProvider(void* provider);
diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/opensslshim.h b/src/runtime/src/native/libs/System.Security.Cryptography.Native/opensslshim.h
index 7dd78a5edfd..fb19a0a0587 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/opensslshim.h
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/opensslshim.h
@@ -558,6 +558,7 @@ extern bool g_libSslUses32BitTime;
     FALLBACK_FUNCTION(OpenSSL_version_num) \
     LIGHTUP_FUNCTION(OSSL_LIB_CTX_free) \
     LIGHTUP_FUNCTION(OSSL_LIB_CTX_new) \
+    LIGHTUP_FUNCTION(OSSL_PROVIDER_available) \
     LIGHTUP_FUNCTION(OSSL_PROVIDER_load) \
     LIGHTUP_FUNCTION(OSSL_PROVIDER_try_load) \
     LIGHTUP_FUNCTION(OSSL_PROVIDER_unload) \
@@ -1113,6 +1114,7 @@ extern TYPEOF(OPENSSL_gmtime)* OPENSSL_gmtime_ptr;
 #define OpenSSL_version_num OpenSSL_version_num_ptr
 #define OSSL_LIB_CTX_free OSSL_LIB_CTX_free_ptr
 #define OSSL_LIB_CTX_new OSSL_LIB_CTX_new_ptr
+#define OSSL_PROVIDER_available OSSL_PROVIDER_available_ptr
 #define OSSL_PROVIDER_load OSSL_PROVIDER_load_ptr
 #define OSSL_PROVIDER_try_load OSSL_PROVIDER_try_load_ptr
 #define OSSL_PROVIDER_unload OSSL_PROVIDER_unload_ptr
diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/osslcompat_30.h b/src/runtime/src/native/libs/System.Security.Cryptography.Native/osslcompat_30.h
index 1609afd2a00..2e9ea61e8b6 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/osslcompat_30.h
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/osslcompat_30.h
@@ -84,6 +84,7 @@ OSSL_PARAM OSSL_PARAM_construct_utf8_string(const char *key, char *buf, size_t b
 
 void OSSL_LIB_CTX_free(OSSL_LIB_CTX*);
 OSSL_LIB_CTX* OSSL_LIB_CTX_new(void);
+int OSSL_PROVIDER_available(OSSL_LIB_CTX*, const char* name);
 OSSL_PROVIDER* OSSL_PROVIDER_load(OSSL_LIB_CTX*, const char* name);
 OSSL_PROVIDER* OSSL_PROVIDER_try_load(OSSL_LIB_CTX*, const char* name, int retain_fallbacks);
 int OSSL_PROVIDER_unload(OSSL_PROVIDER* prov);
diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.c b/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.c
index 1fcb0fc0058..5dbc44664ff 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.c
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.c
@@ -7,16 +7,27 @@
 
 #include <assert.h>
 #include <pthread.h>
+#include <stdlib.h>
+#include <string.h>
+#include <strings.h>
 
 #define SUCCESS 1
 
 static const EVP_MD* g_evpFetchMd5 = NULL;
 static pthread_once_t g_evpFetch = PTHREAD_ONCE_INIT;
+static void* g_defaultProvider = NULL;
 
 static void EnsureFetchEvpMdAlgorithms(void)
 {
     // This is called from a pthread_once - this method should not be called directly.
 
+    // Check if ALLOW_MD5 environment variable is set and load default provider if needed
+    const char* allowMd5 = getenv("ALLOW_MD5");
+    if (allowMd5 != NULL && (strcmp(allowMd5, "1") == 0 || strcasecmp(allowMd5, "true") == 0))
+    {
+        g_defaultProvider = CryptoNative_LoadDefaultProvider();
+    }
+
 #ifdef NEED_OPENSSL_3_0
     if (API_EXISTS(EVP_MD_fetch))
     {
@@ -36,6 +47,15 @@ static void EnsureFetchEvpMdAlgorithms(void)
     }
 }
 
+void CryptoNative_CleanupDefaultProvider(void)
+{
+    if (g_defaultProvider != NULL)
+    {
+        CryptoNative_UnloadProvider(g_defaultProvider);
+        g_defaultProvider = NULL;
+    }
+}
+
 EVP_MD_CTX* CryptoNative_EvpMdCtxCreate(const EVP_MD* type)
 {
     ERR_clear_error();
diff --git a/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.h b/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.h
index 5d8460c7b7d..e717a10741c 100644
--- a/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.h
+++ b/src/runtime/src/native/libs/System.Security.Cryptography.Native/pal_evp.h
@@ -202,6 +202,15 @@ Returns the maximum bytes for a message digest.
 */
 PALEXPORT int32_t CryptoNative_GetMaxMdSize(void);
 
+/*
+Function:
+CleanupDefaultProvider
+
+Cleans up the default provider loaded for MD5 operations.
+Should be called during library shutdown.
+*/
+PALEXPORT void CryptoNative_CleanupDefaultProvider(void);
+
 /*
 Filled the destination buffer with PBKDF2 derived data.
 
-- 
2.43.0

