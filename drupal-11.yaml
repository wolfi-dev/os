package:
  name: drupal-11
  description: Drupal is an open source content management platform powering millions of websites and applications.
  version: "11.2.2"
  epoch: 0
  resources:
    cpu: 17
    memory: 32Gi
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - ${{package.name}}-apache2-config
      - docker-library-php
      # `make test/drupal*` should complain about missing extensions
      - php-${{vars.php-version}}
      - php-${{vars.php-version}}-apache
      - php-${{vars.php-version}}-curl
      - php-${{vars.php-version}}-dom
      - php-${{vars.php-version}}-gd
      - php-${{vars.php-version}}-mbstring
      - php-${{vars.php-version}}-mysqlnd
      - php-${{vars.php-version}}-opcache
      - php-${{vars.php-version}}-pdo
      - php-${{vars.php-version}}-pdo_mysql
      - php-${{vars.php-version}}-pdo_pgsql
      - php-${{vars.php-version}}-pdo_sqlite
      - php-${{vars.php-version}}-phar
      - php-${{vars.php-version}}-simplexml
      - php-${{vars.php-version}}-sodium
      - php-${{vars.php-version}}-xml
      - php-${{vars.php-version}}-xmlwriter
      - php-${{vars.php-version}}-zip
    provides:
      - drupal=${{package.full-version}}

update:
  enabled: true
  github:
    identifier: drupal/core
    use-tag: true
    tag-filter: "11"

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+).*
    replace: $1
    to: major-version

environment:
  environment:
    PHP_INI_DIR: /usr/local/etc/php
  contents:
    packages:
      - apache2-config
      - build-base
      - busybox
      - composer
      - php-${{vars.php-version}}-curl
      - php-${{vars.php-version}}-dom
      - php-${{vars.php-version}}-gd
      - php-${{vars.php-version}}-mbstring
      - php-${{vars.php-version}}-mysqlnd
      - php-${{vars.php-version}}-pdo
      - php-${{vars.php-version}}-pdo_mysql
      - php-${{vars.php-version}}-simplexml
      - php-${{vars.php-version}}-sodium
      - php-${{vars.php-version}}-xml
      - php-${{vars.php-version}}-xmlwriter
      - php-${{vars.php-version}}-zip

vars:
  php-version: 8.4

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/drupal/drupal.git
      tag: ${{package.version}}
      expected-commit: 965123445745f50c7fc001c72a96650518c267d2
      destination: /usr/src/${{package.name}}

  - uses: git-checkout
    with:
      repository: https://github.com/drupal/recommended-project.git
      tag: ${{package.version}}
      expected-commit: fa1bc3962b89743d74fbded0cc88c1eaff34f60a
      destination: vendor-binaries

  # For compatibility with upstream image that has `/opt/drupal/{vendor,recipes}`
  - name: Generate vendor binaries
    runs: |
      cd vendor-binaries
      composer install

  - name: Prep config
    runs: |
      install -d ${{targets.destdir}}${PHP_INI_DIR}/conf.d/
      tee ${{targets.destdir}}${PHP_INI_DIR}/conf.d/${{package.name}}-opcache-recommended.ini <<EOF
      opcache.memory_consumption=128
      opcache.interned_strings_buffer=8
      opcache.max_accelerated_files=4000
      opcache.revalidate_freq=60
      EOF

  - name: Build Drupal
    runs: |
      export COMPOSER_ALLOW_SUPERUSER=1
      export COMPOSER_HOME="$(mktemp -d)"
      install -dm0755 ${{targets.destdir}}/opt/drupal/web
      mv vendor-binaries/vendor ${{targets.destdir}}/opt/drupal/

      # Move files around to match upstream image structure
      cp -r vendor-binaries/composer*  ${{targets.destdir}}/opt/drupal/
      cp -a /usr/src/${{package.name}}/. ${{targets.destdir}}/opt/drupal/web/
      mv ${{targets.destdir}}/opt/drupal/web/.editorconfig ${{targets.destdir}}/opt/drupal/.editorconfig
      mv ${{targets.destdir}}/opt/drupal/web/.gitattributes ${{targets.destdir}}/opt/drupal/.gitattributes
      rm -rf ${{targets.destdir}}/opt/drupal/web/.git*
      chmod 755 ${{targets.destdir}}/opt/drupal/web
      chmod 755 ${{targets.destdir}}/opt/drupal/web/.htaccess
      cd ${{targets.destdir}}/opt/drupal/web
      composer install
      composer check-platform-reqs

      # Drupal's [INSTALL.txt](https://github.com/drupal/core/blob/4487e6b99d5554dfe402318618244bb55a217486/INSTALL.txt#L2) recommends setting `chmod a+w` for thse files
      # Doing that gives us `0777` as the file perms in `stat`
      install -Dpm0777 ${{targets.destdir}}/opt/drupal/web/sites/default/default.settings.php ${{targets.destdir}}/opt/drupal/web/sites/default/settings.php
      install -dpm0777 ${{targets.destdir}}/opt/drupal/web/sites/default/files
      # Quieten CVE reader false positive complaining about fake drupal example website in package_manager tests
      rm -r ${{targets.destdir}}/opt/drupal/web/core/modules/package_manager/tests/

  - name: Configure symlinks
    runs: |
      # Upstream image uses /usr/bin/apache2, but we have /usr/bin/httpd instead, both are the same
      # https://github.com/docker-library/php/blob/d21ab07e7f4014a5443f47c8ff8e292f9c703a58/apache2-foreground#L40
      install -d ${{targets.destdir}}/usr/bin
      ln -sf /usr/bin/httpd ${{targets.destdir}}/usr/bin/apache2
      # There is normally a README here, but it is an entire repo we need to clone, so no need for that
      install -d ${{targets.destdir}}/opt/drupal/recipes

subpackages:
  - name: ${{package.name}}-compat
    description: Compat subpackage for drupal project upstream image
    dependencies:
      runtime:
        - ${{package.name}}
        - php-${{vars.php-version}}-phar
        - php-${{vars.php-version}}-openssl
        # The image uses a shell script as the entrypoint
        - coreutils
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/var/www
          ln -f -s /opt/drupal/web ${{targets.contextdir}}/var/www/html
          mkdir -p ${{targets.contextdir}}/var/log/apache2
          ln -sf /dev/stdout ${{targets.contextdir}}/var/log/apache2/access.log
          ln -sf /dev/stderr ${{targets.contextdir}}/var/log/apache2/error.log
          ln -sf /dev/stdout ${{targets.contextdir}}/var/log/apache2/other_vhosts_access.log

  - name: ${{package.name}}-apache2-config
    description: ${{package.name}} Apache2 httpd.conf configuration
    dependencies:
      replaces:
        - apache2-config
        - apache2-config-compat
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/etc/apache2/extra/
          APACHE_DIR="${{targets.contextdir}}"/etc/apache2
          TARGET="${{targets.contextdir}}"/etc/apache2/httpd.conf

          cp /etc/apache2/httpd.conf "$TARGET"
          cp /etc/apache2/extra/httpd-ssl.conf "${{targets.contextdir}}"/etc/apache2/extra/httpd-ssl.conf

          # Configure DocumentRoot and ServerRoot paths
          sed -i 's|/usr/share/apache2/default-site/htdocs|/var/www/html|' "$TARGET"
          sed -i 's|/usr/local/apache2/htdocs|/var/www/html|' "$TARGET"

          # Set the log folders to access.log, error.log, and other_vhosts_access.log
          sed -i 's|^ErrorLog.*|ErrorLog "/var/log/apache2/error.log"|' "$TARGET"
          sed -i 's|"var/log/apache2/access_log" common|"/var/log/apache2/access.log" combined|' "$TARGET"
          echo 'CustomLog "/var/log/apache2/other_vhosts_access.log" vhost_combined' > "$APACHE_DIR/extra/vhost-access-log.conf"
          echo "Include etc/apache2/extra/vhost-access-log.conf" >> "$TARGET"

          # Fix the error: `Apache is running a threaded MPM, but your PHP Module is not compiled to be threadsafe. You need to recompile PHP.`
          sed -ri \
            -e 's|^(\s*)LoadModule mpm_event_module|\1#LoadModule mpm_event_module|' \
            -e 's|^(\s*)#*LoadModule mpm_prefork_module|\1LoadModule mpm_prefork_module|' \
            "${{targets.subpkgdir}}"/etc/apache2/httpd.conf

          # Load additional modules that upstream image loads by default
          # Also include the config files for remoteip and apache-limits as upstream image does
          cat <<EOF >> "$TARGET"
          LoadModule deflate_module     /usr/lib/apache2/modules/mod_deflate.so
          LoadModule negotiation_module /usr/lib/apache2/modules/mod_negotiation.so
          LoadModule rewrite_module     /usr/lib/apache2/modules/mod_rewrite.so
          LoadModule remoteip_module    /usr/lib/apache2/modules/mod_remoteip.so
          LoadModule php_module         /usr/lib/apache2/modules/libphp.so
          <FilesMatch \.php$>
            SetHandler application/x-httpd-php
          </FilesMatch>
          <Directory "/var/www/html">
            AllowOverride All
          </Directory>
          EOF
    test:
      pipeline:
        - name: Validate httpd config
          runs: |
            grep -i 'DocumentRoot "//var/www/html"' /etc/apache2/httpd.conf

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-compat
        - ${{package.name}}-apache2-config
        - apache2-utils
        - curl
        - wait-for-it
        - crane
    environment:
      DRUPAL_ADMIN_PASSWORD: admin
      DRUPAL_PORT: 8080
      DRUPAL_HOST: localhost
  pipeline:
    - name:
      runs: |
        apachectl -S # Lints the httpd config
    - name: Test production endpoint with httpd
      runs: |
        apache2-foreground >>/dev/null 2>&1 &
        APACHE_PID=$!
        DRUPAL_HOST="localhost:80"
        DRUPAL_ENDPOINT="http://${DRUPAL_HOST}"
        wait-for-it -t 60 --strict "${DRUPAL_HOST}"
        curl -s "${DRUPAL_ENDPOINT}" | grep 'Redirecting to <a href="/core/install.php">'
        curl -s "${DRUPAL_ENDPOINT}/core/install.php" | grep '<span class="site-version">${{package.version}}</span>'
        kill -9 "${APACHE_PID}"
    - working-directory: /opt/drupal/web/core/scripts
      name: Smoke tests
      runs: |
        php ./drupal --version | grep ${{package.version}}
        php ./drupal help recipe | grep 'Applies a recipe to a site.'
        php ./drupal help list | grep 'List commands'
        php ./drupal help generate-theme | grep 'Generates a new theme'
    - name: Ensure demo quickstart website works
      working-directory: /opt/drupal/web
      runs: |
        DRUPAL_TEST_NAME="Drupal_Test"
        php -d memory_limit=256M core/scripts/drupal quick-start demo_umami \
          --suppress-login \
          --site-name "$DRUPAL_TEST_NAME" \
          --password "${DRUPAL_ADMIN_PASSWORD}" \
          --host "${DRUPAL_HOST}" \
          --port "${DRUPAL_PORT}" &
        DRUPAL_SERVER=$!
        wait-for-it -t 300 --strict "${DRUPAL_HOST}:${DRUPAL_PORT}"
        curl "${DRUPAL_HOST}:${DRUPAL_PORT}" | grep "<title>Home | $DRUPAL_TEST_NAME</title>"
        curl "${DRUPAL_HOST}:${DRUPAL_PORT}" | grep "content=\"Drupal ${{vars.major-version}}"
        kill -9 "${DRUPAL_SERVER}"
    - name: Ensure the PHP modules match Nextcloud image
      runs: |
        /bin/bash -c '
        set -eo pipefail

        # Sometimes the tag is not available yet, so its ok to use the previous one
        # e.g. 31.0.4 -> 31.0.3
        tag=${{package.version}}
        DRUPAL_IMAGE="docker.io/library/drupal"
        crane manifest $DRUPAL_IMAGE:$tag >/dev/null 2>&1 || tag=${tag%.*}.$(( ${tag##*.} - 1 ))

        required_modules=$(crane export $DRUPAL_IMAGE:$tag - | \
          tar -tvf - | \
          grep "usr/local/lib/php/extensions/.*\.so$" | \
          awk -F"/" "{print \$NF}" | \
          sed "s/\.so\$//" | \
          sort -u)

        echo "Modules required by $DRUPAL_IMAGE:$tag:"
        echo "$required_modules"

        loaded_modules=$(php -m | tr "[:upper:]" "[:lower:]" | sed "s/zend opcache/opcache/")

        missing_modules=()
        while read -r module; do
          if ! grep -iq "^${module}$" <<< "$loaded_modules"; then
            missing_modules+=("$module")
          fi
        done <<< "$required_modules"

        if [ ${#missing_modules[@]} -ne 0 ]; then
          echo "Missing PHP modules: ${missing_modules[*]}"
          exit 1
        else
          echo "All required PHP modules are loaded!"
        fi
        '
