package:
  name: duckdb
  version: "1.2.0"
  epoch: 0
  description: "DuckDB is an analytical in-process SQL database management system"
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - ca-certificates-bundle
      - cmake
      - git
      - ninja
      - openssl-dev
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/duckdb/duckdb
      tag: v${{package.version}}
      expected-commit: 5f5512b827df6397afd31daedb4bbdee76520019

  - uses: autoconf/make
    with:
      opts: |
        GEN=ninja CORE_EXTENSIONS='autocomplete;httpfs;icu;json;tpch;delta'

  - runs: install -Dm755 build/release/duckdb "${{targets.destdir}}"/usr/bin/duckdb

  - uses: strip

subpackages:
  - name: "${{package.name}}-compat"
    description: "Compatibility package to place binaries in the location expected by upstream image"
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"
          ln -sf /usr/bin/duckdb ${{targets.contextdir}}/duckdb
    test:
      pipeline:
        - runs: |
            test -L /duckdb

update:
  enabled: true
  github:
    identifier: duckdb/duckdb
    strip-prefix: v
    use-tag: true

test:
  pipeline:
    - name: Ensure CLI is operational
      runs: |
        duckdb --version
    - name: Open and query in-memory database
      runs: |
        echo "SELECT 'quack' AS response;" | duckdb :memory: | grep -qi "quack"
    - name: Create and query persistent database
      runs: |
        duckdb test.duckdb "CREATE TABLE test (id INTEGER, name TEXT); INSERT INTO test VALUES (1, 'Alice'), (2, 'Bob');"
        duckdb test.duckdb "SELECT name FROM test WHERE id=2;" | grep -qi "Bob"
    - name: Test dot commands
      runs: |
        echo ".mode csv" > dot_commands.sql
        echo "SELECT 'duck' AS bird;" >> dot_commands.sql
        duckdb :memory: ".read dot_commands.sql" | grep -qi "duck"
    - name: Export query results to a file
      runs: |
        duckdb :memory: "SELECT 1 AS id, 'test' AS name;" > output.csv
        grep -qi "test" output.csv
    - name: Validate piping data
      runs: |
        echo "1,duck" > input.csv
        duckdb -c "CREATE TABLE test (id INTEGER, name TEXT); COPY test FROM 'input.csv' (FORMAT 'csv', HEADER FALSE); SELECT * FROM test;" | grep -qi "duck"
    - name: Validate environment variable access
      runs: |
        echo "SELECT getenv('HOME') AS home_dir;" | duckdb :memory: | grep -q "/"
    - name: Load and test an extension
      runs: |
        duckdb :memory: "INSTALL fts; LOAD fts; SELECT 1;" | grep -q "1"
