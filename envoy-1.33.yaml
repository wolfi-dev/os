package:
  name: envoy-1.33
  version: "1.33.2"
  epoch: 0
  description: Cloud-native high-performance edge/middle/service proxy
  copyright:
    - license: Apache-2.0
  resources:
    cpu: 20
    memory: 50Gi
  dependencies:
    provides:
      - envoy=${{package.full-version}}

environment:
  contents:
    packages:
      - bash
      - bazel-6
      - binutils
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang~15
      - cmake
      - coreutils
      - git
      - libtool
      - llvm-libcxx-15
      - llvm-libcxx-15-dev
      - llvm-libcxxabi-15
      - llvm-lld-15
      - llvm15
      - llvm15-cmake-default
      - llvm15-dev
      - llvm15-tools
      - openjdk-11
      - patch
      - python3-dev
      - samurai
      - wolfi-baselayout

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/envoyproxy/envoy
      tag: v${{package.version}}
      expected-commit: 2135e1a42f002a939d60581096291acb6abce695
      destination: envoy

  - runs: |
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
      mkdir -p .cache/bazel/_bazel_root

      cd envoy
      # The Python interpreter complains about being run as root, there's a flag to pass to disable that warning.
      sed -i 's/envoy_dependencies_extra()/envoy_dependencies_extra(ignore_root_user_error=True)/g' WORKSPACE

      ./bazel/setup_clang.sh /usr
      echo "build --config=libc++" >> user.bazelrc

      bazel build --verbose_failures -c opt envoy

      mkdir -p ${{targets.destdir}}/usr/bin/
      mv bazel-bin/source/exe/envoy-static ${{targets.destdir}}/usr/bin/envoy

      # We no longer need this cache dir, which has some writable files.
      rm -rf ../.cache/bazel/_bazel_root

  - uses: strip

subpackages:
  - name: ${{package.name}}-oci-entrypoint
    description: Entrypoint for using Envoy in OCI containers
    dependencies:
      runtime:
        - busybox
      provides:
        - envoy-oci-entrypoint=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/var/lib/envoy/init
          cp envoy/ci/docker-entrypoint.sh ${{targets.subpkgdir}}/var/lib/envoy/init/envoy-entrypoint.sh
          chmod +x ${{targets.subpkgdir}}/var/lib/envoy/init/envoy-entrypoint.sh

  - name: ${{package.name}}-config
    description: Default Envoy configuration
    dependencies:
      provides:
        - envoy-config=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/etc/envoy
          cp envoy/configs/envoyproxy_io_proxy.yaml ${{targets.subpkgdir}}/etc/envoy/envoy.yaml

update:
  enabled: true
  github:
    identifier: envoyproxy/envoy
    strip-prefix: v
    use-tag: true
    tag-filter-prefix: v1.33

test:
  environment:
    contents:
      packages:
        - bash
        - curl
        - netcat-openbsd
        - procps
        - jq
  pipeline:
    - name: "Verify binary installation"
      runs: |
        envoy --version
        envoy --help
    - name: "Test Envoy admin interface startup"
      uses: test/daemon-check-output
      with:
        setup: |
          #!/bin/sh -e
          cat > /tmp/minimal.yaml <<EOF
          admin:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 9901
          static_resources:
            listeners: []
            clusters: []
          EOF
        start: envoy --config-path /tmp/minimal.yaml --admin-address-path /tmp/admin.txt
        timeout: 30
        expected_output: |
          starting main dispatch loop
          all dependencies initialized
        post: |
          #!/bin/sh -e
          # Get admin address
          ADMIN_ADDR=$(cat /tmp/admin.txt)

          # Test admin endpoints
          curl -s "http://${ADMIN_ADDR}/server_info" | jq . || exit 1
          curl -s "http://${ADMIN_ADDR}/stats" | grep envoy || exit 1
          curl -s "http://${ADMIN_ADDR}/clusters" | jq . || exit 1
    - name: "Test hot restart capability"
      uses: test/daemon-check-output
      with:
        setup: |
          #!/bin/sh -e
          cat > /tmp/minimal.yaml <<EOF
          admin:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 9901
          static_resources:
            listeners: []
            clusters: []
          EOF
        start: envoy --config-path /tmp/minimal.yaml --restart-epoch 0
        timeout: 30
        expected_output: |
          starting main dispatch loop
          all dependencies initialized
        post: |
          #!/bin/sh -e
          first_pid=$(pgrep -f "restart-epoch 0")
          envoy --config-path /tmp/minimal.yaml --restart-epoch 1 &
          sleep 2

          # Verify both processes exist
          if ! ps -p $first_pid > /dev/null; then
            echo "Original Envoy process not found"
            exit 1
          fi
