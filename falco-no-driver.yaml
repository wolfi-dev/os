package:
  name: falco-no-driver
  version: "0.41.3"
  epoch: 7
  description: Cloud Native Runtime Security
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - falco-rules
  resources:
    # https://go/wolfi-rsc/falco-no-driver
    cpu: 20
    memory: 40Gi

vars:
  llvm-vers: 19

environment:
  contents:
    packages:
      - autoconf
      - bash
      - bpftool
      - build-base
      - busybox
      - c-ares-dev
      - ca-certificates-bundle
      - clang-${{vars.llvm-vers}}
      - clang-${{vars.llvm-vers}}-extras
      - cmake
      - cpp-httplib
      - curl
      - curl-dev
      - cxxopts-dev
      - elfutils-dev
      - gcc
      - git
      - grpc-1.66-dev
      - isl-dev
      - libbpf
      - libbpf-dev
      - libelf-static
      - libtool
      - mpc-dev
      - nlohmann-json
      - openssl-dev
      - pkgconf
      - protobuf-29.5-dev
      - systemd-dev
      - yaml-cpp-dev
      - zlib-dev
  environment:
    # See https://github.com/wolfi-dev/os/issues/34075
    GCC_SPEC_FILE: no-hardening.spec

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/falcosecurity/falco
      tag: ${{package.version}}
      expected-commit: d26e0f77b8409b1506efaac4dac7164e71f2ee76
      recurse-submodules: true

  - runs: |
      mkdir skeleton-build && cd skeleton-build
      cmake -DUSE_BUNDLED_DEPS=ON -DBUILD_FALCO_MODERN_BPF=ON -DCREATE_TEST_TARGETS=Off -DFALCO_VERSION=${{package.version}} ..
      make ProbeSkeleton -j$(nproc)

      mkdir -p /tmp
      cp ./skel_dir/bpf_probe.skel.h /tmp

  - runs: |
      mkdir build && cd build
      cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DUSE_BUNDLED_DEPS=Off \
        -DFALCO_ETC_DIR=/etc/falco \
        -DBUILD_FALCO_MODERN_BPF=ON \
        -DMODERN_BPF_SKEL_DIR=/tmp \
        -DBUILD_DRIVER=Off \
        -DBUILD_BPF=Off \
        -DFALCO_VERSION=${{package.version}} \
        ..
      make falco -j$(nproc)

  - name: Install Falco
    working-directory: /home/build/build
    runs: |
      # Install everything via cmake install target (includes container plugin)
      make install DESTDIR="${{targets.destdir}}"

      # Do not conflict with the falco-rules and falcoctl package.
      rm -f "${{targets.destdir}}"/etc/falco/falco_rules.yaml
      rm -f "${{targets.destdir}}"/usr/bin/falcoctl
      rm -rf "${{targets.destdir}}"/etc/falcoctl

  - uses: strip

update:
  enabled: true
  github:
    identifier: falcosecurity/falco

test:
  environment:
    contents:
      packages:
        - bash
        - coreutils
        - falco-rules
        - procps
        - curl
        - abseil-cpp-20250127-dev
  pipeline:
    - name: "Create configuration file"
      runs: |
        cat > /etc/falco/falco.yaml << 'EOF'
        rules_file:
          - /etc/falco/falco_rules.yaml
        json_output: false
        stdout_output:
          enabled: true
        log_level: info
        priority: warning

        # Try to satisfy container plugin requirement
        plugins:
          - name: container
            library_path: libcontainer.so
            init_config: ""
        load_plugins: [container]
        EOF
    - name: "Verify falco version"
      runs: |
        falco --version
    - name: "Validate configuration"
      runs: |
        falco -c /etc/falco/falco.yaml --dry-run
    - name: "List available rules"
      runs: |
        falco -L
    - name: "Test JSON rule output format"
      runs: |
        falco -o json_output=true -L
    - name: "List available events"
      runs: |
        falco --list-events
    - name: "Check loaded plugins"
      runs: |
        falco --list-plugins
    - name: "Display support information"
      runs: |
        falco --support
    - name: "List syscall fields"
      runs: |
        falco --list syscall
    - name: "Validate custom rule file"
      runs: |
        echo '- rule: test_rule
          desc: Test rule
          condition: evt.type=execve
          output: Execution detected
          priority: WARNING' > /tmp/test.yaml
        falco -V /tmp/test.yaml
    - name: "Print configuration schema"
      runs: |
        falco --config-schema
    - name: "Print rule schema"
      runs: |
        falco --rule-schema
    - name: "Test verbose output"
      runs: |
        falco -v --dry-run
    - name: "Check ignored events"
      runs: |
        falco -i
    - uses: test/tw/ldd-check
