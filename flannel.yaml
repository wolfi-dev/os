package:
  name: flannel
  version: "0.26.7"
  epoch: 0
  description: flannel is a network fabric for containers, designed for Kubernetes
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - ca-certificates
      - ip6tables
      - iproute2
      - iptables
      - nftables
      - strongswan
      - wireguard-tools

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/flannel-io/flannel
      tag: v${{package.version}}
      expected-commit: db296e3efd5368450c67bbd6ae21f42d357e8c83

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0

  - uses: go/build
    with:
      packages: "."
      output: "flanneld"
      ldflags: |-
        -X github.com/flannel-io/flannel/pkg/version.Version=${{package.version}}

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/opt/bin
          ln -sf /usr/bin/flanneld ${{targets.contextdir}}/opt/bin/flanneld
    description: Compat package for ${{package.name}}
    test:
      pipeline:
        - runs: |
            stat /opt/bin/flanneld

update:
  enabled: true
  github:
    identifier: flannel-io/flannel
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - ${{package.name}}
        - etcd
        - jq
        - iproute2
  pipeline:
    - name: "Check flanneld version"
      runs: |
        flanneld --version
    - name: "Setup etcd for testing"
      runs: |
        # Create shared environment file
        echo "# Flannel test environment variables" > /tmp/env.sh

        # Start etcd in background with proper networking configuration
        mkdir -p /tmp/etcd-data
        etcd --data-dir=/tmp/etcd-data \
          --listen-client-urls=http://127.0.0.1:2379 \
          --advertise-client-urls=http://127.0.0.1:2379 > /tmp/etcd.log 2>&1 &
        ETCD_PID=$!

        # Save PID to environment file
        echo "export ETCD_PID=$ETCD_PID" >> /tmp/env.sh

        # Detect the default interface with fallback to eth0 using JSON output
        IFACE=$(ip -json route show default | jq -r '.[0].dev' 2>/dev/null || ip -o -4 route show to default | awk '{print $5}' 2>/dev/null || echo "eth0")
        echo "Using network interface: $IFACE"
        echo "export IFACE=$IFACE" >> /tmp/env.sh

        # Check etcd is ready before proceeding
        for i in 1 2 3 4 5; do
          if etcdctl --endpoints=http://127.0.0.1:2379 endpoint status --write-out=table; then
            echo "export ETCD_ENDPOINTS=http://127.0.0.1:2379" >> /tmp/env.sh
            break
          fi
          sleep 1
        done

        # Store flannel network config in etcd
        printf "{\"Network\": \"10.244.0.0/16\", \"Backend\": {\"Type\": \"host-gw\"}}" > /tmp/flannel-config.json
        etcdctl --endpoints=http://127.0.0.1:2379 put /coreos.com/network/config "$(cat /tmp/flannel-config.json)"

        # Verify the config was stored correctly
        etcdctl --endpoints=http://127.0.0.1:2379 get /coreos.com/network/config
    - name: "Run flanneld and verify subnet creation"
      runs: |
        # Load saved environment variables
        [ -f /tmp/env.sh ] && . /tmp/env.sh

        # Wait a bit for etcd to be fully ready
        sleep 3

        # Run flanneld in background
        flanneld --etcd-endpoints=$ETCD_ENDPOINTS --iface=$IFACE --iptables-forward-rules=false > /tmp/flannel.log 2>&1 &
        FLANNEL_PID=$!

        # Save PID to environment file
        echo "export FLANNEL_PID=$FLANNEL_PID" >> /tmp/env.sh

        # Wait for subnet file
        success=false
        for i in $(seq 1 10); do
          if [ -f /run/flannel/subnet.env ]; then
            success=true
            break
          fi
          sleep 1
        done

        # Check if the subnet file was created
        if [ "$success" = true ]; then
          echo "Test passed: Flannel created subnet configuration file"
          cat /run/flannel/subnet.env

          # Save subnet info to environment file
          grep -v '^#' /run/flannel/subnet.env >> /tmp/env.sh

          # Verify subnet lease in etcd
          echo "Checking subnet leases in etcd"
          LEASE_KEYS=$(etcdctl --endpoints=$ETCD_ENDPOINTS get /coreos.com/network/subnets --prefix --keys-only || echo "No leases found")
          echo "$LEASE_KEYS"

          # Extract subnet lease details as suggested
          LEASE_SUBNET_ETCD_KEY=$(etcdctl get /coreos.com/network/subnets --prefix --keys-only)
          if [ -n "$LEASE_SUBNET_ETCD_KEY" ]; then
            echo "Found lease key: $LEASE_SUBNET_ETCD_KEY"
            echo "export LEASE_SUBNET_ETCD_KEY=\"$LEASE_SUBNET_ETCD_KEY\"" >> /tmp/env.sh

            # Extract and verify Public IP
            LEASE_PUBLIC_IP=$(etcdctl get $LEASE_SUBNET_ETCD_KEY --print-value-only=true | jq '.PublicIP' | tr -d "\"")
            echo "Lease Public IP: $LEASE_PUBLIC_IP"
            echo "export LEASE_PUBLIC_IP=\"$LEASE_PUBLIC_IP\"" >> /tmp/env.sh

            # Verify IP address on interface
            ip address show $IFACE | grep -q "$LEASE_PUBLIC_IP" && echo "Public IP verified on interface" || echo "Public IP not found on interface"

            # Verify IP routing
            ip route get $LEASE_PUBLIC_IP

            # Check etcd lease information
            LEASE_ETCD_LEASE_ID=$(etcdctl lease list | tail -1)
            if [ -n "$LEASE_ETCD_LEASE_ID" ]; then
              echo "Checking lease TTL and keys for lease ID: $LEASE_ETCD_LEASE_ID"
              echo "export LEASE_ETCD_LEASE_ID=\"$LEASE_ETCD_LEASE_ID\"" >> /tmp/env.sh
              etcdctl lease timetolive --keys $LEASE_ETCD_LEASE_ID | grep -q "$LEASE_SUBNET_ETCD_KEY" && \
                echo "Lease verification passed" || echo "Lease verification failed"
            fi
          else
            echo "No subnet leases found in etcd"
          fi

          exit 0
        else
          echo "Test failed: Subnet file not created within timeout period"
          echo "Flannel logs:"
          cat /tmp/flannel.log
          exit 1
        fi
    - name: "Cleanup test environment"
      runs: |
        # Load saved environment variables
        [ -f /tmp/env.sh ] && . /tmp/env.sh

        # Kill flanneld if it's still running
        if [ -n "$FLANNEL_PID" ] && kill -0 $FLANNEL_PID 2>/dev/null; then
          echo "Cleaning up flanneld (PID: $FLANNEL_PID)"
          kill $FLANNEL_PID || true
        fi

        # Kill etcd if it's still running
        if [ -n "$ETCD_PID" ] && kill -0 $ETCD_PID 2>/dev/null; then
          echo "Cleaning up etcd (PID: $ETCD_PID)"
          kill $ETCD_PID || true
        fi

        echo "Test completed successfully"
