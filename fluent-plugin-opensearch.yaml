package:
  name: fluent-plugin-opensearch
  version: 1.1.5
  epoch: 1
  description: Opensearch output plugin for Fluent event collector
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - ruby3.2-fluent-plugin-opensearch=${{package.full-version}}
    runtime:
      - ruby3.2-aws-sdk-core
      - ruby3.2-faraday
      - ruby3.2-faraday-excon
      - ruby3.2-faraday_middleware-aws-sigv4
      - ruby3.2-fluentd
      - ruby3.2-opensearch-ruby

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-3.2
      - ruby-3.2-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 5bf8450f8127688c4f9b4b5caa588c9c16a04b93
      repository: https://github.com/fluent/fluent-plugin-opensearch
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: fluent-plugin-opensearch

update:
  enabled: true
  github:
    identifier: fluent/fluent-plugin-opensearch
    strip-prefix: v
    use-tag: true

test:
  pipeline:
    - runs: |
        ruby -e "require 'fluent/plugin/in_opensearch'"
        ruby -e "require 'fluent/plugin/out_opensearch'"
        ruby -e "require 'fluent/plugin/filter_opensearch_genid'"
        ruby -e "require 'fluent/plugin/opensearch_tls'"
        ruby -e "require 'fluent/plugin/output'"
    - name: Mock OpenSearch client connection
      runs: |
        ruby -ropensearch -e "
          class MockOpenSearchClient
            def ping
              true
            end
          end

          client = MockOpenSearchClient.new
          raise 'Ping failed' unless client.ping
        "
    - name: Mock basic search operation
      runs: |
        ruby -ropensearch -e "
          class MockOpenSearchClient
            def index(params)
              { 'result' => 'created' } if params[:index] == 'test' && params[:id] == 1
            end

            def search(params)
              { 'hits' => { 'total' => { 'value' => 1 } } } if params[:index] == 'test'
            end
          end

          client = MockOpenSearchClient.new

          # Simulate indexing a document
          result = client.index(index: 'test', id: 1, body: { title: 'Test' })
          raise 'Indexing failed' unless result['result'] == 'created'

          # Simulate searching for the document
          response = client.search(index: 'test', body: { query: { match: { title: 'Test' } } })
          raise 'Search failed' unless response['hits']['total']['value'] > 0
        "
