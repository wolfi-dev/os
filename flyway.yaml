package:
  name: flyway
  version: "11.3.1"
  epoch: 1
  description: "Flyway is a database migration tool to evolve your database schema easily and reliably across all your instances."
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - bash
      - openjdk-17-jre

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - maven
      - openjdk-17
      - wolfi-base
  environment:
    LANG: en_US.UTF-8
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk

vars:
  lib-core: "accessors-smart commons-text content-type gson jackson jansi jna json-smart lang-tag msal4j-persistence-extension nimbus-jose-jwt oauth2-oidc-sdk slf4j-nop stax2-api woodstox-core"
  lib-aad: "azure msal4j reactive-streams reactor slf4j-api"
  drivers-core: "aws-secretsmanager-jdbc databricks-jdbc google-cloud-storage h2 hsqldb jaybird jffi jtds mariadb-java-client mssql-jdbc ojdbc11 postgresql singlestore-jdbc-client snowflake-jdbc sqlite-jdbc"
  drivers-cassandra: "HdrHistogram asm caffeine cassandra-jdbc-wrapper commons-collections4 commons-io commons-lang3 config java-driver jcip-annotations jnr metrics-core native-protocol semver4j"
  drivers-gcp: "animal-sniffer-annotations annotations api-common auto-value-annotations checker-qual commons-codec conscrypt-openjdk-uber detector-resources-support error_prone_annotations failureaccess gax google-auth google-cloud-core google-cloud-monitoring google-cloud-spanner google-http-client grpc guava httpclient httpcore j2objc-annotations javax.annotation-api jsr305 listenablefuture opencensus perfmark-api proto protobuf-java re2j threetenbp"
  drivers-mongo: "bson flyway-experimental-mongodb mongodb-driver"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/flyway/flyway
      tag: flyway-${{package.version}}
      expected-commit: 4c5892956e17d67173ceb481e84085346d90a410

  - uses: maven/pombump
    with:
      pom: flyway-commandline/pom.xml

  - name: Install
    runs: |
      # Setup flyway dirs
      mkdir -p ${{targets.destdir}}/usr/share/java/flyway
      for dir in lib lib/aad lib/netty lib/flyway conf licenses drivers drivers/cassandra drivers/gcp drivers/mongo; do
        mkdir -p ${{targets.destdir}}/usr/share/java/flyway/$dir
      done

      # Build flyway
      ./mvnw -B clean dependency:copy-dependencies package -e --file pom.xml -DskipTests -pl !flyway-database/flyway-database-mongodb

      # Move over flyway related cmd scripts, license info, etc.
      cp flyway-commandline/src/main/assembly/flyway ${{targets.contextdir}}/usr/share/java/flyway/
      cp flyway-commandline/src/main/assembly/flyway.cmd ${{targets.contextdir}}/usr/share/java/flyway/
      cp flyway-commandline/src/main/assembly/README.txt ${{targets.contextdir}}/usr/share/java/flyway/
      cp flyway-commandline/src/main/assembly/LICENSE.md ${{targets.contextdir}}/usr/share/java/flyway/licenses
      cp flyway-commandline/src/main/assembly/LICENSES-THIRD-PARTY.txt ${{targets.contextdir}}/usr/share/java/flyway/licenses
      cp flyway-commandline/src/main/assembly/flyway.toml.example ${{targets.contextdir}}/usr/share/java/flyway/conf
      cp flyway-commandline/src/main/assembly/put-your-jdbc-drivers-here.txt ${{targets.contextdir}}/usr/share/java/flyway/drivers

      # Move over flyway related jars
      find flyway-commandline/target/dependency -name "flyway-*.jar" \
        ! -name "flyway-experimental-mongodb-${{package.version}}.jar" \
        -exec cp {} ${{targets.contextdir}}/usr/share/java/flyway/lib/flyway \;
      cp flyway-commandline/target/flyway-commandline-${{package.version}}.jar ${{targets.contextdir}}/usr/share/java/flyway/lib/flyway
      rm ${{targets.contextdir}}/usr/share/java/flyway/lib/flyway/flyway-experimental-sqlite-${{package.version}}.jar


      # Setup permissions for flyway cli tools
      chmod 0755 ${{targets.destdir}}/usr/share/java/flyway/flyway ${{targets.destdir}}/usr/share/java/flyway/flyway.cmd

  - name: Extract netty jars
    runs: |
      # Extract netty related jars to flyway/lib/netty
      find flyway-commandline/target/dependency -name "netty-*.jar" \
        ! -name "netty-nio-client-*.jar" \
        -exec cp {} ${{targets.contextdir}}/usr/share/java/flyway/lib/netty \;

  - name: Extract Flyway lib jars
    runs: |
      # Extract third-party related jars to flyway/lib
      for dep in ${{vars.lib-core}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/lib
      done

  - name: Extract Flyway lib aad jars
    runs: |
      # Extract third-party related jars to flyway/lib/aad
      for dep in ${{vars.lib-aad}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/lib/aad
      done
      rm ${{targets.contextdir}}/usr/share/java/flyway/lib/aad/msal4j-persistence-extension-*.jar

  - name: Extract Flyway driver related jars
    runs: |
      # Extract third-party related jars to flyway/drivers
      for dep in ${{vars.drivers-core}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/drivers
      done

  - name: Extract Cassandra driver related jars
    runs: |
      # Extract third-party related jars to flyway/drivers/cassandra
      for dep in ${{vars.drivers-cassandra}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/drivers/cassandra
      done

  - name: Extract Mongo driver related jars
    runs: |
      # Extract third-party related jars to flyway/drivers/mongo
      for dep in ${{vars.drivers-mongo}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/drivers/mongo
      done

  - name: Extract GCP driver related jars
    runs: |
      # Extract third-party related jars to flyway/drivers/gcp
      for dep in ${{vars.drivers-gcp}}; do
        cp flyway-commandline/target/dependency/$dep-*.jar ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp
      done
      # Clean up some of the unneeded jars
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/annotations-2.25.26.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/google-cloud-core-http-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/google-http-client-appengine-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/google-http-client-apache-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/google-http-client-jackson2-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/grpc-google-cloud-storage-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/grpc-opentelemetry-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/opencensus-proto-*.jar
      rm ${{targets.contextdir}}/usr/share/java/flyway/drivers/gcp/proto-google-cloud-storage-*.jar

  - name: Create symlinks for flyway
    runs: |
      ln -sf /usr/share/java/flyway ${{targets.destdir}}/flyway
      mkdir -p ${{targets.destdir}}/opt/java/openjdk
      for item in bin conf legal lib release; do
        ln -sf /usr/lib/jvm/java-17-openjdk/$item ${{targets.destdir}}/opt/java/openjdk
      done

  - uses: strip

update:
  enabled: true
  github:
    identifier: flyway/flyway
    strip-prefix: flyway-

test:
  environment:
    environment:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
  pipeline:
    - name: Test CLI basics
      runs: |
        export PATH=$PATH:/usr/share/java/flyway
        flyway -h
        flyway --version
        flyway list-engines
    - name: Test basic migration
      runs: |
        export PATH=$PATH:/usr/share/java/flyway

        # Create migrations dir
        mkdir /tmp/migrations

        # Create flyway.toml config
        cat <<EOF >> /usr/share/java/flyway/conf/flyway.toml
        [flyway]
        locations = ["filesystem:/tmp/migrations"]

        [environments.default]
        locations = ["filesystem:/tmp/migrations"]
        url = "jdbc:h2:mem:db"
        user = ""
        password = ""
        EOF

        # Create migration files
        cat <<EOF >> /tmp/migrations/V1__Create_person_table.sql
        create table PERSON (
            ID int not null,
            NAME varchar(100) not null
        );
        EOF

        cat <<EOF >> /tmp/migrations/V2__add_people.sql
        insert into PERSON (ID, NAME) values (1, 'Axel');
        insert into PERSON (ID, NAME) values (2, 'Mr. Foo');
        insert into PERSON (ID, NAME) values (3, 'Ms. Bar');
        EOF

        # Test migration
        flyway migrate
        flyway info
