package:
  name: gatekeeper-3.19
  version: "3.19.3"
  epoch: 0
  description: Gatekeeper - Policy Controller for Kubernetes
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - gatekeeper=${{package.full-version}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go
      - wolfi-baselayout

pipeline:
  # We can't use go/install because this requires specific ldflags to set the version
  - uses: git-checkout
    with:
      repository: https://github.com/open-policy-agent/gatekeeper
      tag: v${{package.version}}
      expected-commit: e06a51136d06eb3b7dd200db0d375755f794aea3

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0
      replaces: |-
        github.com/traefik/traefik/v3=github.com/traefik/traefik/v3@v3.3.6

  - runs: |
      FRAMEWORKS_VERSION=$(go list -f '{{ .Version }}' -m github.com/open-policy-agent/frameworks/constraint)
      OPA_VERSION=$(go list -f '{{ .Version }}' -m github.com/open-policy-agent/opa)
      CGO_ENABLED=0 GO111MODULE=on go build -mod vendor -a -ldflags "-w -X github.com/open-policy-agent/gatekeeper/pkg/version.Version=v${{package.version}} -X main.frameworksVersion=${FRAMEWORKS_VERSION} -X main.opaVersion=${OPA_VERSION}" -o manager
      make gator
      mkdir -p ${{targets.destdir}}/usr/bin
      install -Dm755 ./manager ${{targets.destdir}}/usr/bin/manager

  - uses: strip

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}
          ln -sf /usr/bin/manager ${{targets.subpkgdir}}/manager
    dependencies:
      provides:
        - gatekeeper-compat=${{package.full-version}}

  - name: ${{package.name}}-gator
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          mv bin/gator ${{targets.subpkgdir}}/usr/bin/gator
    dependencies:
      provides:
        - gatekeeper-gator=${{package.full-version}}

  - name: ${{package.name}}-crds
    dependencies:
      provides:
        - gatekeeper-crds=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/crds
          cp charts/gatekeeper/crds/* ${{targets.subpkgdir}}/crds
    test:
      pipeline:
        - name: Check crd yaml files are present
          runs: |
            ls /crds/*.yaml

  # Upstream image places kubectl at root level, which is expected by the helm chart:
  # https://github.com/open-policy-agent/gatekeeper/blob/master/crd.Dockerfile#L11
  # https://github.com/open-policy-agent/gatekeeper/blob/master/charts/gatekeeper/templates/upgrade-crds-hook.yaml#L112-L115
  - name: ${{package.name}}-crds-compat
    dependencies:
      provides:
        - gatekeeper-crds-compat=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}
          ln -sf /usr/bin/kubectl ${{targets.subpkgdir}}/kubectl
    test:
      environment:
        contents:
          packages:
            - kubectl-default
      pipeline:
        - name: Validates root level symlink and regular symlinks for kubectl
          runs: |
            /kubectl --help
            kubectl --help
            /usr/bin/kubectl --help

update:
  enabled: true
  github:
    identifier: open-policy-agent/gatekeeper
    strip-prefix: v
    use-tag: true
    tag-filter: v3.19.

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-crds
        - ${{package.name}}-gator
        - openssl
        - curl
        - kubectl
  pipeline:
    # AUTOGENERATED
    - runs: |
        manager --help
        gator --version | grep -q v"${{package.version}}"
    - name: gator verify constraint
      uses: test/daemon-check-output
      with:
        setup: |
          cat > constraint.yaml <<EOF
          apiVersion: constraints.gatekeeper.sh/v1beta1
          kind: K8sRequiredLabels
          metadata:
            name: ns-must-have-gk
          spec:
            match:
              kinds:
                - apiGroups: [""]
                  kinds: ["Namespace"]
            parameters:
              labels: ["gatekeeper"]
          EOF
        start: |
          gator verify constraint.yaml
        timeout: 10
        expected_output: |
          PASS
    - uses: test/kwok/cluster
    - name: Run Gatekeeper manager in KWOK
      uses: test/daemon-check-output
      with:
        setup: |
          export KUBERNETES_SERVICE_HOST="127.0.0.1"
          export KUBERNETES_SERVICE_PORT="32764"

          kubectl config view --minify --raw > /tmp/kwok-kubeconfig.yaml
          # Create dummy certificates in /tmp
          echo "Creating dummy certificates..."
          openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes -keyout /tmp/tls.key -out /tmp/tls.crt -subj "/CN=gatekeeper-webhook-service.gatekeeper-system.svc" > ${{package.name}}.log 2>&1

          kubectl create ns gatekeeper-system > ${{package.name}}.log 2>&1
          kubectl -n gatekeeper-system create secret tls gatekeeper-webhook-server-cert --cert=/tmp/tls.crt --key=/tmp/tls.key
          kubectl apply -f /crds
        start: |
          manager -operation=webhook -metrics-addr=:8080 -logtostderr -v=2 -cert-dir=/tmp -kubeconfig=/tmp/kwok-kubeconfig.yaml
        timeout: 30
        expected_output: |
          setting up cert rotation
          starting manager
          Starting metrics server
          Starting workers
        post: |
          echo "Checking health endpoint:"
          HEALTH_OUTPUT=$(curl -sf --retry 5 --retry-connrefused http://localhost:9090/healthz)
          echo "$HEALTH_OUTPUT > ${{package.name}}.log 2>&1"
          if echo "$HEALTH_OUTPUT" | grep -i "ok" > /dev/null; then
            echo "Health endpoint check PASSED"
          else
            echo "Health endpoint check FAILED"
            exit 1
          fi
