package:
  name: gcc-11
  version: 11.5.0
  epoch: 2
  description: "the GNU compiler collection - version 11"
  copyright:
    - license: GPL-3.0-or-later WITH GCC-exception-3.1
  resources:
    cpu: 16
    memory: 16Gi
  dependencies:
    runtime:
      - binutils
      - libstdc++-11-dev
      - openssf-compiler-options
      - posix-cc-wrappers

environment:
  contents:
    packages:
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - flex-dev
      - gawk
      - gcc-12-default
      - gmp-dev
      - isl-dev
      - make
      - mpc-dev
      - mpfr-dev
      - openssf-compiler-options
      - texinfo
      - wolfi-baselayout
      - zip
      - zlib-dev

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+).*
    replace: $1
    to: major-version

pipeline:
  - uses: fetch
    with:
      uri: https://ftp.gnu.org/gnu/gcc/gcc-${{package.version}}/gcc-${{package.version}}.tar.xz
      expected-sha512: 88f17d5a5e69eeb53aaf0a9bc9daab1c4e501d145b388c5485ebeb2cc36178fbb2d3e49ebef4a8c007a05e88471a06b97cf9b08870478249f77fbfa3d4abd9a8

  - name: Fix false invalid march extension crc on arm64
    uses: patch
    with:
      patches: 1be715f31605976d8e4336973d3b81c5b7cea79f.patch

  - working-directory: /home/build/build
    pipeline:
      - name: 'Configure GCC'
        runs: |
          # Check https://aws.amazon.com/ec2/instance-types/ and
          # https://cloud.google.com/compute/docs/general-purpose-machines
          # for most current CPU types on arm64 and x86 to set mtune to
          # the current generation of CPUs. Other clouds are typically
          # roughly at the same level (Azure, Oracle, IBM, Linode, etc).
          case "${{build.arch}}" in
            "aarch64")
              march=armv8-a+crc+crypto
              mtune=neoverse-v2
              CFLAGS="-mbranch-protection=standard"
              CXXFLAGS="-mbranch-protection=standard"
              ;;
            "x86_64")
              march=x86-64-v2
              mtune=sapphirerapids
              ;;
          esac
          CFLAGS="$CFLAGS" \
          CXXFLAGS="$CXXFLAGS" \
          ../configure \
            --prefix=/usr \
            --program-suffix="-11" \
            --disable-nls \
            --disable-werror \
            --with-pkgversion='Wolfi ${{package.full-version}}' \
            --with-glibc-version=2.35 \
            --enable-initfini-array \
            --disable-nls \
            --disable-multilib \
            --disable-libatomic \
            --disable-libsanitizer \
            --enable-host-shared \
            --enable-shared \
            --enable-threads \
            --enable-tls \
            --enable-default-pie \
            --enable-default-ssp \
            --with-system-zlib \
            --with-arch=$march \
            --with-tune=$mtune \
            --enable-languages=c,c++ \
            --enable-bootstrap \
            --enable-gnu-indirect-function \
            --enable-gnu-unique-object \
            --enable-cet=auto \
            --enable-link-mutex \
            --enable-version-specific-runtime-libs \
            --with-gcc-major-version-only \
            --with-linker-hash-style=gnu \
            --disable-libcc1

          make -j$(nproc)
          make -j$(nproc) install DESTDIR="${{targets.destdir}}"

  # We don't want to keep the .la files.
  - runs: |
      find ${{targets.destdir}} -name '*.la' -print -exec rm \{} \;

  # Remove libffi
  - runs: |
      rm -f "${{targets.destdir}}"/usr/lib/libffi* "${{targets.destdir}}"/usr/share/man/man3/ffi*
      find "${{targets.destdir}}" -name 'ffi*.h' | xargs rm -f

  # For some reason libgcc_s.1 is installed into /lib64/ subdir, which
  # is not in `gcc -print-search-dirs` libraries location, and thus
  # link tests fail to find libgcc_s.so linker script. Compiled
  # binaries at runtime use public libgcc.
  - name: 'Fix libgcc_s.so location'
    runs: |
      cd "${{targets.destdir}}"/usr/lib/gcc/${{host.triplet.gnu}}
      mv lib64/libgcc_s.* ${{vars.major-version}}/
      rmdir lib64/

  # Remove stray gcc-tmp (which used to be gcc-M.N.P)
  - runs: |
      rm ${{targets.destdir}}/usr/bin/${{host.triplet.gnu}}-gcc-tmp

  - name: 'Clean up documentation'
    runs: |
      rm -rf ${{targets.destdir}}/usr/share/info

  - uses: strip

subpackages:
  - name: 'gcc-11-doc'
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

  - name: 'libstdc++-11'
    pipeline:
      - runs: |
          gcclibdir=/usr/lib/gcc/${{host.triplet.gnu}}/${{vars.major-version}}

          mkdir -p "${{targets.subpkgdir}}"/$gcclibdir
          mv "${{targets.destdir}}"/$gcclibdir/*++.so.* "${{targets.subpkgdir}}"/$gcclibdir
    options:
      no-provides: true
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

  - name: 'libstdc++-11-dev'
    dependencies:
      runtime:
        # cargo-culted from gcc-12.yaml
        - libstdc++-11
    pipeline:
      - runs: |
          gcclibdir=/usr/lib/gcc/${{host.triplet.gnu}}/${{vars.major-version}}

          mkdir -p "${{targets.subpkgdir}}"/$gcclibdir
          mkdir -p "${{targets.subpkgdir}}"/$gcclibdir/include
          mkdir -p "${{targets.subpkgdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx
          mv "${{targets.destdir}}"/$gcclibdir/*++.a "${{targets.subpkgdir}}"/$gcclibdir/
          mv "${{targets.destdir}}"/$gcclibdir/libstdc++.so* "${{targets.subpkgdir}}"/$gcclibdir/
          mv "${{targets.destdir}}"/$gcclibdir/include/*++* "${{targets.subpkgdir}}"/$gcclibdir/include/
          mv "${{targets.destdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx/* \
            "${{targets.subpkgdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

  - name: 'gcc-11-default'
    description: 'Use GCC 11 as system gcc'
    dependencies:
      provides:
        - gcc=${{package.version}}
      runtime:
        - gcc-11
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin

          for i in c++ g++ gcc gcc-ar gcc-nm gcc-ranlib; do
            ln -sf "${{host.triplet.gnu}}-"$i"-11" "${{targets.subpkgdir}}"/usr/bin/"${{host.triplet.gnu}}-"$i
          done

          for i in c++ g++ cpp gcc gcc-ar gcc-nm gcc-ranlib gcov gcov-dump gcov-tool lto-dump; do
            ln -sf $i"-11" "${{targets.subpkgdir}}"/usr/bin/$i
          done
    test:
      pipeline:
        - runs: |
            c++ --version
            c++ --help
            cpp --version
            cpp --help
            g++ --version
            g++ --help
            gcc --version
            gcc --help
            gcc-ar --version
            gcc-ar --help
            gcc-nm --version
            gcc-nm --help
            gcc-ranlib --version
            gcc-ranlib --help
            gcov --version
            gcov --help
            gcov-dump --version
            gcov-dump --help
            gcov-tool --version
            gcov-tool --help
            lto-dump --version
            lto-dump --help

test:
  environment:
    contents:
      packages:
        - glibc-dev
  pipeline:
    - name: Check basic usage of top level & libexec binaries
      runs: |
        # Check C frontend compiler
        gcc-11 --version | grep ${{package.version}}
        # Check C++ frontend compiler
        g++-11 --version | grep ${{package.version}}
        # Check C empty translation unit compilation
        : > empty.c
        gcc-11 -c empty.c

        # Check C++ empty translation unit compilation
        : > empty.cpp
        g++-11 -c empty.cpp
        c++-11 --version
        c++-11 --help
        cpp-11 --version
        cpp-11 --help
        g++-11 --help
        gcc-11 --help
        gcc-ar-11 --version
        gcc-ar-11 --help
        gcc-nm-11 --version
        gcc-nm-11 --help
        gcc-ranlib-11 --version
        gcc-ranlib-11 --help
        gcov-11 --version
        gcov-11 --help
        gcov-dump-11 --version
        gcov-dump-11 --help
        gcov-tool-11 --version
        gcov-tool-11 --help
        lto-dump-11 --version
        lto-dump-11 --help
    - name: hello world c
      runs: |
        cat >hello.c <<"EOF"
        #include <stdio.h>
        int main(int argc, char* argv[]) {
            printf("hello-c");
            return 0;
        }
        EOF

        gcc-11 -o hello-c hello.c
        out=$(./hello-c)
        [ "$out" = "hello-c" ]
    - name: hello world c++
      runs: |
        cat >hello.cpp <<"EOF"
        #include <iostream>
        int main() {
            std::cout << "hello-c++";
            return 0;
        }
        EOF

        g++-11 -o hello-c++ hello.cpp
        out=$(./hello-c++)
        [ "$out" = "hello-c++" ]
    - uses: test/compiler-hardening-check
      with:
        cc: gcc-11

update:
  enabled: false
  manual: true
  release-monitor:
    identifier: 6502
