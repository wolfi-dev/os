package:
  name: gcc
  version: 14.2.0
  epoch: 8
  description: "the GNU compiler collection"
  copyright:
    - license: GPL-3.0-or-later WITH GCC-exception-3.1
  resources:
    cpu: 16
    memory: 16Gi
  dependencies:
    runtime:
      - binutils
      - libquadmath # This is a temporary workaround for issues with single-arch packages.
      - libstdc++-dev
      - openssf-compiler-options
      - posix-cc-wrappers

environment:
  contents:
    packages:
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - file
      - flex-dev
      - gawk
      - gmp-dev
      - isl-dev
      - make
      - mpc-dev
      - mpfr-dev
      - openssf-compiler-options
      - patch
      - texinfo
      - wolfi-baselayout
      - zlib-dev
      - zstd-dev

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+).*
    replace: $1
    to: major-version

pipeline:
  - uses: fetch
    with:
      uri: https://ftp.gnu.org/gnu/gcc/gcc-${{package.version}}/gcc-${{package.version}}.tar.xz
      expected-sha512: 932bdef0cda94bacedf452ab17f103c0cb511ff2cec55e9112fc0328cbf1d803b42595728ea7b200e0a057c03e85626f937012e49a7515bc5dd256b2bf4bc396

  - uses: patch
    with:
      patches: pr117739.patch

  - name: 'Set up build directory'
    runs: |
      mkdir build

  - name: 'Configure GCC'
    runs: |
      # Check https://aws.amazon.com/ec2/instance-types/ and
      # https://cloud.google.com/compute/docs/general-purpose-machines
      # for most current CPU types on arm64 and x86 to set mtune to
      # the current generation of CPUs. Other clouds are typically
      # roughly at the same level (Azure, Oracle, IBM, Linode, etc).
      case "${{build.arch}}" in
        "aarch64")
          march=armv8-a+crc+crypto
          mtune=neoverse-v2
          CFLAGS="-mbranch-protection=standard"
          CXXFLAGS="-mbranch-protection=standard"
          ;;
        "x86_64")
          march=x86-64-v2
          mtune=sapphirerapids
          ;;
      esac
      cd build

      CFLAGS="$CFLAGS" \
      CXXFLAGS="$CXXFLAGS" \
      ../configure \
        --prefix=/usr \
        --disable-nls \
        --disable-werror \
        --with-pkgversion='Wolfi ${{package.full-version}}' \
        --with-glibc-version=2.39 \
        --enable-initfini-array \
        --disable-nls \
        --disable-multilib \
        --enable-host-shared \
        --enable-host-pie \
        --enable-host-bind-now \
        --enable-shared \
        --enable-threads \
        --enable-tls \
        --enable-default-pie \
        --enable-default-ssp \
        --with-system-zlib \
        --with-arch=$march \
        --with-tune=$mtune \
        --enable-languages=c,c++,fortran,jit,go \
        --enable-bootstrap \
        --enable-gnu-indirect-function \
        --enable-gnu-unique-object \
        --enable-cet=auto \
        --enable-link-mutex \
        --with-gcc-major-version-only \
        --with-linker-hash-style=gnu

  - runs: |
      make -C build -j$(nproc)

  - runs: |
      make -C build -j$(nproc) install DESTDIR="${{targets.destdir}}"

  # Despite disable-multilib, gcc installs things into lib64
  # This breaks apk audit, as we symlink lib64 to lib.
  # https://stackoverflow.com/questions/28696199/build-gcc-from-scratch-without-lib64-directory
  - name: Fix /usr/lib64 usage
    runs: |
      mv ${{targets.destdir}}/usr/lib64/* ${{targets.destdir}}/usr/lib/
      rmdir ${{targets.destdir}}/usr/lib64

  # We don't want to keep the .la files.
  - runs: |
      find ${{targets.destdir}} -name '*.la' -print -exec rm \{} \;

  - runs: |
      chmod 755 ${{targets.destdir}}/usr/lib/libgcc_s.*

  - name: 'Clean up documentation'
    runs: |
      rm -rf ${{targets.destdir}}/usr/share/info

  - uses: strip

subpackages:
  - name: 'gcc-doc'
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

  - name: 'libstdc++'
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/*++.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libstdc++

  - name: 'libstdc++-dev'
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mkdir -p "${{targets.subpkgdir}}"/usr/include
          mkdir -p "${{targets.subpkgdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx
          mv "${{targets.destdir}}"/usr/lib/*++.a "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/lib/libstdc++.so "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/include/*++* "${{targets.subpkgdir}}"/usr/include/
          mv "${{targets.destdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx/* \
            "${{targets.subpkgdir}}"/usr/share/gcc-${{vars.major-version}}/python/libstdcxx/

  - name: "libquadmath"
    description: "128-bit math library provided by GCC"
    pipeline:
      - if: ${{build.arch}} == 'x86_64'
        runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libquadmath.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libquadmath

  - name: "libgfortran"
    description: "Fortran runtime library provided by GCC"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libgfortran.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libgfortran

  - name: "gfortran"
    description: "GNU Fortran Compiler"
    pipeline:
      - runs: |
          _libexecdir=/usr/libexec/gcc/${{host.triplet.gnu}}/${{vars.major-version}}
          _libdir=/usr/lib/gcc/${{host.triplet.gnu}}/${{vars.major-version}}

          for i in "$_libexecdir" "$_libdir" usr/lib usr/bin; do
            mkdir -p "${{targets.subpkgdir}}"/$i
          done

          mv "${{targets.destdir}}"/usr/bin/*fortran "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/lib/libgfortran* "${{targets.subpkgdir}}"/usr/lib
          [ -f "${{targets.destdir}}"/usr/lib/libquadmath* ] && mv "${{targets.destdir}}"/usr/lib/libquadmath* "${{targets.subpkgdir}}"/usr/lib

          mv "${{targets.destdir}}"/$_libdir/finclude "${{targets.subpkgdir}}"/$_libdir
          mv "${{targets.destdir}}"/$_libexecdir/f951 "${{targets.subpkgdir}}"/$_libexecdir
    dependencies:
      runtime:
        - gcc
        - libgfortran
    test:
      pipeline:
        - runs: |
            gfortran --version
            gfortran --help

  - name: "libgccjit"
    description: "GCC JIT library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libgccjit.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libgccjit

  - name: "libgccjit-dev"
    description: "GCC JIT library headers"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mkdir -p "${{targets.subpkgdir}}"/usr/include

          mv "${{targets.destdir}}"/usr/lib/libgccjit.so "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/include/libgccjit*.h "${{targets.subpkgdir}}"/usr/include/

  - name: "libssp"
    description: "GCC stack protection library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libssp* "${{targets.subpkgdir}}"/usr/lib

  - name: "libgomp"
    description: "GNU parallel programming library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libgomp.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libgomp

  - name: "libgcc"
    description: "GCC runtime library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libgcc_s.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libgcc

  - name: "libatomic"
    description: "GCC atomic library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libatomic.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libatomic

  - name: "libgo"
    description: "GCC go runtime library"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libgo.so.* "${{targets.subpkgdir}}"/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: libgo

  - name: "gcc-go"
    description: "GCC go compiler"
    dependencies:
      provides:
        - go-bootstrap=1.18
    pipeline:
      - runs: |
          _libexecdir=/usr/libexec/gcc/${{host.triplet.gnu}}/${{vars.major-version}}

          for i in "$_libexecdir" usr/lib usr/bin; do
            mkdir -p "${{targets.subpkgdir}}"/$i
          done

          mv "${{targets.destdir}}"/usr/bin/${{host.triplet.gnu}}-gccgo "${{targets.subpkgdir}}"/usr/bin/
          for i in go gofmt gccgo; do
            mv "${{targets.destdir}}"/usr/bin/$i "${{targets.subpkgdir}}"/usr/bin/
          done

          mv "${{targets.destdir}}"/usr/lib/go "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/lib/libgo.a "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/lib/libgobegin.a "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/lib/libgolibbegin.a "${{targets.subpkgdir}}"/usr/lib/
          mv "${{targets.destdir}}"/usr/lib/libgo.so "${{targets.subpkgdir}}"/usr/lib/

          for i in cgo go1; do
            mv "${{targets.destdir}}"/"$_libexecdir"/$i "${{targets.subpkgdir}}"/"$_libexecdir"/
          done
    test:
      pipeline:
        - runs: |
            gccgo --version
            gccgo --help
            go version
            go help
            gofmt --help

test:
  environment:
    contents:
      packages:
        - glibc-dev
  pipeline:
    - name: Check basic usage of top level & libexec binaries
      runs: |
        # Check C frontend compiler
        gcc --version | grep ${{package.version}}
        # Check C++ frontend compiler
        g++ --version | grep ${{package.version}}
        # Check C empty translation unit compilation
        : > empty.c
        gcc -c empty.c

        # Check C++ empty translation unit compilation
        rm -f empty.cpp
        : > empty.cpp
        g++ -c empty.cpp
        c++ --version
        c++ --help
        cpp --version
        cpp --help
        g++ --help
        gcc --help
        gcc-ar --version
        gcc-ar --help
        gcc-nm --version
        gcc-nm --help
        gcc-ranlib --version
        gcc-ranlib --help
        gcov --version
        gcov --help
        gcov-dump --version
        gcov-dump --help
        gcov-tool --version
        gcov-tool --help
        lto-dump --version
        lto-dump --help
    - name: hello world c
      runs: |
        cat >hello.c <<"EOF"
        #include <stdio.h>
        int main(int argc, char* argv[]) {
            printf("hello-c");
            return 0;
        }
        EOF

        gcc -o hello-c hello.c
        out=$(./hello-c)
        [ "$out" = "hello-c" ]
    - name: hello world c++
      runs: |
        cat >hello.cpp <<"EOF"
        #include <iostream>
        int main() {
            std::cout << "hello-c++";
            return 0;
        }
        EOF

        g++ -o hello-c++ hello.cpp
        out=$(./hello-c++)
        [ "$out" = "hello-c++" ]
    - uses: test/compiler-hardening-check
      with:
        cc: gcc
    - uses: test/ldd-check
      with:
        packages: ${{package.name}}

update:
  enabled: true
  release-monitor:
    identifier: 6502
