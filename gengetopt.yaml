package:
  name: gengetopt
  version: 2.23
  epoch: 0
  description: "A tool to write command line option parsing code for C programs"
  copyright:
    - license: GPL-3.0-or-later

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - libtool
      - texinfo

pipeline:
  - uses: fetch
    with:
      uri: https://ftp.gnu.org/gnu/gengetopt/gengetopt-${{package.version}}.tar.xz
      expected-sha256: b941aec9011864978dd7fdeb052b1943535824169d2aa2b0e7eae9ab807584ac

  - uses: autoconf/configure

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - ${{package.name}}
    description: gengetopt dev

  - name: ${{package.name}}-doc
    pipeline:
      - uses: split/manpages
      - uses: split/infodir
      - runs: |
          mv "${{targets.destdir}}/usr/share/doc" "${{targets.contextdir}}/usr/share"
    description: gengetopt manpages
    test:
      environment:
        contents:
          packages:
            - man-db
      pipeline:
        - uses: test/daemon-check-output
          with:
            start: man -w gengetopt
            timeout: 60
            expected_output: |
              /usr/share/man/man1/gengetopt.1
        - uses: test/docs

test:
  environment:
    contents:
      packages:
        - build-base
  pipeline:
    - runs: |
        gengetopt --version
        gengetopt --help
    - runs: |
        echo '
        package "sample1"
        version "2.0"

        option  "str-opt"   s "A string option"  string optional
        option  "my-opt"    m "An integer option" int optional
        option  "int-opt"   i "A required int option" int yes

        section "advanced"
            option "flag-opt" - "A flag option" flag off
            option "funct-opt" F "A function option" optional

        section "last"
            option "long-opt"  - "A long option" long optional
            option "def-opt"   - "String option with default" string default="Hello" optional
            option "enum-opt"  - "Option with values" values="foo","bar","hello","bye" default="hello" optional
            option "secret"    S "Hidden option" int optional hidden
            option "dependant" D "Depends on str-opt" int optional dependon="str-opt"
        ' > test.ggo
        gengetopt --input=test.ggo
        ls -l | grep cmdline.c
    - runs: |
        echo '

        #include <iostream>
        #include "cmdline.h"

        int main(int argc, char **argv) {
            gengetopt_args_info args_info;

            if (cmdline_parser(argc, argv, &args_info) != 0) return 1;

            std::cout << "Options passed:\n";

            if (args_info.str_opt_given)
                std::cout << "String option: " << args_info.str_opt_arg << "\n";

            if (args_info.int_opt_given)
                std::cout << "Integer option: " << args_info.int_opt_arg << "\n";

            if (args_info.flag_opt_given)
                std::cout << "Flag option: " << (args_info.flag_opt_flag ? "on" : "off") << "\n";

            if (args_info.enum_opt_given)
                std::cout << "Enum option: " << args_info.enum_opt_arg << "\n";

            cmdline_parser_free(&args_info); // Free allocated memory

            return 0;
        }
        ' > main.cc
    - runs: |
        gcc -c cmdline.c
        g++ -c main.cc
        g++ -o sample1 main.cc cmdline.c
    - uses: test/daemon-check-output
      with:
        start: ./sample1 -s "hello" --int-opt 1234
        timeout: 60
        expected_output: |
          Options passed:
          String option: hello
          Integer option: 1234
    - uses: test/ldd-check
      with:
        packages: ${{package.name}}

update:
  enabled: true
  release-monitor:
    identifier: 892
