package:
  name: geos-3.13
  version: "3.13.1"
  epoch: 2
  description: GEOS is a library providing OpenGIS and JTS spatial operations in C++.
  copyright:
    - license: LGPL-2.1-or-later
  dependencies:
    provides:
      - geos=${{package.full-version}}

var-transforms:
  - from: ${{package.version}}
    match: ^(\d+\.\d+)\.\d+$
    replace: "$1"
    to: major-minor-version

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - samurai

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/libgeos/geos
      tag: ${{package.version}}
      expected-commit: 431568d6e311e0bbfb057b4ec3d44d0d3ba3335f

  - uses: cmake/configure

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - ${{package.name}}
      provides:
        - geos-dev=${{package.full-version}}
    description: geos dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check
          with:
            packages: ${{subpkg.name}}

update:
  enabled: true
  github:
    identifier: libgeos/geos
    tag-filter: 3.13

test:
  environment:
    contents:
      packages:
        - gcc
        - glibc-dev
        - geos-${{vars.major-minor-version}}-dev
  pipeline:
    - name: Compile and run Hello World
      runs: |
        cat <<'EOF' > geos_hello_world.c
        /* geos_hello_world.c */

        #include <stdio.h>  /* for printf */
        #include <stdarg.h> /* for va_list */

        /* Only the CAPI header is required */
        #include <geos_c.h>

        /*
        * GEOS requires two message handlers to return
        * error and notice message to the calling program.
        *
        *   typedef void(* GEOSMessageHandler) (const char *fmt,...)
        *
        * Here we stub out an example that just prints the
        * messages to stdout.
        */
        static void
        geos_msg_handler(const char* fmt, ...)
        {
            va_list ap;
            va_start(ap, fmt);
            vprintf (fmt, ap);
            va_end(ap);
        }

        int main()
        {
            /* Send notice and error messages to the terminal */
            initGEOS(geos_msg_handler, geos_msg_handler);

            /* Read WKT into geometry object */
            GEOSWKTReader* reader = GEOSWKTReader_create();
            GEOSGeometry* geom_a = GEOSWKTReader_read(reader, "POINT(1 1)");

            /* Convert result to WKT */
            GEOSWKTWriter* writer = GEOSWKTWriter_create();
            char* wkt = GEOSWKTWriter_write(writer, geom_a);
            printf("Geometry: %s\n", wkt);

            /* Clean up allocated objects */
            GEOSWKTReader_destroy(reader);
            GEOSWKTWriter_destroy(writer);
            GEOSGeom_destroy(geom_a);
            GEOSFree(wkt);

            /* Clean up the global context */
            finishGEOS();
            return 0;
        }

        EOF
        cc geos_hello_world.c -o geos_hello_world -l geos_c
        ./geos_hello_world | grep -q "^Geometry: POINT (1 1)$" || exit 1
        geosop -v
        geosop --help
    - uses: test/tw/ldd-check
