From 84694efed20d5d0c04e1740416cfac7cec33b8f5 Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Wed, 16 Jul 2025 23:26:03 -0700
Subject: [PATCH 02/10] build: Build with mozjs140

---
 meson.build       | 6 +++---
 tools/run_iwyu.sh | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/meson.build b/meson.build
index 27876adf4..ab50f1d27 100644
--- a/meson.build
+++ b/meson.build
@@ -141,7 +141,7 @@ cairo = dependency('cairo', fallback: ['cairo', 'libcairo_dep'])
 cairo_gobject = dependency('cairo-gobject',
     fallback: ['cairo', 'libcairogobject_dep'])
 cairo_xlib = dependency('cairo-xlib', required: false)
-spidermonkey = dependency('mozjs-128')
+spidermonkey = dependency('mozjs-140')
 
 sysprof_capture = dependency('sysprof-capture-4',
     required: get_option('profiler'), include_type: 'system',
-- 
GitLab


From ce6dbb597a14d96168d8a78fc1027879a039b9dc Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@xry111.site>
Date: Wed, 25 Jun 2025 23:23:32 +0800
Subject: [PATCH 03/10] mozjs-140: Initialize the codeForEvalGets field for
 JSSecurityCallbacks

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1905239
---
 gjs/engine.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/gjs/engine.cpp b/gjs/engine.cpp
index 28f916cb8..41a1b1172 100644
--- a/gjs/engine.cpp
+++ b/gjs/engine.cpp
@@ -181,6 +181,7 @@ JSPrincipals* get_internal_principals() {
 
 static const JSSecurityCallbacks security_callbacks = {
     /* contentSecurityPolicyAllows = */ nullptr,
+    /* codeForEvalGets = */ nullptr,
     &ModuleLoaderPrincipals::subsumes,
 };
 
-- 
GitLab


From beaee8801904476561f1e49b6d71a35fe721534c Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@xry111.site>
Date: Wed, 25 Jun 2025 23:26:28 +0800
Subject: [PATCH 04/10] mozjs-140: Implement
 GjsContextPrivate::getHostDefinedData instead of getIncumbentGlobal

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1928412
---
 gjs/context-private.h | 2 +-
 gjs/context.cpp       | 6 ++++--
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/gjs/context-private.h b/gjs/context-private.h
index fcfd638e4..c95ba0ecb 100644
--- a/gjs/context-private.h
+++ b/gjs/context-private.h
@@ -264,7 +264,7 @@ class GjsContextPrivate : public JS::JobQueue {
 
     // Implementations of JS::JobQueue virtual functions
     GJS_JSAPI_RETURN_CONVENTION
-    JSObject* getIncumbentGlobal(JSContext* cx) override;
+    bool getHostDefinedData(JSContext*, JS::MutableHandleObject) const override;
     GJS_JSAPI_RETURN_CONVENTION
     bool enqueuePromiseJob(JSContext* cx, JS::HandleObject promise,
                            JS::HandleObject job,
diff --git a/gjs/context.cpp b/gjs/context.cpp
index d1c36083a..5dd89bdcb 100644
--- a/gjs/context.cpp
+++ b/gjs/context.cpp
@@ -1005,9 +1005,11 @@ void GjsContextPrivate::stop_draining_job_queue(void) {
     m_dispatcher.stop();
 }
 
-JSObject* GjsContextPrivate::getIncumbentGlobal(JSContext* cx) {
+bool GjsContextPrivate::getHostDefinedData(JSContext* cx,
+                                           JS::MutableHandleObject data) const {
     // This is equivalent to SpiderMonkey's behavior.
-    return JS::CurrentGlobalOrNull(cx);
+    data.set(JS::CurrentGlobalOrNull(cx));
+    return true;
 }
 
 // See engine.cpp and JS::SetJobQueue().
-- 
GitLab


From 8152d7137f0e4361b207b86f8b23e277c9f3d394 Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@xry111.site>
Date: Wed, 25 Jun 2025 23:28:19 +0800
Subject: [PATCH 05/10] mozjs-140: Use JS::EnvironmentChain for scope_chain

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1914895
---
 gjs/context.cpp | 3 ++-
 gjs/gjs_pch.hh  | 1 +
 gjs/module.cpp  | 3 ++-
 3 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/gjs/context.cpp b/gjs/context.cpp
index 5dd89bdcb..dd0d8eea6 100644
--- a/gjs/context.cpp
+++ b/gjs/context.cpp
@@ -43,6 +43,7 @@
 #include <js/CompilationAndEvaluation.h>
 #include <js/CompileOptions.h>
 #include <js/Context.h>
+#include <js/EnvironmentChain.h>
 #include <js/ErrorReport.h>
 #include <js/Exception.h>     // for StealPendingExceptionStack
 #include <js/GCAPI.h>         // for JS_GC, JS_AddExtraGCRootsTr...
@@ -1734,7 +1735,7 @@ bool GjsContextPrivate::eval_with_scope(JS::HandleObject scope_object,
     if (!buf.init(m_cx, source, source_len, JS::SourceOwnership::Borrowed))
         return false;
 
-    JS::RootedObjectVector scope_chain(m_cx);
+    JS::EnvironmentChain scope_chain{m_cx, JS::SupportUnscopables::No};
     if (!scope_chain.append(eval_obj)) {
         JS_ReportOutOfMemory(m_cx);
         return false;
diff --git a/gjs/gjs_pch.hh b/gjs/gjs_pch.hh
index 932397769..0de0234f1 100644
--- a/gjs/gjs_pch.hh
+++ b/gjs/gjs_pch.hh
@@ -66,6 +66,7 @@
 #include <js/ContextOptions.h>
 #include <js/Conversions.h>
 #include <js/Debug.h>
+#include <js/EnvironmentChain.h>
 #include <js/ErrorReport.h>
 #include <js/Exception.h>
 #include <js/GCAPI.h>
diff --git a/gjs/module.cpp b/gjs/module.cpp
index b61bc333e..b285579b5 100644
--- a/gjs/module.cpp
+++ b/gjs/module.cpp
@@ -21,6 +21,7 @@
 #include <js/CompilationAndEvaluation.h>
 #include <js/CompileOptions.h>
 #include <js/Conversions.h>
+#include <js/EnvironmentChain.h>
 #include <js/ErrorReport.h>  // for JS_ReportOutOfMemory
 #include <js/Exception.h>
 #include <js/GCVector.h>  // for RootedVector
@@ -119,7 +120,7 @@ class GjsScriptModule {
         if (!buf.init(cx, source, source_len, JS::SourceOwnership::Borrowed))
             return false;
 
-        JS::RootedObjectVector scope_chain(cx);
+        JS::EnvironmentChain scope_chain{cx, JS::SupportUnscopables::No};
         if (!scope_chain.append(module)) {
             JS_ReportOutOfMemory(cx);
             return false;
-- 
GitLab


From 2c4d1d81ed9e664253ce6218daa6fa0f0960a0b1 Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@xry111.site>
Date: Wed, 25 Jun 2025 23:29:17 +0800
Subject: [PATCH 06/10] mozjs-140: Adapt for JS::Heap::address rename to
 unsafeAddress

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1896973
---
 gi/boxed.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gi/boxed.h b/gi/boxed.h
index 8accd5dd8..b727a17e8 100644
--- a/gi/boxed.h
+++ b/gi/boxed.h
@@ -121,7 +121,7 @@ class BoxedPrototype
     // The ID is traced from the object, so it's OK to create a handle from it.
     [[nodiscard]] JS::HandleId default_constructor_name() const {
         return JS::HandleId::fromMarkedLocation(
-            m_default_constructor_name.address());
+            m_default_constructor_name.unsafeAddress());
     }
 
     // JSClass operations
-- 
GitLab


From 50232047dce77dd22c2c674a349de07ea810a3d1 Mon Sep 17 00:00:00 2001
From: Xi Ruoyao <xry111@xry111.site>
Date: Wed, 25 Jun 2025 23:30:49 +0800
Subject: [PATCH 07/10] mozjs-140: Pass const UTF8Chars& to
 UTF8CharsToNewTwoByteCharsZ

Link: https://bugzilla.mozilla.org/show_bug.cgi?id=1579248
---
 gjs/jsapi-util-string.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gjs/jsapi-util-string.cpp b/gjs/jsapi-util-string.cpp
index 227d683ed..63816872b 100644
--- a/gjs/jsapi-util-string.cpp
+++ b/gjs/jsapi-util-string.cpp
@@ -146,7 +146,7 @@ bool gjs_string_to_utf8_n(JSContext* cx, JS::HandleString str, JS::UniqueChars*
  * @param value_p a value to store the resulting string in
  */
 JSString* gjs_lossy_string_from_utf8(JSContext* cx, const char* utf8_string) {
-    JS::ConstUTF8CharsZ chars(utf8_string, strlen(utf8_string));
+    JS::UTF8Chars chars{utf8_string, strlen(utf8_string)};
     size_t outlen;
     JS::UniqueTwoByteChars twobyte_chars(
         JS::LossyUTF8CharsToNewTwoByteCharsZ(cx, chars, &outlen,
-- 
GitLab


From c61652d51fb43aa5a9a0c23ca6b138fef7d2fa38 Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Wed, 16 Jul 2025 23:24:41 -0700
Subject: [PATCH 08/10] debugger, system: Explicitly report uncatchable
 exception

In previous versions, returning false without an exception pending would
signal an uncatchable exception. Now you have to explicitly signal that
with JS::ReportUncatchableException().
---
 doc/Understanding-SpiderMonkey-code.md | 2 +-
 gjs/debugger.cpp                       | 4 +++-
 modules/system.cpp                     | 4 +++-
 3 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/gjs/debugger.cpp b/gjs/debugger.cpp
index 00d8c9d97..f97c69419 100644
--- a/gjs/debugger.cpp
+++ b/gjs/debugger.cpp
@@ -15,6 +15,7 @@
 #include <glib.h>
 
 #include <js/CallArgs.h>
+#include <js/ErrorReport.h>  // for ReportUncatchableException
 #include <js/PropertyAndElement.h>
 #include <js/PropertySpec.h>
 #include <js/Realm.h>
@@ -47,7 +48,8 @@ static bool quit(JSContext* cx, unsigned argc, JS::Value* vp) {
 
     GjsContextPrivate* gjs = GjsContextPrivate::from_cx(cx);
     gjs->exit(exitcode);
-    return false;  // without gjs_throw() == "throw uncatchable exception"
+    JS::ReportUncatchableException(cx);
+    return false;
 }
 
 GJS_JSAPI_RETURN_CONVENTION
diff --git a/modules/system.cpp b/modules/system.cpp
index 9a0027ccb..fff60a631 100644
--- a/modules/system.cpp
+++ b/modules/system.cpp
@@ -16,6 +16,7 @@
 
 #include <js/CallArgs.h>
 #include <js/Date.h>                // for ResetTimeZone
+#include <js/ErrorReport.h>         // for ReportUncatchableException
 #include <js/GCAPI.h>               // for JS_GC
 #include <js/JSON.h>
 #include <js/PropertyAndElement.h>
@@ -173,7 +174,8 @@ gjs_exit(JSContext *context,
 
     GjsContextPrivate* gjs = GjsContextPrivate::from_cx(context);
     gjs->exit(ecode);
-    return false;  /* without gjs_throw() == "throw uncatchable exception" */
+    JS::ReportUncatchableException(context);
+    return false;
 }
 
 static bool gjs_clear_date_caches(JSContext*, unsigned argc, JS::Value* vp) {
-- 
GitLab


From 472e4c5a5bac51343488ccbd46982b5241de8344 Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Wed, 16 Jul 2025 23:25:33 -0700
Subject: [PATCH 09/10] tests: Update error messages

SpiderMonkey improved their "___ is null" error message to be more
descriptive. The old message appeared a few times in the debugger tests'
golden output files. Update to the new message.
---
 .../debugger/sourcemap-inlined-module.debugger.output           | 2 +-
 installed-tests/debugger/sourcemap-inlined.debugger.output      | 2 +-
 .../debugger/sourcemap-separate-module.debugger.output          | 2 +-
 installed-tests/debugger/sourcemap-separate.debugger.output     | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/installed-tests/debugger/sourcemap-inlined-module.debugger.output b/installed-tests/debugger/sourcemap-inlined-module.debugger.output
index 473f72c1d..a60be0420 100644
--- a/installed-tests/debugger/sourcemap-inlined-module.debugger.output
+++ b/installed-tests/debugger/sourcemap-inlined-module.debugger.output
@@ -21,7 +21,7 @@ Unwinding due to exception. (Type 'c' to continue unwinding.)
    2	    return num[1].n.toFixed(1);
 Exception value is:
 $1 = [object TypeError]
-TypeError: num[1].n is null
+TypeError: can't access property "toFixed", num[1].n is null
 db> list
    1	interface SuperFancyNumber {
    2	    n: number;
diff --git a/installed-tests/debugger/sourcemap-inlined.debugger.output b/installed-tests/debugger/sourcemap-inlined.debugger.output
index 22da27566..5e49d98e5 100644
--- a/installed-tests/debugger/sourcemap-inlined.debugger.output
+++ b/installed-tests/debugger/sourcemap-inlined.debugger.output
@@ -22,7 +22,7 @@ Unwinding due to exception. (Type 'c' to continue unwinding.)
    2	var b = a.n.toString(42);
 Exception value is:
 $1 = [object TypeError]
-TypeError: a.n is null
+TypeError: can't access property "toString", a.n is null
 db> list
    1	interface FancyNumber {
    2	    n: number;
diff --git a/installed-tests/debugger/sourcemap-separate-module.debugger.output b/installed-tests/debugger/sourcemap-separate-module.debugger.output
index a4d5e88b4..5f429ecd7 100644
--- a/installed-tests/debugger/sourcemap-separate-module.debugger.output
+++ b/installed-tests/debugger/sourcemap-separate-module.debugger.output
@@ -21,7 +21,7 @@ Unwinding due to exception. (Type 'c' to continue unwinding.)
    2	    return num[1].n.toFixed(1);
 Exception value is:
 $1 = [object TypeError]
-TypeError: num[1].n is null
+TypeError: can't access property "toFixed", num[1].n is null
 db> list
    1	interface SuperFancyNumber {
    2	    n: number;
diff --git a/installed-tests/debugger/sourcemap-separate.debugger.output b/installed-tests/debugger/sourcemap-separate.debugger.output
index ce4982da6..52b177b53 100644
--- a/installed-tests/debugger/sourcemap-separate.debugger.output
+++ b/installed-tests/debugger/sourcemap-separate.debugger.output
@@ -22,7 +22,7 @@ Unwinding due to exception. (Type 'c' to continue unwinding.)
    2	var b = a.n.toString(42);
 Exception value is:
 $1 = [object TypeError]
-TypeError: a.n is null
+TypeError: can't access property "toString", a.n is null
 db> list
    1	interface FancyNumber {
    2	    n: number;
-- 
GitLab


From 17e60aa0171d991175ac3449446b7bf20f750402 Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Wed, 16 Jul 2025 23:38:07 -0700
Subject: [PATCH 10/10] docs: Update docs for mozjs140

---
 README.MSVC.md   | 38 +++++++++++++++++++-------------------
 doc/Hacking.md   | 14 +++++++-------
 gjs/profiler.cpp |  8 ++++----
 3 files changed, 30 insertions(+), 30 deletions(-)

diff --git a/gjs/profiler.cpp b/gjs/profiler.cpp
index b543dfbac..f509dfbb8 100644
--- a/gjs/profiler.cpp
+++ b/gjs/profiler.cpp
@@ -878,7 +878,7 @@ void gjs_profiler_set_fd(GjsProfiler* self, int fd) {
 void _gjs_profiler_set_finalize_status(GjsProfiler* self,
                                        JSFinalizeStatus status) {
 #ifdef ENABLE_PROFILER
-    // Implementation note for mozjs-128:
+    // Implementation note for mozjs-140:
     //
     // Sweeping happens in three phases:
     // 1st phase (JSFINALIZE_GROUP_PREPARE): the collector prepares to sweep a
@@ -886,9 +886,9 @@ void _gjs_profiler_set_finalize_status(GjsProfiler* self,
     // unmarked things have been removed, but no GC thing has been swept. 3rd
     // Phase (JSFINALIZE_GROUP_END): all dead GC things for a group of zones
     // have been swept. The above repeats for each sweep group.
-    // JSFINALIZE_COLLECTION_END occurs at the end of all GC. (see jsgc.cpp,
-    // BeginSweepPhase/BeginSweepingZoneGroup and SweepPhase, all called from
-    // IncrementalCollectSlice).
+    // JSFINALIZE_COLLECTION_END occurs at the end of all GC. (see
+    // js/src/gc/GC.cpp, GCRuntime::beginSweepPhase, beginSweepingSweepGroup,
+    // and endSweepPhase, all called from incrementalSlice).
     //
     // Incremental GC muddies the waters, because BeginSweepPhase is always run
     // to entirety, but SweepPhase can be run incrementally and mixed with JS
-- 
GitLab
