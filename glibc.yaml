package:
  name: glibc
  version: "2.42"
  # Every glibc update causes build disruption; always announce on #eng-psa
  epoch: 0
  description: "the GNU C library"
  copyright:
    - license: LGPL-2.1-or-later
  resources:
    cpu: 16
    memory: 16Gi
  dependencies:
    runtime:
      # This prevents Alpine users from being able to `apk add` any Wolfi packages
      # that depend on glibc, if they happen to have configured both repositories.
      # Only apk-tools respects this constraint; apko-based tools don't respect
      # the ! constraint.
      - "!musl"
      - glibc-locale-posix
      - libgcc # Needed for some pthread functionality
      - merged-lib
      - merged-sbin
      - merged-usrsbin
      - wolfi-baselayout

environment:
  contents:
    packages:
      - bash # needed by `make check`
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils # needed by `make check`
      - flex
      - gawk
      - grep
      - openssf-compiler-options
      - python3
      - rdfind
      - texinfo
      - wolfi-baselayout
      - zlib
  # glibc manages FORTIFY_SOURCE on per-file basis
  environment:
    CPPFLAGS: ""

pipeline:
  - uses: git-checkout
    with:
      expected-commit: d2097651cc57834dbfcaa102ddfacae0d86cfb66
      # sourceware.org often has clone issues, switch to mirror
      # recommended at https://sourceware.org/glibc/wiki/GlibcGit
      repository: https://repo.or.cz/glibc.git
      tag: glibc-${{package.version}}

  - uses: patch
    with:
      patches: Disable-AVX512VL.patch

  - name: "Set up build directory"
    runs: |
      mkdir build

  - name: "Configure glibc"
    runs: |
      cd build
      echo "user-defined-trusted-dirs=/usr/local/lib:/usr/local/lib64:/usr/lib:/usr/lib64:/lib:/lib64" >> configparms.base
      echo "slibdir=/usr/lib" >> configparms.base
      echo "libdir=/usr/lib" >> configparms.base
      echo "rootsbindir=/usr/bin" >> configparms.base
      echo "build-programs=no" > configparms
      # If x86_64, set to /lib64, /lib for aarch64
      if [ ${{build.arch}} == "x86_64" ]; then
        echo "rtlddir=/lib64" >> configparms.base
      else
        echo "rtlddir=/lib" >> configparms.base
      fi
      cat configparms.base >> configparms

      ../configure \
        --prefix=/usr \
        --libdir=/usr/lib \
        --datadir=/usr/share \
        --includedir=/usr/include \
        --sbindir=/usr/bin \
        --host=${{host.triplet.gnu}} \
        --build=${{host.triplet.gnu}} \
        --enable-bind-now \
        --enable-fortify-source \
        --enable-stackguard-randomization \
        --enable-stack-protector=strong \
        --enable-cet \
        --with-pkgversion="glibc-${{package.full-version}}" \
        --disable-werror \
        --disable-crypt \
        --enable-kernel=4.9

  - runs: |
      make -C build -j$(nproc)

  - runs: |
      # Build the programs with fortify
      echo "build-programs=yes" > build/configparms
      cat build/configparms.base >> build/configparms
      make -C build -j$(nproc)

  - runs: |
      make -C build -j$(nproc) install DESTDIR="${{targets.destdir}}"

  - name: "Run the glibc testsuite, not blocking on failures for now"
    runs: |
      # For now we run the glibc testsuite for manual investigation.
      # Later on we'll establish a baseline and make regressions fail the build.
      make -C build -j$(nproc) check || true

  - name: "Set up ldconfig"
    runs: |
      mkdir -p "${{targets.destdir}}"/etc
      cp vendor/ld.so.conf "${{targets.destdir}}"/etc
      mkdir -p "${{targets.destdir}}"/etc/ld.so.conf.d
      cp vendor/ld.so.conf.d/*.conf "${{targets.destdir}}"/etc/ld.so.conf.d
      mkdir -p ${{targets.destdir}}/etc/apk/commit_hooks.d
      cp ldconfig-commit.sh -p ${{targets.destdir}}/etc/apk/commit_hooks.d/

  - name: "Clean up /etc/ld.so.cache"
    runs: |
      # Having a package own a file that will be different in most
      # every image poisons our layering mechanism
      rm ${{targets.destdir}}/etc/ld.so.cache

  - name: "Clean up documentation"
    runs: |
      rm -rf ${{targets.destdir}}/usr/share/info

  - name: "Generate and install locale data"
    runs: |
      make -C build -j$(nproc) localedata/install-locale-files DESTDIR="${{targets.destdir}}"

  - name: 'Usrmerge /usr/sbin' # Some binaries ignore --sbindir for some reason
    runs: |
      mkdir -p "${{targets.destdir}}"/usr/bin
      mv "${{targets.destdir}}"/usr/sbin/* "${{targets.destdir}}"/usr/bin
      rmdir "${{targets.destdir}}"/usr/sbin

  - uses: strip

data:
  # This is the list of the most popular locale which get their own subpackages.
  # All the rest ends up in the glibc-locale-extra package.
  # NOTE: keep in sync with exclusion tests for glibc-locale-extra package
  - name: locales-main
    items:
      ca: Catalan
      de: German
      en: English
      es: Spanish
      fr: French

subpackages:
  - name: "glibc-testresults"
    description: "Test results and logs from the current GLIBC build - for Wolfi development only"
    pipeline:
      - runs: |
          resultdir="${{targets.subpkgdir}}"/usr/share/glibc-testresults
          mkdir -p $resultdir
          cd build/
          # Move all the test results and log files
          find . \( -name "*.test-result" -o -name "*.out" \) \
            -exec sh -c 'dir=$(dirname $1); mkdir -p $2/$dir; cp $1 $2/$dir' _ {} $resultdir \;
          cp tests.sum $resultdir
    dependencies:
      runtime:
        - merged-lib
        - wolfi-baselayout

  - name: "ld-linux"
    description: "the GLIBC ELF interpreter"
    pipeline:
      - assertions:
          required-steps: 1
        pipeline:
          - if: ${{build.arch}} == 'aarch64'
            runs: |
              mkdir -p "${{targets.subpkgdir}}"/usr/lib
              mv "${{targets.destdir}}"/lib/ld-linux-aarch64.so.1 "${{targets.subpkgdir}}"/usr/lib/
              rmdir "${{targets.destdir}}"/lib
          - if: ${{build.arch}} == 'x86_64'
            runs: |
              mkdir -p "${{targets.subpkgdir}}"/usr/lib
              mv "${{targets.destdir}}"/lib64/ld-linux-x86-64.so.2 "${{targets.subpkgdir}}"/usr/lib/
              rmdir "${{targets.destdir}}"/lib64
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/etc
          mv "${{targets.destdir}}"/etc/ld.so.* "${{targets.subpkgdir}}"/etc/
    dependencies:
      provider-priority: 10
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout
    test:
      environment:
        contents:
          packages:
            - gcc
            - glibc-dev
      pipeline:
        - name: Check lib64 and apk audit locations of ld-linux
          runs: |
            ld_linux_found=false
            for f in /lib64/ld-linux-*; do
              [ -e "$f" ] && ld_linux_found=true
            done
            [ "$ld_linux_found" = "true" ]
            [ -z "$(apk audit --full | grep ld-linux)" ]
        - name: Test usage of /etc/ld.so.conf.d/ snippets
          runs: |
            tmpdir="$(mktemp -d)"
            tmplibdir="$(mktemp -d)"
            ldcfg="/etc/ld.so.conf.d/test-snippet.conf"
            cleanup() {
              rm -f "$ldcfg"
              rm -rf "$tmpdir" "$tmplibdir"
            }
            trap cleanup EXIT
            cat > "$tmpdir/ldsoconfdotd.c" << EOF
            #include <stdio.h>

            void ldsoconfdotd_test(void) {
              printf("Calling %s\n", __func__);
            }
            EOF
            cat > "$tmpdir/test.c" << EOF
            void ldsoconfdotd_test(void);
            int main(void) {
              ldsoconfdotd_test();
            }
            EOF
            gcc -c -fpic "$tmpdir/ldsoconfdotd.c" -o "$tmpdir/ldsoconfdotd.o"
            gcc -shared -o "$tmplibdir/libldsoconfdotd.so" \
              "$tmpdir/ldsoconfdotd.o"
            echo "$tmplibdir" > "$ldcfg"
            ldconfig
            LIBRARY_PATH="$tmplibdir" \
              gcc "$tmpdir/test.c" -o "$tmpdir/test" -lldsoconfdotd
            "$tmpdir"/test
        - name: Confirm that we do not ship/own /etc/ld.so.cache
          runs: |
            if apk info -L "${{context.name}}" | grep '^etc/ld\.so\.cache$'; then
              exit 1
            fi
            exit 0

  - name: "glibc-dev"
    description: "GLIBC development headers"
    pipeline:
      - uses: split/dev
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          [ -f "${{targets.destdir}}"/usr/lib/libc.so ] && mv "${{targets.destdir}}"/usr/lib/libc.so "${{targets.subpkgdir}}"/usr/lib/
          [ -f "${{targets.destdir}}"/usr/lib/libm.so ] && mv "${{targets.destdir}}"/usr/lib/libm.so "${{targets.subpkgdir}}"/usr/lib/
    dependencies:
      runtime:
        - libxcrypt-dev
        - linux-headers
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "glibc-iconv"
    description: "GLIBC iconv tables"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/gconv "${{targets.subpkgdir}}"/usr/lib/

          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/iconvconfig "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            iconvconfig --version
            iconvconfig --help
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "glibc-locales"
    description: "GLIBC locale data"
    pipeline:
      - uses: split/locales
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/i18n "${{targets.subpkgdir}}"/usr/share/i18n
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "tzutils"
    description: "Timezone utilities"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/tzselect "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/zdump "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/zic "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            tzselect --version
            tzselect --help
            zdump --version
            zdump --help
            zic --version
            zic --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "posix-libc-utils"
    description: "POSIX XCU utilities included with the C library"
    dependencies:
      runtime:
        - bash
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/gencat "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/getconf "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/getent "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/iconv "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/ldd "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/locale "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/pldd "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/libexec "${{targets.subpkgdir}}"/usr
    test:
      pipeline:
        - runs: |
            gencat --version
            gencat --help
            getconf --version
            getconf --help
            getent --version
            getent --help
            iconv --version
            iconv --help
            ldd --version
            ldd --help
            locale --version
            locale --help
            pldd --version
            pldd --help

  - name: "localedef"
    description: "Tool for defining GLIBC locales"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/localedef "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            localedef --version
            localedef --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "sotruss"
    description: "Shared object tracing tool"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/audit
          mkdir -p "${{targets.subpkgdir}}"/usr/bin

          mv "${{targets.destdir}}"/usr/bin/sotruss "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/lib/audit/* "${{targets.subpkgdir}}"/usr/lib/audit/
    test:
      pipeline:
        - runs: |
            sotruss --version
            sotruss --help
        - uses: test/tw/ldd-check
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "nscd"
    description: "NSS caching daemon"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/nscd "${{targets.subpkgdir}}"/usr/bin/
    test:
      pipeline:
        - runs: |
            nscd --version
            nscd --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "nss-db"
    description: "NSS module for database lookups"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mkdir -p "${{targets.subpkgdir}}"/var

          mv "${{targets.destdir}}"/usr/bin/makedb "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/lib/libnss_db.so.2 "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/var/db "${{targets.subpkgdir}}"/var
    test:
      pipeline:
        - runs: |
            makedb --version
            makedb --help
        - uses: test/tw/ldd-check
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "nss-hesiod"
    description: "NSS module for hesiod lookups"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libnss_hesiod.so.2 "${{targets.subpkgdir}}"/usr/lib
    test:
      pipeline:
        - uses: test/tw/ldd-check
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "pcprofiledump"
    description: "PC profiling tool"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib
          mv "${{targets.destdir}}"/usr/lib/libpcprofile.so "${{targets.subpkgdir}}"/usr/lib

          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/pcprofiledump "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            pcprofiledump --version
            pcprofiledump --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "glibc-tracing"
    description: "GLIBC tracing and profiling utilities"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/mtrace "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/xtrace "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/sprof "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            sprof --version
            sprof --help
            xtrace --version
            xtrace --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "sln"
    description: "Staticly-linked symbolic link tool"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/sln "${{targets.subpkgdir}}"/usr/bin
    test:
      pipeline:
        - runs: |
            sln --version
            sln --help
    dependencies:
      runtime:
        - glibc=${{package.full-version}}
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "libcrypt1"
    description: "Password hashing library included with glibc"
    dependencies:
      provider-priority: 10
      provides:
        - so:libcrypt.so.1=1
      runtime:
        - glibc=${{package.full-version}}
        - libxcrypt
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - name: "glibc-locale-posix"
    description: "POSIX locale data for glibc"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/locale
          mv "${{targets.destdir}}"/usr/lib/locale/C.utf8 "${{targets.subpkgdir}}"/usr/lib/locale/
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout

  - range: locales-main
    name: "glibc-locale-${{range.key}}"
    description: "${{range.value}} locale data for glibc"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/locale
          [ -d "${{targets.destdir}}"/usr/lib/locale/${{range.key}} ] \
            || mv "${{targets.destdir}}"/usr/lib/locale/${{range.key}}_* "${{targets.subpkgdir}}"/usr/lib/locale/
          [ -d "${{targets.destdir}}"/usr/lib/locale/${{range.key}} ] \
            && mv "${{targets.destdir}}"/usr/lib/locale/${{range.key}} "${{targets.subpkgdir}}"/usr/lib/locale/

          # Some locale can be ~18x as big as it should be due to duplicate files.
          # rdfind replaces redundant files with hardlinks.
          rdfind -makehardlinks true "${{targets.subpkgdir}}"/usr/lib/locale/
    dependencies:
      runtime:
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout
    test:
      environment:
        contents:
          packages:
            - posix-libc-utils
      pipeline:
        - runs: |
            set +x
            pkg=glibc-locale-${{range.key}}
            out=$(locale --all-locales) || {
              echo "FAIL: locale --all-locales failed for $pkg"
              exit 1
            }
            matches=$(echo "$out" | grep "^${{range.key}}") || {
              echo "FAIL: $pkg did not install any locales per 'locale --all-locales'"
              echo "$ locale --all-locales"
              echo "$out"
              exit 1
            }
            echo "PASS: $pkg shipped" $matches

  - name: "glibc-locale-extra"
    description: "All other extra locale data for glibc"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/locale
          mv "${{targets.destdir}}"/usr/lib/locale/* "${{targets.subpkgdir}}"/usr/lib/locale/

          # Some locale can be ~18x as big as it should be due to duplicate files.
          # rdfind replaces redundant files with hardlinks.
          rdfind -makehardlinks true "${{targets.subpkgdir}}"/usr/lib/locale/
    dependencies:
      runtime:
        - merged-sbin
        - merged-usrsbin
        - wolfi-baselayout
      provides:
    test:
      environment:
        contents:
          packages:
            - posix-libc-utils
      pipeline:
        - runs: |
            set +x
            pkg=glibc-locale-extra
            out=$(locale --all-locales) || {
              echo "FAIL: locale --all-locales failed for $pkg"
              exit 1
            }
            # NOTE: the list of locales to check here needs to be kept in sync
            # with the locales-main range
            for lang in ca de en es fr; do
              matches=$(echo "$out" | grep "^$lang") && {
                echo "FAIL: $pkg installs one of the stand-alone-package locales"
                echo "$ locale --all-locales"
                echo "$out"
                exit 1
              }
            done
            echo "PASS: $pkg correctly does not ship main locales"

  # Similar to https://packages.debian.org/bookworm/libc-bin
  - name: "libc-bin"
    description: "GNU C Library: Binaries"
    dependencies:
      runtime:
        - localedef
        - merged-lib
        - merged-sbin
        - merged-usrsbin
        - posix-libc-utils
        - tzutils
        - wolfi-baselayout
    checks:
      disabled:
        - empty

test:
  environment:
    contents:
      packages:
        - gcc
        - glibc-dev
  pipeline:
    - runs: |
        # Ensure locales are excluded from glibc
        cd /usr/lib/locale
        locales=$(ls | grep -v C.utf8 || true)

        if [[ -n "${locales}" ]]; then
          for locale in ${locales}; do
            echo "Error: locale $locale found in main glibc package"
          done
          exit 1
        fi
        ldconfig --version
        ldconfig --help
        ld.so --version
        ld.so --help
    - uses: test/tw/ldd-check
    - name: Confirm that we're still compatible with current gcc
      runs: |
        # This was a problem due to some legacy fix-includes in gcc that interfered
        # with new glibc private symbols.  Let's make sure that doesn't break again
        cat <<EOF >gcc_test.cc
        #include <thread>
        #include <future>
        int main(void)
        {
          return 0;
        }
        EOF
        g++ -o test_build gcc_test.cc
    - name: Verify apk bootstrap works
      runs: |
        # Verify that glibc + bash-binsh bootstrap works
        mkdir -p /tmp/glibc-bash/etc/apk
        cp -r /etc/apk/repositories /etc/apk/keys /tmp/glibc-bash/etc/apk
        apk add --initdb --root /tmp/glibc-bash glibc bash-binsh &> bootstrap.log || true
        cat bootstrap.log
        grep -e ERROR: bootstrap.log | grep -v 'updating directory permissions' >errors.log || true
        grep -e ERROR: errors.log && exit 1

        # Verify that glibc + busybox bootstrap works
        mkdir -p /tmp/glibc-busybox/etc/apk
        cp -r /etc/apk/repositories /etc/apk/keys /tmp/glibc-busybox/etc/apk
        apk add --initdb --root /tmp/glibc-busybox glibc busybox &> bootstrap.log || true
        cat bootstrap.log
        grep -e ERROR: bootstrap.log | grep -v 'updating directory permissions' > errors.log || true
        grep -e ERROR: errors.log && exit 1
    - name: Verify that frame unwinding doesn't crash (when glibc is compiled with hardening)
      runs: |
        # This is the minimal reproducer of the glibc breakage we
        # experienced when hardening was enabled.  See
        # https://github.com/wolfi-dev/os/pull/53351#issuecomment-2946134881
        # for more details.
        cat > glibc-hardening-test.c << _EOF_
        #include <execinfo.h>

        int
        main(int argc, char *argv[])
        {
          void *a[4096];
          backtrace (a, 100);
          return 0;
        }
        _EOF_
        gcc glibc-hardening-test.c -o glibc-hardening-test
        # Run the program 1000 times to make sure that unwinding works without problems.
        for i in $(seq 1000); do ./glibc-hardening-test; done

update:
  enabled: true
  release-monitor:
    identifier: 5401
