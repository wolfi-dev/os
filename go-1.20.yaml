package:
  name: go-1.20
  version: 1.20.14
  epoch: 8
  description: "the Go programming language"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - go=1.20.999 # This should be go=${{package.version}}-${{package.epoch}}
    runtime:
      - bash
      - build-base

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - gcc-go

pipeline:
  - uses: fetch
    with:
      uri: https://go.dev/dl/go${{package.version}}.src.tar.gz
      expected-sha256: 1aef321a0e3e38b7e91d2d7eb64040666cabdcc77d383de3c9522d0d69b67f4e
      strip-components: 0

  - uses: patch
    with:
      patches: use-gnu-ld-arm64.patch

  - runs: |
      cd go/src
      ./make.bash -v

  - runs: |
      cd go

      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/go/bin "${{targets.destdir}}"/usr/share/doc/go

      for bin in go gofmt; do
        install -Dm755 bin/$bin "${{targets.destdir}}"/usr/lib/go/bin/$bin
        ln -s /usr/lib/go/bin/$bin "${{targets.destdir}}"/usr/bin/
      done

      cp -a pkg lib "${{targets.destdir}}"/usr/lib/go/
      cp -r doc misc "${{targets.destdir}}"/usr/share/doc/go
      cp -a src "${{targets.destdir}}"/usr/lib/go/

      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/obj
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/*/cmd
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/go_bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/src/cmd/dist/dist

      # Remove tests from /usr/lib/go/src, not needed at runtime
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*_test.go" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type d -a -name "testdata" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.rc" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.bat" \) \
        -exec rm -rf \{\} \+

  - uses: strip

subpackages:
  - name: "go-1.20-doc"
    description: "go documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  shared: true
  github:
    identifier: golang/go
    strip-prefix: go
    tag-filter: go1.20
    use-tag: true

test:
  environment:
    contents:
      packages:
        - build-base
  pipeline:
    - name: Test Go installation
      runs: |
        # Write a simple "Hello World" Go program
        cat <<EOF > hello.go
        package main
        import "fmt"
        func main() {
            fmt.Println("Hello World")
        }
        EOF

        # Format the Go program
        go fmt hello.go

        # Run the Go program and check the output
        go run hello.go | grep "Hello World"
        go version
        go help
        gofmt --help
    - name: Test Go cross-compilation
      runs: |
        # Build the Go program for a different OS/architecture
        GOOS=freebsd GOARCH=amd64 go build hello.go
    - name: Test Go with cgo
      runs: |
        # Write a Go program that uses cgo
        cat <<EOF > hello_cgo.go
        package main
        /*
        #include <stdlib.h>
        #include <stdio.h>
        void hello() {
            printf("%s\\n", "Hello from cgo!");
            fflush(stdout);
        }
        */
        import "C"
        func main() {
            C.hello()
        }
        EOF

        # Run the Go program with cgo and check the output
        go run hello_cgo.go | grep "Hello from cgo!"
    - name: Test using external linker
    - runs: |
        # We need to trick Golang into thinking that we're building a binary
        # that will be used for linking later.  This way, it will force the use
        # of an external linker.  The way to do this is to use the "-buildmode=plugin"
        # option
        cat > external_linker.go << _EOF_
        package main
        func main() {
            return
        }
        _EOF_
        go build -buildmode=plugin external_linker.go
    - name: Test building a regular project
    - runs: |
        go install github.com/junegunn/fzf@v0.64.0
