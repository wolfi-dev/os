From bccdae45d85882dc2fb2fafa80b8b2997f561fe3 Mon Sep 17 00:00:00 2001
From: Scott Moser <smoser@brickies.net>
Date: Wed, 13 Nov 2024 14:01:30 -0500
Subject: [PATCH] Change default telemetry setting from 'local' to 'off'

Go 1.23 introduced a telemetry feature that collects local audit data
about the Go toolchain, storing it by default in
$HOME/.config/go/telemetry. While this data is not sent externally by
default, the local storage path can trigger security alerts in tools
like Falco, as it writes to a sensitive location under /root.

The behavior can be disabled with 'go telemetry off', which writes
to the config file above, but that means the user needs to do so
before calling 'go' in any other manner.  Doing so for a container
is non-obvious.  We could build /root/.config/go/telemetry into
a 'go' image, but that would still provide a problem for any user
other than uid 0.

There is no mechanism to change the behavior "system wide" or an
environment variable that can set the value.

See https://github.com/golang/go/issues/68960 and
https://github.com/golang/go/issues/69113. The second one requests that
env GOTELEMETRY=off would disable telemetry. That would be easy for us
to utilize but it was rejected upstream.

Instead, we just change the default value returned if there is no
.config/go/telemetry/mode file present.
---
 src/cmd/vendor/golang.org/x/telemetry/internal/telemetry/dir.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/telemetry/dir.go b/src/cmd/vendor/golang.org/x/telemetry/internal/telemetry/dir.go
index dd7a63c816..cc4d08f651 100644
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/telemetry/dir.go
+++ b/src/cmd/vendor/golang.org/x/telemetry/internal/telemetry/dir.go
@@ -127,7 +127,7 @@ func (d Dir) Mode() (string, time.Time) {
 	}
 	data, err := os.ReadFile(d.modefile)
 	if err != nil {
-		return "local", time.Time{} // default
+		return "off", time.Time{} // default
 	}
 	mode := string(data)
 	mode = strings.TrimSpace(mode)
-- 
2.43.0

