package:
  name: grafana-operator
  version: "5.19.4"
  epoch: 0
  description: An operator for Grafana that installs and manages Grafana instances, Dashboards and Datasources through Kubernetes/OpenShift CRs
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - merged-usrsbin
      - wolfi-baselayout

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/grafana-operator/grafana-operator
      tag: v${{package.version}}
      expected-commit: 60b98bb9c7a6c4d734ace12fcdfffe4b39052e60

  - uses: go/build
    with:
      modroot: .
      packages: .
      output: grafana-operator

  - uses: strip

update:
  enabled: true
  github:
    identifier: grafana-operator/grafana-operator
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - bash
        - curl
        - jq
        - git
        - kubectl
        - kustomize
  pipeline:
    - name: "Verify help command output"
      runs: |
        grafana-operator --help
        grafana-operator -h
    - uses: test/kwok/cluster
    - name: "Fetch and deploy operator manifests"
      runs: |
        git clone --depth=1 --branch v${{package.version}} https://github.com/grafana-operator/grafana-operator.git
        kubectl create -f grafana-operator/deploy/kustomize/base/crds.yaml
        # Give k8s some time to fully apply the CRDs
        sleep 5
    - name: "Start and verify operator"
      uses: test/daemon-check-output
      with:
        setup: |
          kubectl create namespace grafana-operator-system
        start: |
          grafana-operator manager \
            --metrics-bind-address=:8080 \
            --health-probe-bind-address=:8081 \
            --leader-elect=false \
            --enable-webhooks=false
        timeout: 30
        expected_output: |
          starting server
          Starting Controller
          Starting workers
        # exception for a known limitation with kwok
        error_strings: |
          controller-runtime.source.EventHandler
        post: |
          # Verify metrics endpoint is working
          curl -s http://localhost:8080/metrics

          # Verify health endpoint
          curl -s http://localhost:8081/healthz
