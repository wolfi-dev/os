package:
  name: ipfs
  version: "0.33.2"
  epoch: 0
  description: An IPFS implementation in Go
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - "posix-libc-utils" # "getent" required
    provides:
      - kubo

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - fuse3
      - go
      - openssl # significantly reduces background CPU usage, but requires CGO and gcc

pipeline:
  - uses: git-checkout
    with:
      expected-commit: ad1868a424dd7a564ab3c023f4d35a2e6fd696aa
      repository: https://github.com/ipfs/kubo
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        github.com/golang/glog@v1.2.4

  - runs: |
      CGO_ENABLED=1 GOOS=$(go env GOOS) GOARCH=$(go env GOARCH) GOFLAGS=-buildvcs=false make build GOTAGS=openssl
      install -m755 -D ./cmd/ipfs/ipfs "${{targets.destdir}}"/usr/bin/ipfs

  - runs: |
      # create fs-repo directory
      mkdir -p /data/ipfs
      # create mount points
      mkdir /ipfs /ipns

  - uses: strip

update:
  enabled: true
  github:
    identifier: ipfs/kubo
    strip-prefix: v

test:
  pipeline:
    - name: Test IPFS installation
      runs: |
        ipfs --version
        ipfs --help
    - name: Test IPFS repository initialization
      runs: |
        ipfs init
    - name: Test adding and retrieving a file
      runs: |
        echo "Hello, IPFS" > tmpfile.txt
        FILE_HASH=$(ipfs add -q tmpfile.txt)
        ipfs cat $FILE_HASH > retrieved.txt
        if diff tmpfile.txt retrieved.txt; then
          echo "File addition and retrieval successful."
        else
          echo "File addition and retrieval failed."
          exit 1
        fi
    - name: Test name publishing and resolving
      runs: |
        echo "Testing name publishing and resolving..."
        PEER_ID=$(ipfs id -f="<id>")
        FILE_HASH=$(ipfs add -q tmpfile.txt) # Assuming reuse of previously added file
        ipfs name publish --allow-offline /ipfs/$FILE_HASH
        ipfs name resolve $PEER_ID
        echo "Name publishing and resolving successful."
    - name: Test starting the IPFS daemon
      runs: |
        echo "Testing starting the IPFS daemon..."
        ipfs daemon --init &
        DAEMON_PID=$!
        echo "IPFS daemon started with PID $DAEMON_PID."
        kill $DAEMON_PID
