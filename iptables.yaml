package:
  name: iptables
  version: 1.8.11
  epoch: 27
  description: Linux kernel firewall, NAT and packet mangling tools
  copyright:
    - license: GPL-2.0-or-later
  dependencies:
    replaces:
      - ip6tables
    runtime:
      - merged-sbin
      - wolfi-baselayout
      - xtables

vars:
  iptables-cmds: |
    arptables arptables-restore arptables-save arptables-translate \
    arptables-nft arptables-nft-restore arptables-nft-save \
    ebtables ebtables-restore ebtables-save ebtables-translate \
    ebtables-nft ebtables-nft-restore ebtables-nft-save \
    iptables iptables-restore iptables-save iptables-xml \
    iptables-translate iptables-restore-translate \
    iptables-legacy iptables-legacy-restore iptables-legacy-save \
    iptables-nft iptables-nft-restore iptables-nft-save \
    ip6tables ip6tables-restore ip6tables-save \
    ip6tables-translate ip6tables-restore-translate \
    ip6tables-nft ip6tables-nft-restore ip6tables-nft-save \
    ip6tables-legacy ip6tables-legacy-restore ip6tables-legacy-save
    xtables-legacy-multi xtables-monitor xtables-nft-multi
  define-test-funcs: |
    help_version() {
      cmd="$1"
      test -x "$(command -v $cmd)"
      for arg in "--help" "--version"; do
        case $cmd in
          *-save|*-restore|*-multi)
          ;;
          arptables*|ip*tables-nft|ip*tables-translate)
            $cmd $arg || $cmd $arg 2>&1 | grep "Protocol not supported"
          ;;
          ebtables*)
            $cmd $arg || $cmd $arg 2>&1 | grep "Could not initialize nftables layer"
          ;;
          iptables-xml|*-restore-translate)
            if [ "$arg" = "--help" ]; then
              $cmd $arg 2>&1 | grep Usage:
            else
              $cmd $arg
            fi
          ;;
          xtables-monitor)
            if [ "$arg" = "--help" ]; then
              $cmd $arg 2>&1 | grep "Protocol not supported" ||
                $cmd $arg 2>&1 | grep "Usage"
            else
              $cmd $arg || $cmd $arg 2>&1 | grep "Protocol not supported"
            fi
            ;;
          *)
            $cmd $arg
            ;;
        esac
      done
    }

    no_other_commands() {
      # Make sure we covered all the commands in the package
      # This should be removed after the refactor - it's not
      # a regression if commands get added.
      pkg="$1"; shift
      pkg_cmds="$(mktemp)"
      trap "rm $pkg_cmds" EXIT
      apk info -qL "$pkg" | grep ^usr/bin/ | \
        cut -d/ -f3 > "$pkg_cmds"
      while [ $# -gt 0 ]; do
        sed -i "/^${1}$/d" "$pkg_cmds"
        shift
      done
      if [ -s "$pkg_cmds" ]; then
        echo "ERROR: Unexpected commands:" >&2
        cat "$pkg_cmds" >&2
        exit 1
      fi
    }

environment:
  contents:
    packages:
      - autoconf
      - automake
      - bash
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - flex
      - libcap-utils
      - libmnl-dev
      - libnftnl-dev
      - libtool
      - linux-headers
      - pkgconf-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://git.netfilter.org/iptables
      tag: v${{package.version}}
      expected-commit: 0506bea1dcc8f12d94e7c32bf2fb04abb3fdd269
      depth: "-1"

  - runs: |
      ./autogen.sh

  - runs: |
      export CFLAGS="$CFLAGS -D_GNU_SOURCE"
      ./configure \
        --build="$CBUILD" \
        --host="$CHOST" \
        --prefix=/usr \
        --mandir=/usr/share/man \
        --sbindir=/usr/bin \
        --sysconfdir=/etc \
        --without-kernel \
        --enable-devel \
        --enable-libipq \
        --enable-shared

      # do not use rpath
      sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool
      sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool

  - uses: autoconf/make

  - uses: autoconf/make-install

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/include/libiptc

      install -m644 include/iptables.h include/ip6tables.h "${{targets.destdir}}"/usr/include/
      install include/libiptc/*.h "${{targets.destdir}}"/usr/include/libiptc/

      install -D -m644 iptables.confd "${{targets.destdir}}"/etc/conf.d/iptables
      install -D -m644 ebtables.confd "${{targets.destdir}}"/etc/conf.d/ebtables

subpackages:
  - name: iptables-doc
    description: iptables documentation
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs
    dependencies:
      runtime:
        - merged-sbin
        - wolfi-baselayout

  - name: iptables-dev
    description: iptables development files
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check
    dependencies:
      runtime:
        - merged-sbin
        - wolfi-baselayout

  - name: iptables-xtables-privileged
    description: iptables with cap_net_raw and cap_net_admin capabilities set for xtables
    options:
      no-provides: true
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          cp -r ${{targets.destdir}}/* ${{targets.contextdir}}/
          rm ${{targets.contextdir}}/usr/bin/ip*tables-apply
          setcap cap_net_raw,cap_net_admin+eip ${{targets.contextdir}}/usr/bin/xtables-legacy-multi
          setcap cap_net_raw,cap_net_admin+eip ${{targets.contextdir}}/usr/bin/xtables-nft-multi
    test:
      pipeline:
        - if: ${{build.arch}} != 'aarch64'
          uses: test/tw/ldd-check
        - if: ${{build.arch}} != 'aarch64'
          runs: |
            ixp_cmds="${{vars.iptables-cmds}}"
            ${{vars.define-test-funcs}}
            for cmd in $ixp_cmds; do
              help_version "$cmd"
            done
            no_other_commands "${{context.name}}" $ixp_cmds
    dependencies:
      runtime:
        - merged-sbin
        - wolfi-baselayout

  # iptables-apply is a bash script, and therefore depends on bash
  # only a subset of iptables users use this script, so we keep
  # it split out to avoid adding bash into all images using iptables.
  - name: iptables-apply
    description: iptables-apply program
    pipeline:
      - runs: |
          spd=${{targets.contextdir}}
          mkdir -p "$spd/usr/bin"
          mv ${{targets.destdir}}/usr/bin/ip*tables-apply "$spd/usr/bin"
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - runs: |
            cmds="iptables-apply ip6tables-apply"
            ${{vars.define-test-funcs}}
            for cmd in $cmds; do
              help_version "$cmd"
            done
            no_other_commands "${{context.name}}" $cmds

  - name: ip6tables
    checks:
      disabled:
        - empty
    dependencies:
      runtime:
        - iptables
    test:
      pipeline:
        - uses: test/emptypackage

  - name: xtables
    description: xtables multi call binaries and libraries
    dependencies:
      runtime:
        - merged-sbin
        - wolfi-baselayout
      replaces:
        - iptables
        - ip6tables
    pipeline:
      - working-directory: ${{targets.subpkgdir}}
        runs: |
          mv ${{targets.destdir}}/etc .
          mkdir -p usr/bin var/lib/iptables var/lib/ip6tables etc/iptables
          mv ${{targets.destdir}}/usr/bin/xtables-* ${{targets.subpkgdir}}/usr/bin/
          mv ${{targets.destdir}}/usr/lib ${{targets.subpkgdir}}/usr/
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - runs: |
            cmds="xtables-legacy-multi xtables-monitor xtables-nft-multi"
            ${{vars.define-test-funcs}}
            for cmd in $cmds; do
              help_version "$cmd"
            done
            no_other_commands "${{context.name}}" $cmds

update:
  enabled: true
  release-monitor:
    identifier: 1394

test:
  pipeline:
    - runs: |
        iptables_cmds="${{vars.iptables-cmds}}"
        ${{vars.define-test-funcs}}
        for cmd in $iptables_cmds; do
          help_version "$cmd"
        done
        no_other_commands "${{context.name}}" $iptables_cmds
    - uses: test/tw/ldd-check
    - uses: test/no-docs
