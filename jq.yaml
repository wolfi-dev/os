package:
  name: jq
  version: "1.8.0"
  epoch: 0
  description: "a lightweight and flexible JSON processor"
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - autoconf
      - build-base
      - busybox
      - ca-certificates-bundle
      - gcc-14-default
      - libtool
      - oniguruma-dev
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/jqlang/jq.git
      tag: jq-${{package.version}}
      expected-commit: d23a7b9db932be706fecf5f4c9711fd4214bb64e

  - uses: patch
    with:
      patches: |
        fix-version-header-generation.patch

  - runs: |
      autoreconf -vfi

  - uses: autoconf/configure

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: "jq-dev"
    description: "headers for libjq"
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check

  - name: "jq-doc"
    description: "jq documentation"
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  github:
    identifier: jqlang/jq
    strip-prefix: jq-
    tag-filter: jq-

test:
  pipeline:
    - name: Verify jq installation
      runs: |
        jq --version || exit 1
        jq --help
    - name: Basic JSON parsing
      runs: |
        echo '{"name":"John", "age":31, "city":"New York"}' | jq '.name' | grep 'John' || exit 1
    - name: Complex JSON parsing
      runs: |
        echo '{"employees":[{"firstName":"John", "lastName":"Doe"},{"firstName":"Anna", "lastName":"Smith"},{"firstName":"Peter", "lastName":"Jones"}]}' | jq '.employees[] | select(.firstName=="Anna").lastName' | grep 'Smith' || exit 1
    - name: JSON construction
      runs: |
        echo '{"name":"John", "age":31}' | jq '. + {"city":"New York"}' | grep 'New York' || exit 1
    - name: Filtering JSON arrays
      runs: |
        echo '[{"id":1,"name":"John"},{"id":2,"name":"Jane"},{"id":3,"name":"Doe"}]' | jq '.[] | select(.id > 1)' | grep -E 'Jane|Doe' || exit 1
    - name: Using jq to transform JSON structure
      runs: |
        echo '[{"id":1,"name":"John"},{"id":2,"name":"Jane"}]' | jq '{users: map({userId: .id, userName: .name})}' | grep -E '"userId": 1|"userId": 2' || exit 1
    - uses: test/tw/ldd-check
    - name: CVE-2024-53427
      runs: |
        output=$(echo '["NaN"]' | jq -r '.[] | try (fromjson | isnan) catch .')
        [ "$output" = "true" ]
        output=$(echo '["NaN1"]' | jq -r '.[] | try (fromjson | isnan) catch .')
        [ "$output" = "Invalid numeric literal at EOF at line 1, column 4 (while parsing 'NaN1')" ]
