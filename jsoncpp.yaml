package:
  name: jsoncpp
  version: 1.9.6
  epoch: 2
  description: "C++ library for parsing JSON"
  copyright:
    - license: 'CC-PDDC OR MIT'

environment:
  contents:
    packages:
      - build-base
      - busybox

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/open-source-parsers/jsoncpp
      tag: ${{package.version}}
      expected-commit: 89e2973c754a9c02a49974d839779b151e95afd6

  - uses: cmake/configure

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: jsoncpp-static
    description: "C++ library for parsing JSON - static libraries"
    pipeline:
      - uses: split/static

  - name: jsoncpp-dev
    description: "C++ library for parsing JSON - development headers"
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check

update:
  enabled: true
  github:
    identifier: open-source-parsers/jsoncpp

test:
  environment:
    contents:
      packages:
        - build-base
        - cmake
        - jsoncpp-dev
        - jsoncpp-static
  pipeline:
    - name: Compile and Execute Test
      runs: |
        echo '#include <json/json.h>
        #include <iostream>
        int main() {
            const std::string rawJson = R"({"name": "John", "age": 30, "city": "New York"})";
            Json::CharReaderBuilder builder;
            Json::CharReader* reader = builder.newCharReader();
            Json::Value root;
            std::string errors;
            bool parsingSuccessful = reader->parse(rawJson.c_str(), rawJson.c_str() + rawJson.size(), &root, &errors);
            delete reader;
            if (!parsingSuccessful) {
                std::cerr << "Failed to parse the JSON string: " << errors << std::endl;
                return 1;
            }
            std::string name = root["name"].asString();
            int age = root["age"].asInt();
            std::string city = root["city"].asString();
            if (name == "John" && age == 30 && city == "New York") {
                std::cout << "JSON parsing succeeded!" << std::endl;
                return 0;
            } else {
                std::cerr << "JSON parsing failed!" << std::endl;
                return 1;
            }
        }' > test_jsoncpp.cpp

        g++ -I$INSTALL_DIR/usr/include test_jsoncpp.cpp -o test_jsoncpp -L$INSTALL_DIR/usr/lib -ljsoncpp
        ./test_jsoncpp | grep -q "JSON parsing succeeded!" && echo "Test passed." || echo "Test failed."
    - uses: test/tw/ldd-check
