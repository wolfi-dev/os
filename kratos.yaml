package:
  name: kratos
  version: 2.8.4
  epoch: 0
  description: "A Go framework for microservices"
  copyright:
    - license: MIT

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/go-kratos/kratos
      tag: v${{package.version}}
      expected-commit: 982270e9576bdd6346a4fdf5ef4839a8e3080a38

  - uses: go/build
    with:
      modroot: cmd/kratos
      output: kratos
      packages: .

subpackages:
  - name: kratos-protoc-gen
    description: "Protocol buffer code generators for Kratos"
    dependencies:
      runtime:
        - protobuf-dev
        - protoc
    pipeline:
      - uses: go/build
        with:
          modroot: cmd/protoc-gen-go-errors
          output: protoc-gen-go-errors
          packages: .
      - uses: go/build
        with:
          modroot: cmd/protoc-gen-go-http
          output: protoc-gen-go-http
          packages: .
    test:
      environment:
        contents:
          packages:
            - protobuf-dev
            - protoc
            - protoc-gen-go
            - protoc-gen-go-grpc
      pipeline:
        # Basic smoke tests - verify binaries exist and can execute
        - runs: |
            set -o pipefail
            protoc-gen-go-errors --version | grep -F -e "${{package.version}}"
            protoc-gen-go-http --version | grep -F -e "${{package.version}}"

            # Test that protoc can discover and invoke the generators

            # Create a minimal proto file for testing
            cat > simple.proto << 'EOF'
            syntax = "proto3";
            package simple;
            option go_package = "github.com/example/simple;simple";

            service SimpleService {
              rpc GetItem(GetItemRequest) returns (GetItemResponse);
            }

            message GetItemRequest {
              string id = 1;
            }

            message GetItemResponse {
              string name = 1;
            }
            EOF

            # Test protoc-gen-go-http integration (generate base files first)

            # First generate base Go protobuf files
            protoc --proto_path=. \
                   --go_out=paths=source_relative:. \
                   --go-grpc_out=paths=source_relative:. \
                   simple.proto

            # Verify base files were created
            [ -f "simple.pb.go" ]
            [ -f "simple_grpc.pb.go" ]

            # Now generate HTTP bindings
            protoc --proto_path=. \
                   --plugin=protoc-gen-go-http=$(which protoc-gen-go-http) \
                   --go-http_out=paths=source_relative:. \
                   simple.proto

            # Check if HTTP file was generated (may have different naming)
            ls -la *.go

            # Look for any HTTP-related generated content
            if [ -f "simple_http.pb.go" ]; then
                echo "Found simple_http.pb.go"
                grep -q "SimpleService" simple_http.pb.go
            else
                echo "HTTP generator completed (may not generate output for simple services)"
            fi

            # Test protoc-gen-go-errors with diagnostic output

            cat > errors_simple.proto << 'EOF'
            syntax = "proto3";
            package errortest;
            option go_package = "github.com/example/errortest;errortest";

            enum Status {
              OK = 0;
              ERROR = 1;
            }
            EOF

            # Test that the errors generator can be invoked
            protoc --proto_path=. \
                   --plugin=protoc-gen-go-errors=$(which protoc-gen-go-errors) \
                   --go_out=paths=source_relative:. \
                   --go-errors_out=paths=source_relative:. \
                   errors_simple.proto

            # List generated files for debugging
            ls -la *.go

            echo "Error generator test completed successfully"

update:
  enabled: true
  github:
    identifier: go-kratos/kratos
    strip-prefix: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - git
        - go
  pipeline:
    - runs: |
        # Test that binaries work
        set -o pipefail
        kratos --version | grep -F -e "${{package.version}}"
    - runs: |
        # Test creating a new project and building it
        kratos new testproject
        cd testproject
        go mod tidy
        install -d bin
        go build -o ./bin/testproject ./cmd/testproject
        ./bin/testproject --help
