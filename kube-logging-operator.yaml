package:
  name: kube-logging-operator
  version: "6.1.0"
  epoch: 1 # CVE-2025-47910
  description: Logging operator for Kubernetes
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - ruby-3.2
      - ruby-3.2-dev
      - ruby3.2-bundler

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kube-logging/logging-operator
      tag: ${{package.version}}
      expected-commit: be9be30e168df01a5eec3545c70b41e052813ab4

  - uses: go/build
    with:
      packages: .
      output: manager

subpackages:
  - name: "kube-logging-operator-compat"
    description: "Compatibility package to place binaries in the location expected by upstream helm charts"
    pipeline:
      - runs: |
          # The helm chart expects the logging-operator binaries to be in / instead of /usr/bin
          mkdir -p "${{targets.contextdir}}"
          ln -sf /usr/bin/manager ${{targets.contextdir}}/manager
    test:
      pipeline:
        - runs: test "$(readlink /manager)" = "/usr/bin/manager"

  - name: ${{package.name}}-config-reloader
    description: "config-reloader is a simple binary to trigger a reload when Kubernetes ConfigMaps or Secrets are updated"
    pipeline:
      - working-directory: ./images/config-reloader
        uses: go/build
        with:
          packages: ./cmd/configreloader
          output: config-reloader
    test:
      pipeline:
        - runs: |
            # Ensure the binary is executable
            test -x /usr/bin/config-reloader
            # Check that it can be run without arguments
            /usr/bin/config-reloader --help

  # create a similar compat package for config-reloader
  - name: ${{package.name}}-config-reloader-compat
    description: "Compat package for config-reloader"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          ln -sf /usr/bin/config-reloader ${{targets.contextdir}}/config-reloader
    test:
      pipeline:
        - runs: test "$(readlink /config-reloader)" = "/usr/bin/config-reloader"

  - name: ${{package.name}}-fluentd-outputs
    description: "Fluentd output plugins for the kube-logging operator"
    options:
      no-provides: true
    dependencies:
      replaces:
        - ${{package.name}}
        - ruby3.2-fluentd
        - ruby3.2-fluentd-1.16
        - ruby3.2-fluentd-1.17
        - ruby3.2-fluentd-1.18
        - ruby-3.1
        - ruby-3.2
        - ruby-3.3
        - ruby-3.4
      runtime:
        - ruby3.2-fluentd
    pipeline:
      - runs: |
          # Install fluentd output plugins from upstream Gemfile
          # https://github.com/kube-logging/logging-operator/blob/master/images/fluentd/outputs/Gemfile

          # Set GEM_PATH and GEM_HOME so gem can see already-installed dependencies
          export GEM_HOME="${{targets.contextdir}}/usr/lib/ruby/gems/3.2.0"
          export GEM_PATH="${{targets.contextdir}}/usr/lib/ruby/gems/3.2.0"

          # Parse the Gemfile and install each gem with its specified version
          grep "^gem " images/fluentd/outputs/Gemfile | while read -r line; do
            # Extract gem name and version from lines like: gem 'fluent-plugin-foo', '1.2.3'
            GEM_NAME=$(echo "$line" | sed -n "s/^gem '\([^']*\)'.*/\1/p")
            GEM_VERSION=$(echo "$line" | sed -n "s/^gem '[^']*', '\([^']*\)'.*/\1/p")

            if [ -n "$GEM_NAME" ] && [ -n "$GEM_VERSION" ]; then
              echo "Installing $GEM_NAME version $GEM_VERSION"
              gem install --install-dir="${{targets.contextdir}}/usr/lib/ruby/gems/3.2.0" \
                --bindir="${{targets.contextdir}}/usr/bin" \
                --no-document \
                "$GEM_NAME" -v "$GEM_VERSION"
            fi
          done

          gem install --install-dir="${{targets.contextdir}}/usr/lib/ruby/gems/3.2.0" \
            --bindir="${{targets.contextdir}}/usr/bin" \
            --no-document \
            fluent-logger

          # Fix world-writable files (security issue)
          find "${{targets.contextdir}}/usr/lib/ruby/gems/3.2.0" -type f -perm -002 -exec chmod o-w {} \;
      - uses: ruby/clean
    test:
      environment:
        contents:
          packages:
            - ruby-3.2
      pipeline:
        - name: Verify plugin loading
          runs: |
            # Test that all plugins can be loaded
            ruby -e "require 'fluent/plugin/out_oss'"
            ruby -e "require 'fluent/plugin/out_cloudwatch_logs'"
            ruby -e "require 'fluent/plugin/out_datadog'"
            ruby -e "require 'fluent/plugin/out_gcs'"
            ruby -e "require 'fluent/plugin/out_gelf'"
            ruby -e "require 'fluent/plugin/out_kafka'"
            ruby -e "require 'fluent/plugin/out_kinesis_streams'"
            ruby -e "require 'fluent/plugin/out_lm'"
            ruby -e "require 'fluent/plugin/out_logzio_buffered'"
            ruby -e "require 'fluent/plugin/out_loki'" # works
            ruby -e "require 'fluent/plugin/out_mattermost'"
            ruby -e "require 'fluent/plugin/out_newrelic'" # works
            ruby -e "require 'fluent/plugin/out_opensearch'"
            ruby -e "require 'fluent/plugin/out_rabbitmq'"
            ruby -e "require 'fluent/plugin/out_redis'"
            ruby -e "require 'fluentd'; require 'fluentd/plugin/out_syslog'"
            ruby -e "require 'fluent/plugin/out_s3'"
            ruby -e "require 'fluent/plugin/out_splunk_hec'"
            ruby -e "require 'fluent/plugin/out_vmware_log_intelligence'"
            ruby -e "require 'fluent/plugin/out_vmware_loginsight'" # works
            ruby -e "require 'fluent/plugin/out_webhdfs'"
            ruby -e "require 'fluent/plugin/in_sqs'"
            ruby -e "require 'fluent/plugin/out_sqs'"

update:
  enabled: true
  github:
    identifier: kube-logging/logging-operator

vars:
  bin-name: manager

test:
  environment:
    contents:
      packages:
        - curl
        - git
        - kustomize
        - kubectl
    environment:
      KUBERNETES_SERVICE_HOST: "127.0.0.1"
      KUBERNETES_SERVICE_PORT: "8080"
  pipeline:
    - uses: test/tw/ldd-check
    - runs: |
        ${{vars.bin-name}} --help
    - uses: test/kwok/cluster
    - name: Fetch the testdata from the source repo
      runs: git clone --depth=1 https://github.com/kube-logging/logging-operator
    - name: Install CRDs
      working-directory: logging-operator/charts/logging-operator/crds
      runs: kubectl apply --server-side=true -f .
    - name: Launch operator with dummy kubeconfig
      uses: test/daemon-check-output
      with:
        setup: |
          kubectl config view --minify --raw > /tmp/kubeconfig.yaml
        start: ${{vars.bin-name}} --kubeconfig=/tmp/kubeconfig.yaml
        timeout: 30
        expected_output: |
          Starting EventSource
          Starting Controller
          Starting workers
        post: |
          echo "Verifying metrics endpoint"
          curl -sf http://127.0.0.1:8080/metrics
          echo "Metrics endpoint is serving as expected"
