package:
  name: kube-rbac-proxy
  version: "0.19.1"
  epoch: 0
  description: Kubernetes RBAC authorizing HTTP proxy for a single upstream.
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/brancz/kube-rbac-proxy
      tag: v${{package.version}}
      expected-commit: 4bf62418b6aab41da323c878f9d7cc7905206fe3

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0

  - runs: |
      make build
      mkdir -p ${{targets.destdir}}/usr/bin
      mv _output/kube-rbac-proxy ${{targets.destdir}}/usr/bin

  - uses: strip

update:
  enabled: true
  github:
    identifier: brancz/kube-rbac-proxy
    strip-prefix: v
    tag-filter: v

test:
  environment:
    environment:
      KUBERNETES_SERVICE_HOST: "127.0.0.1"
      KUBERNETES_SERVICE_PORT: 32764
    contents:
      packages:
        - mkcert
        - curl
        - wait-for-it
        - http-echo
  pipeline:
    - runs: |
        kube-rbac-proxy --version
        kube-rbac-proxy --help
    - uses: test/kwok/cluster
    - name: "setting up cluster"
      runs: |
        # Create tls certificates
        mkdir -p /etc/tls-key-cert-pair
        mkcert -install
        mkcert -key-file /etc/tls-key-cert-pair/tls.key -cert-file /etc/tls-key-cert-pair/tls.crt localhost

        # Setup service account token
        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
        cp $CA /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # Create if does not exist
        kubectl create serviceaccount default --dry-run=client -o yaml | kubectl apply -f -
        kubectl create token default > /var/run/secrets/kubernetes.io/serviceaccount/token

        kubectl apply -f - <<YAML
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: kube-rbac-proxy
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: kube-rbac-proxy
        subjects:
        - kind: ServiceAccount
          name: default
          namespace: default
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: kube-rbac-proxy
        rules:
        - apiGroups: ["authentication.k8s.io"]
          resources:
          - tokenreviews
          verbs: ["create"]
        - apiGroups: ["authorization.k8s.io"]
          resources:
          - subjectaccessreviews
          verbs: ["create"]
        YAML
    - name: "Setup kube-rbac-proxy"
      runs: |
        # Start an echo server
        http-echo -listen=:9999 -text="hello world" > /dev/null 2>&1 &
        # Start kubeproxy
        kube-rbac-proxy \
          --upstream=http://127.0.0.1:9999 \
          --secure-listen-address=127.0.0.1:8081 \
          --tls-cert-file /etc/tls-key-cert-pair/tls.crt \
          --tls-private-key-file /etc/tls-key-cert-pair/tls.key > /dev/null 2>&1 &
        wait-for-it 127.0.0.1:8081 --timeout=60
    - name: "Checking kube-rbac-proxy without rbac"
      runs: |
        response=$(curl --connect-timeout 5 --cacert /root/.local/share/mkcert/rootCA.pem -s -o /dev/null -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" -w "%{http_code}" https://localhost:8081/)
        if [ "$response" -ne 403 ]; then
          echo "kube-rbac-proxy returned wrong status code: want=403 got=$response"
          exit 1
        fi
    - name: "Creating RBAC"
      runs: |
        kubectl apply -f - <<YAML
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: access
        rules:
        - nonResourceURLs: ["/"]
          verbs: ["get"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: access
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: access
        subjects:
        - kind: ServiceAccount
          name: default
          namespace: default
        YAML
    - name: "Force restart kube-rbac-proxy"
      runs: |
        # It can take some time for the binary to pick the new RBAC. This is fast and predicable.
        kill -9 $(pgrep kube-rbac-proxy)
        kube-rbac-proxy \
          --upstream=http://127.0.0.1:9999 \
          --secure-listen-address=127.0.0.1:8081 \
          --tls-cert-file /etc/tls-key-cert-pair/tls.crt \
          --tls-private-key-file /etc/tls-key-cert-pair/tls.key > /dev/null 2>&1 &
        wait-for-it 127.0.0.1:8081 --timeout=60
    - name: "Checking kube-rbac-proxy with RBAC"
      runs: |
        response=$(curl --connect-timeout 5 --cacert /root/.local/share/mkcert/rootCA.pem -s -o /dev/null -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" -w "%{http_code}" https://localhost:8081/)
        if [ "$response" -ne 200 ]; then
          echo "kube-rbac-proxy returned wrong status code: want=200 got=$response"
          exit 1
        fi
