package:
  name: kubernetes-1.32
  version: "1.32.1"
  epoch: 3
  description: Production-Grade Container Scheduling and Management
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - kubernetes=${{package.full-version}}

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils # needed for non busybox version of `mktemp`
      - findutils # needed for non busybox version of `xargs`
      - go
      - go-bindata
      - grep
      - jq
      - libcap-utils
      - linux-headers
      - rsync

var-transforms:
  - from: ${{package.name}}
    match: '.*-(\d+\.\d+).*'
    replace: '$1'
    to: kubernetes-version

vars:
  components: "kubectl kubeadm kubelet kube-scheduler kube-proxy kube-controller-manager kube-apiserver"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubernetes/kubernetes
      tag: v${{package.version}}
      expected-commit: e9c9be4007d1664e68796af02b8978640d2c1b26

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/crypto@v0.31.0
        go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful@v0.44.0
        golang.org/x/net@v0.33.0

  - runs: |
      export GOWORK=off

  - runs: |
      # Use our Go version instead of downloading another one
      export FORCE_HOST_GO=true
      export KUBE_GIT_TREE_STATE=clean

      WHAT=""
      for c in ${{vars.components}} ; do
        WHAT="$WHAT cmd/$c"
      done

      make WHAT="$WHAT"

  - runs: |
      # We apply cap_net_bind_service so that kube-apiserver can be run as
      # non-root and still listen on port less than 1024
      setcap cap_net_bind_service=+ep _output/bin/kube-apiserver

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/bin/
      install -m755 _output/bin/* ${{targets.destdir}}/usr/bin/

      mkdir -p "${{targets.destdir}}"/etc/kubernetes

subpackages:
  - name: kubectl-${{vars.kubernetes-version}}
    description: A command line tool for communicating with a Kubernetes API server
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubectl ${{targets.subpkgdir}}/usr/bin/kubectl-${{vars.kubernetes-version}}

  - name: kubectl-bash-completion-${{vars.kubernetes-version}}
    dependencies:
      runtime:
        - kubectl-${{vars.kubernetes-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubectl completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubectl-${{vars.kubernetes-version}}

  - name: kubectl-${{vars.kubernetes-version}}-bitnami-compat
    description: "compat package with bitnami/kubectl image"
    dependencies:
      provides:
        - kubectl-bitnami-compat=${{package.full-version}}
      runtime:
        - bash
        - busybox
        - coreutils
        - yq
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}/opt/bitnami/kubectl/bin"
          ln -s /usr/bin/kubectl "${{targets.subpkgdir}}/opt/bitnami/kubectl/bin/kubectl"
          mkdir -p "${{targets.subpkgdir}}/opt/bitnami/common/bin"
          ln -s /usr/bin/yq "${{targets.subpkgdir}}/opt/bitnami/common/bin/yq"

  - name: kubeadm-${{vars.kubernetes-version}}
    description: A tool for quickly installing Kubernetes and setting up a secure cluster
    dependencies:
      runtime:
        - iproute2
        - socat
        - ethtool
        - conntrack-tools
        - crictl
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubeadm ${{targets.subpkgdir}}/usr/bin/kubeadm-${{vars.kubernetes-version}}

          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubeadm completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubeadm

  - name: kubelet-${{vars.kubernetes-version}}
    description: An agent that runs on each node in a Kubernetes cluster making sure that containers are running in a Pod
    dependencies:
      runtime:
        - ip6tables
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubelet ${{targets.subpkgdir}}/usr/bin/kubelet-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kubelet
          install -d ${{targets.subpkgdir}}/var/log/kubelet

  - name: kube-scheduler-${{vars.kubernetes-version}}
    description: Kubernetes control plane component watching over pods on nodes
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-scheduler ${{targets.subpkgdir}}/usr/bin/kube-scheduler-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-scheduler

  - name: kube-proxy-${{vars.kubernetes-version}}
    description: Kubernetes network proxy that runs on each node
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-proxy ${{targets.subpkgdir}}/usr/bin/kube-proxy-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kube-proxy
          install -d ${{targets.subpkgdir}}/var/log/kube-proxy

  - name: kube-controller-manager-${{vars.kubernetes-version}}
    description: Kubernetes control plane component that runs controller processes
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-controller-manager ${{targets.subpkgdir}}/usr/bin/kube-controller-manager-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-controller-manager

  - name: kube-apiserver-${{vars.kubernetes-version}}
    description: Kubernetes control plane component exposing the Kubernetes API
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-apiserver ${{targets.subpkgdir}}/usr/bin/kube-apiserver-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-apiserver

  - name: kubernetes-pause-${{vars.kubernetes-version}}
    dependencies:
      provides:
        - kubernetes-pause=${{vars.kubernetes-version}}
    pipeline:
      - working-directory: /home/build/build/pause
        runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          CFLAGS="$CFLAGS -static -DVERSION=v$(grep '^TAG ?=' Makefile | awk '{print $3}')-${{package.version}}"
          gcc ${CFLAGS} -o "${{targets.subpkgdir}}"/usr/bin/pause linux/pause.c
    test:
      pipeline:
        - name: kubernetes pause version check
          runs: /usr/bin/pause -V

  - name: kubernetes-pause-compat-${{vars.kubernetes-version}}
    description: kubernetes-pause compatibility package
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/
          ln -sf /usr/bin/pause ${{targets.subpkgdir}}/pause

  - range: components
    name: "${{range.key}}-${{vars.kubernetes-version}}-default"
    description: "Makes this version of ${{range.key}} the default."
    dependencies:
      runtime:
        - ${{range.key}}-${{vars.kubernetes-version}}
      provides:
        - ${{range.key}}-default=${{vars.kubernetes-version}}
        - ${{range.key}}=${{vars.kubernetes-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -s ${{range.key}}-${{vars.kubernetes-version}} ${{targets.subpkgdir}}/usr/bin/${{range.key}}

  - name: kube-proxy-${{vars.kubernetes-version}}-default-compat
    description: kube-proxy-default compatibility package
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/local/bin
          ln -sf /usr/bin/kube-proxy-${{vars.kubernetes-version}} ${{targets.subpkgdir}}/usr/local/bin/kube-proxy
    test:
      pipeline:
        - runs: stat /usr/local/bin/kube-proxy

  - name: kubernetes-${{vars.kubernetes-version}}-default
    description: "Compatibility package to set ${{vars.kubernetes-version}} as the default kubernetes, and add packages to their shortened path"
    dependencies:
      runtime:
        - kubectl-${{vars.kubernetes-version}}-default
        - kubeadm-${{vars.kubernetes-version}}-default
        - kubelet-${{vars.kubernetes-version}}-default
        - kube-scheduler-${{vars.kubernetes-version}}-default
        - kube-proxy-${{vars.kubernetes-version}}-default
        - kube-proxy-${{vars.kubernetes-version}}-default-compat
        - kube-controller-manager-${{vars.kubernetes-version}}-default
        - kube-apiserver-${{vars.kubernetes-version}}-default
    checks:
      disabled:
        - empty

data:
  - name: components
    items:
      # Only the keys matter
      kubectl:
      kubeadm:
      kubelet:
      kube-scheduler:
      kube-proxy:
      kube-controller-manager:
      kube-apiserver:

update:
  enabled: true
  git:
    strip-prefix: v
    tag-filter-prefix: v1.32.

test:
  environment:
    contents:
      packages:
        - libcap-utils
  pipeline:
    # AUTOGENERATED
    - runs: |
        kube-apiserver --version
        kube-controller-manager --version
        kube-proxy --version
        kube-scheduler --version
        kubeadm --help
        kubectl --help
        kubelet --version
        kube-apiserver --help
        kube-controller-manager --help
        kube-proxy --help
        kube-scheduler --help
        kubeadm version
        kubelet --help
    - name: Test file capabilities
      runs: |
        getcap /bin/kube-apiserver | cut -d ' ' -f2 | grep -q -E '^cap_net_bind_service=ep$'
