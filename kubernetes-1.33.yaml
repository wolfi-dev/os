package:
  name: kubernetes-1.33
  version: "1.33.0"
  epoch: 0
  description: Production-Grade Container Scheduling and Management
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - kubernetes=${{package.full-version}}

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils # needed for non busybox version of `mktemp`
      - findutils # needed for non busybox version of `xargs`
      - go
      - go-bindata
      - grep
      - jq
      - libcap-utils
      - linux-headers
      - rsync

var-transforms:
  - from: ${{package.name}}
    match: '.*-(\d+\.\d+).*'
    replace: '$1'
    to: kubernetes-version

vars:
  components: "kubectl kubeadm kubelet kube-scheduler kube-proxy kube-controller-manager kube-apiserver"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/kubernetes/kubernetes
      tag: v${{package.version}}
      expected-commit: 60a317eadfcb839692a68eab88b2096f4d708f4f

  - runs: |
      export GOWORK=off

  - runs: |
      # Use our Go version instead of downloading another one
      export FORCE_HOST_GO=true
      export KUBE_GIT_TREE_STATE=clean

      WHAT=""
      for c in ${{vars.components}} ; do
        WHAT="$WHAT cmd/$c"
      done

      make WHAT="$WHAT"

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/bin/
      install -m755 _output/bin/* ${{targets.destdir}}/usr/bin/

      mkdir -p "${{targets.destdir}}"/etc/kubernetes

  - runs: |
      # We apply cap_net_bind_service so that kube-apiserver can be run as
      # non-root and still listen on port less than 1024
      setcap cap_net_bind_service=+ep ${{targets.destdir}}/usr/bin/kube-apiserver

subpackages:
  - name: kubectl-${{vars.kubernetes-version}}
    description: A command line tool for communicating with a Kubernetes API server
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubectl ${{targets.subpkgdir}}/usr/bin/kubectl-${{vars.kubernetes-version}}

  - name: kubectl-bash-completion-${{vars.kubernetes-version}}
    dependencies:
      runtime:
        - kubectl-${{vars.kubernetes-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubectl completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubectl-${{vars.kubernetes-version}}

  - name: kubectl-${{vars.kubernetes-version}}-bitnami-compat
    description: "compat package with bitnami/kubectl image"
    dependencies:
      provides:
        - kubectl-bitnami-compat=${{package.full-version}}
      runtime:
        - bash
        - busybox
        - coreutils
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}/opt/bitnami/kubectl/bin"
          ln -s /usr/bin/kubectl "${{targets.subpkgdir}}/opt/bitnami/kubectl/bin/kubectl"
          mkdir -p "${{targets.subpkgdir}}/opt/bitnami/common/bin"
          ln -s /usr/bin/yq "${{targets.subpkgdir}}/opt/bitnami/common/bin/yq"

  - name: kubeadm-${{vars.kubernetes-version}}
    description: A tool for quickly installing Kubernetes and setting up a secure cluster
    dependencies:
      runtime:
        - iproute2
        - socat
        - ethtool
        - conntrack-tools
        - crictl
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubeadm ${{targets.subpkgdir}}/usr/bin/kubeadm-${{vars.kubernetes-version}}

          mkdir -p "${{targets.subpkgdir}}"/usr/share/bash-completion/completions
          _output/bin/kubeadm completion bash > "${{targets.subpkgdir}}"/usr/share/bash-completion/completions/kubeadm

  - name: kubelet-${{vars.kubernetes-version}}
    description: An agent that runs on each node in a Kubernetes cluster making sure that containers are running in a Pod
    dependencies:
      runtime:
        - ip6tables
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kubelet ${{targets.subpkgdir}}/usr/bin/kubelet-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kubelet
          install -d ${{targets.subpkgdir}}/var/log/kubelet

  - name: kube-scheduler-${{vars.kubernetes-version}}
    description: Kubernetes control plane component watching over pods on nodes
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-scheduler ${{targets.subpkgdir}}/usr/bin/kube-scheduler-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-scheduler

  - name: kube-proxy-${{vars.kubernetes-version}}
    description: Kubernetes network proxy that runs on each node
    dependencies:
      runtime:
        - iptables
        - ip6tables
        - nftables
        - kmod
        - conntrack-tools
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-proxy ${{targets.subpkgdir}}/usr/bin/kube-proxy-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/lib/kube-proxy
          install -d ${{targets.subpkgdir}}/var/log/kube-proxy

  - name: kube-controller-manager-${{vars.kubernetes-version}}
    description: Kubernetes control plane component that runs controller processes
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-controller-manager ${{targets.subpkgdir}}/usr/bin/kube-controller-manager-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-controller-manager

  - name: kube-apiserver-${{vars.kubernetes-version}}
    description: Kubernetes control plane component exposing the Kubernetes API
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          install -m755 _output/bin/kube-apiserver ${{targets.subpkgdir}}/usr/bin/kube-apiserver-${{vars.kubernetes-version}}

          install -d ${{targets.subpkgdir}}/var/log/kube-apiserver

  - name: kubernetes-pause-${{vars.kubernetes-version}}
    dependencies:
      provides:
        - kubernetes-pause=${{vars.kubernetes-version}}
    pipeline:
      - working-directory: /home/build/build/pause
        runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          CFLAGS="$CFLAGS -static -DVERSION=v$(grep '^TAG ?=' Makefile | awk '{print $3}')-${{package.version}}"
          gcc ${CFLAGS} -o "${{targets.subpkgdir}}"/usr/bin/pause linux/pause.c
    test:
      pipeline:
        - name: kubernetes pause version check
          runs: /usr/bin/pause -V

  - name: kubernetes-pause-compat-${{vars.kubernetes-version}}
    description: kubernetes-pause compatibility package
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/
          ln -sf /usr/bin/pause ${{targets.subpkgdir}}/pause

  - range: components
    name: "${{range.key}}-${{vars.kubernetes-version}}-default"
    description: "Makes this version of ${{range.key}} the default."
    dependencies:
      runtime:
        - ${{range.key}}-${{vars.kubernetes-version}}
      provides:
        - ${{range.key}}-default=${{vars.kubernetes-version}}
        - ${{range.key}}=${{vars.kubernetes-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -s ${{range.key}}-${{vars.kubernetes-version}} ${{targets.subpkgdir}}/usr/bin/${{range.key}}

  - name: kube-proxy-${{vars.kubernetes-version}}-default-compat
    description: kube-proxy-default compatibility package
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/local/bin
          ln -sf /usr/bin/kube-proxy-${{vars.kubernetes-version}} ${{targets.subpkgdir}}/usr/local/bin/kube-proxy
    test:
      pipeline:
        - runs: stat /usr/local/bin/kube-proxy

  - name: kubernetes-${{vars.kubernetes-version}}-default
    description: "Compatibility package to set ${{vars.kubernetes-version}} as the default kubernetes, and add packages to their shortened path"
    dependencies:
      runtime:
        - kubectl-${{vars.kubernetes-version}}-default
        - kubeadm-${{vars.kubernetes-version}}-default
        - kubelet-${{vars.kubernetes-version}}-default
        - kube-scheduler-${{vars.kubernetes-version}}-default
        - kube-proxy-${{vars.kubernetes-version}}-default
        - kube-proxy-${{vars.kubernetes-version}}-default-compat
        - kube-controller-manager-${{vars.kubernetes-version}}-default
        - kube-apiserver-${{vars.kubernetes-version}}-default
    checks:
      disabled:
        - empty

data:
  - name: components
    items:
      # Only the keys matter
      kubectl:
      kubeadm:
      kubelet:
      kube-scheduler:
      kube-proxy:
      kube-controller-manager:
      kube-apiserver:

update:
  enabled: true
  git:
    strip-prefix: v
    tag-filter-prefix: v1.33.

test:
  environment:
    contents:
      packages:
        - etcd
        - jq
        - libcap-utils
        - openssl
  pipeline:
    - name: Binary version checks
      runs: |
        kube-apiserver --version
        kube-controller-manager --version
        kube-proxy --version
        kube-scheduler --version
        kubeadm version
        kubectl --help
        kubelet --version
    - name: Test file capabilities
      runs: |
        getcap /usr/bin/kube-apiserver | cut -d ' ' -f2 | grep -q -E '^cap_net_bind_service=ep$'
    - name: Functional tests
      runs: |
        # Launch an etcd instance. Dependency of kube-api-server (below).
        etcd --data-dir=/tmp/etcd-data \
            --listen-client-urls=http://127.0.0.1:2379 \
            --advertise-client-urls=http://127.0.0.1:2379 > /tmp/etcd.log 2>&1 &
        ETCD_PID=$!
        sleep 3

        # Addresses a failure discovered in melange test, due to our self-signed
        # certificate not including an IP SAN for 127.0.0.1.
        # Tests would fail
        cat > /tmp/openssl.cnf <<EOF
        [req]
        req_extensions = v3_req
        distinguished_name = req_distinguished_name
        [req_distinguished_name]
        [v3_req]
        subjectAltName = @alt_names
        [alt_names]
        IP.1 = 127.0.0.1
        EOF

        # Generate self-signed cert. Needed to run kube-api-server, an also for
        # kubectl auth.
        openssl req -nodes -new -x509 -keyout /tmp/ca.key \
          -subj "/CN=TestCA" -out /tmp/ca.crt

        # API server cert with IP SAN
        openssl req -nodes -newkey rsa:2048 \
          -keyout /tmp/apiserver.key \
          -subj "/CN=kube-apiserver" \
          -config /tmp/openssl.cnf \
          -extensions v3_req \
          -out /tmp/apiserver.csr
        openssl x509 -req -in /tmp/apiserver.csr \
          -CA /tmp/ca.crt -CAkey /tmp/ca.key -CAcreateserial \
          -out /tmp/apiserver.crt -days 1 \
          -extensions v3_req -extfile /tmp/openssl.cnf

        # Client cert signed by CA
        openssl req -nodes -newkey rsa:2048 \
          -keyout /tmp/client.key \
          -subj "/CN=test-user" \
          -out /tmp/client.csr
        openssl x509 -req -in /tmp/client.csr \
          -CA /tmp/ca.crt -CAkey /tmp/ca.key -CAcreateserial \
          -out /tmp/client.crt -days 1

        # Start kube-apiserver with client certificate auth
        kube-apiserver \
          --authorization-mode=AlwaysAllow \
          --client-ca-file=/tmp/ca.crt \
          --cert-dir=/tmp \
          --tls-cert-file=/tmp/apiserver.crt \
          --tls-private-key-file=/tmp/apiserver.key \
          --secure-port=65530 \
          --bind-address=127.0.0.1 \
          --advertise-address=127.0.0.1 \
          --service-cluster-ip-range=10.0.0.0/24 \
          --service-account-issuer=api \
          --service-account-signing-key-file=/tmp/apiserver.key \
          --service-account-key-file=/tmp/apiserver.key \
          --storage-backend=etcd3 \
          --etcd-servers="http://127.0.0.1:2379" > /tmp/apiserver.log 2>&1 &
        API_PID=$!
        sleep 5

        # Checks the kube-api-server process is running...
        if ! kill -0 $API_PID 2>/dev/null; then
          echo "API server failed to start:"
          cat /tmp/apiserver.log
          kill $ETCD_PID
          rm -rf /tmp
          exit 1
        fi

        # Sets up kubectl with cert authentication.
        export KUBECONFIG=/tmp/kubeconfig
        kubectl config set-cluster test \
          --server=https://127.0.0.1:65530 \
          --certificate-authority=/tmp/ca.crt
        kubectl config set-credentials test-user \
          --client-certificate=/tmp/client.crt \
          --client-key=/tmp/client.key
        kubectl config set-context test --cluster=test --user=test-user
        kubectl config use-context test

        # See if the version that returns, matches our melange package version.
        # This command fails if there is a mis-match, and likewise if there
        # is any issues with kubeconfig setup and auth (above).
        kubectl version --output=json | jq -e '.serverVersion.gitVersion' | grep "v${{package.version}}"
        kubectl api-resources

        # Validate we can add some resources
        kubectl create secret generic test-secret --from-literal=password=secret
        kubectl get secret test-secret -o json | jq -e '.data.password=="c2VjcmV0"'
        kubectl create configmap test-config --from-literal=key=value
        kubectl get configmap test-config -o json | jq -e '.data.key=="value"'
