package:
  name: kubo
  version: "0.35.0"
  epoch: 3
  description: An IPFS implementation in Go
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - gosu
      - "posix-libc-utils" # "getent" required
      - tini
    provides:
      - ipfs=${{package.full-version}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - fuse3
      - go
      - openssl # significantly reduces background CPU usage, but requires CGO and gcc

pipeline:
  - uses: git-checkout
    with:
      expected-commit: a78d155de0e7e660d6325f6c6e15b2fbee0e31cc
      repository: https://github.com/ipfs/kubo
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        github.com/pion/interceptor@v0.1.39
      modroot: test/dependencies

  - uses: go/bump
    with:
      deps: |-
        github.com/pion/interceptor@v0.1.39
      modroot: docs/examples/kubo-as-a-library

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0
        github.com/pion/interceptor@v0.1.39

  - uses: go/build
    with:
      packages: ./cmd/ipfs
      output: ipfs
      tags: openssl
      ldflags: |
        -X 'github.com/ipfs/kubo/version.CurrentCommit=$(git rev-parse HEAD)'

  - runs: |
      mkdir -p ${{targets.destdir}}/data/ipfs
      mkdir -p ${{targets.destdir}}/ipfs ${{targets.destdir}}/ipns
      mkdir -p ${{targets.destdir}}/container-init.d

      install -Dm755 bin/container_daemon ${{targets.destdir}}/usr/bin/start_ipfs
      install -Dm755 bin/container_init_run ${{targets.destdir}}/usr/bin/container_init_run

  - uses: strip

subpackages:
  - name: ${{package.name}}-compat
    description: Compatibility symlinks for IPFS container entrypoint scripts
    dependencies:
      runtime:
        - ${{package.name}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/local/bin
          ln -sf /usr/bin/start_ipfs ${{targets.contextdir}}/usr/local/bin/start_ipfs
          ln -sf /usr/bin/container_init_run ${{targets.contextdir}}/usr/local/bin/container_init_run
    test:
      pipeline:
        - runs: |
            # Verify symlinks exist and point to correct targets
            stat /usr/local/bin/start_ipfs
            stat /usr/local/bin/container_init_run

            # Check that symlinks point to the right locations
            test "$(readlink /usr/local/bin/start_ipfs)" = "/usr/bin/start_ipfs"
            test "$(readlink /usr/local/bin/container_init_run)" = "/usr/bin/container_init_run"

            # Verify the targets are executable
            test -x /usr/bin/start_ipfs
            test -x /usr/bin/container_init_run

test:
  pipeline:
    - name: Test IPFS installation
      runs: |
        ipfs --version
        ipfs --help
    - name: Test IPFS repository initialization
      runs: |
        ipfs init
    - name: Test adding and retrieving a file
      runs: |
        echo "Hello, IPFS" > tmpfile.txt
        FILE_HASH=$(ipfs add -q tmpfile.txt)
        ipfs cat $FILE_HASH > retrieved.txt
        if diff tmpfile.txt retrieved.txt; then
          echo "File addition and retrieval successful."
        else
          echo "File addition and retrieval failed."
          exit 1
        fi
    - name: Test name publishing and resolving
      runs: |
        echo "Testing name publishing and resolving..."
        PEER_ID=$(ipfs id -f="<id>")
        FILE_HASH=$(ipfs add -q tmpfile.txt) # Assuming reuse of previously added file
        ipfs name publish --allow-offline /ipfs/$FILE_HASH
        ipfs name resolve $PEER_ID
        echo "Name publishing and resolving successful."
    - name: Test starting the IPFS daemon
      runs: |
        echo "Testing starting the IPFS daemon..."
        ipfs daemon --init > /dev/null 2>&1 &
        DAEMON_PID=$!
        echo "IPFS daemon started with PID $DAEMON_PID."
        kill $DAEMON_PID

update:
  enabled: true
  github:
    identifier: ipfs/kubo
    strip-prefix: v
