package:
  name: kustomize-sops
  version: 4.3.3
  epoch: 1
  description: A Flexible Kustomize Plugin for SOPS Encrypted Resources
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - ca-certificates-bundle
      - git
      - kustomize

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/viaduct-ai/kustomize-sops
      tag: v${{package.version}}
      expected-commit: 294de9d6ac8c47a61d5ee14a79b6f216de65f872

  - uses: go/build
    with:
      packages: ./ksops.go
      output: ksops

subpackages:
  - name: ${{package.name}}-compat
    description: Compat package for ${{package.name}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/local/bin
          ln -sf /usr/bin/ksops "${{targets.contextdir}}"/usr/local/bin/ksops
          ln -sf /usr/bin/ksops "${{targets.contextdir}}"/usr/local/bin/kustomize-sops
    test:
      pipeline:
        - name: Check symlink
          runs: |
            stat /usr/local/bin/ksops
            stat /usr/local/bin/kustomize-sops

update:
  enabled: true
  github:
    identifier: viaduct-ai/kustomize-sops
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - sops
        - age
        - yq
  pipeline:
    - runs: |
        # Generate an AGE key pair and store it in a file
        age-keygen -o age-key.txt

        # Extract the public key from the generated key file
        AGE_PUBLIC_KEY=$(grep -oE 'age1[0-9a-z]+' age-key.txt)

        # Create a sample Kubernetes Secret
        cat <<EOF > secret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: test-secret
        type: Opaque
        data:
          username: YWRtaW4=
          password: MWYyZDFlMmU2N2Rm
        EOF

        # Encrypt the Secret using SOPS with the extracted AGE public key
        cat <<EOF > .sops.yaml
        creation_rules:
          - unencrypted_regex: "^(apiVersion|metadata|kind|type)$"
            age: "$AGE_PUBLIC_KEY"
        EOF

        sops -e secret.yaml > secret.enc.yaml

        # Define KSOPS Manifest
        cat <<EOF > secret-generator.yaml
        apiVersion: viaduct.ai/v1
        kind: ksops
        metadata:
          name: test-secret-generator
        files:
          - ./secret.enc.yaml
        EOF

        # Use KSOPS standalone to decrypt the secret (by passing the private key file)
        SOPS_AGE_KEY_FILE=age-key.txt ksops secret-generator.yaml > decrypted-secret.yaml

        # Verify that the decrypted secret matches the original secret
        diff <(yq eval 'del(.metadata)' secret.yaml) <(yq eval 'del(.metadata)' decrypted-secret.yaml)

        echo "KSOPS standalone decryption test PASSED."

        # Cleanup: Remove test files
        rm -f age-key.txt secret.yaml secret.enc.yaml decrypted-secret.yaml .sops.yaml secret-generator.yaml
