package:
  name: langfuse
  version: "3.84.0"
  epoch: 0
  description: "Langfuse webapp"
  copyright:
    - license: "MIT"
  dependencies:
    runtime:
      - busybox
      - dumb-init
      - migrate
      - nodejs-20
      - tzdata

environment:
  contents:
    packages:
      - build-base
      - busybox
      - corepack
      - esbuild
      - file
      - jq
      - libcrypto3
      - nodejs-20
      - npm
      - openssl-dev
      - pnpm
  environment:
    # Required for langfuse-web
    CLICKHOUSE_PASSWORD: "test"
    CLICKHOUSE_USER: "default"
    CLICKHOUSE_URL: "http://localhost:8123"
    DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
    LANG: "en_US.UTF-8"
    LANGFUSE_S3_EVENT_UPLOAD_BUCKET: "langfuse-event-upload-test"
    LC_ALL: "en_US.UTF-8"
    NODE_OPTIONS: "--max-old-space-size=4096"
    NEXTAUTH_SECRET: "test"
    NEXTAUTH_URL: "http://localhost:3000"
    SALT: "test"
    NEXT_TELEMETRY_DISABLED: "1"
    # Required for langfuse-worker
    SKIP_MIGRATE_DATABASE_SCHEMA: "1"
    SKIP_SEED_PRISMA_DATABASE: "1"
    HUSKY: "0"
    # Required to mitigate go CVE
    ESBUILD_BINARY_PATH: "/usr/bin/esbuild"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/langfuse/langfuse.git
      tag: v${{package.version}}
      expected-commit: 565c5617150fb0b70853c6c117ce7774698a0d78

  - name: "Bump deps and install"
    runs: |
      npm install turbo@^2.5.4 --global
      corepack enable
      corepack prepare pnpm@latest --activate

      pnpm pkg set \
        "pnpm.overrides.@babel/helpers=^7.26.10" \
        "pnpm.overrides.@babel/runtime=^7.26.10" \
        "pnpm.overrides.esbuild=^0.25.0" \
        "pnpm.overrides.cookie=^0.7.0" \
        "pnpm.overrides.cross-spawn=^7.0.5" \
        "pnpm.overrides.path-to-regexp=^0.1.12" \
        "pnpm.overrides.prismjs=^1.30.0" \
        "pnpm.overrides.undici=^6.21.2" \
        "pnpm.overrides.vite=^5.4.19" \
        "pnpm.overrides.vitest=^2.1.9" \
        "pnpm.overrides.ws=^8.17.1" \
        "pnpm.overrides.brace-expansion=^4.0.1" \
        "pnpm.overrides.dompurify=^3.2.4" \
        "pnpm.overrides.solid-js=^1.9.4" \
        "pnpm.overrides.go=^1.23.10" \
        "pnpm.overrides.next=^14.2.30"

      pnpm install --ignore-scripts --no-frozen-lockfile

  - name: "Build webapp"
    runs: |
      pnpm run build --filter=web
      npm -g install prisma@$(cat webapps/console/package.json | jq -r '.version') --prefix ${{targets.destdir}}/usr/local/

  - name: "Move webapp output into directories"
    runs: |
      mkdir -p "${{targets.destdir}}"/app/
      mkdir -p "${{targets.destdir}}"/app/web/.next/static
      mkdir -p "${{targets.destdir}}"/app/packages/shared/prisma
      mkdir -p "${{targets.destdir}}"/app/packages/shared/clickhouse
      mkdir -p "${{targets.destdir}}"/app/packages/shared/scripts

      cp -r web/.next/standalone/. "${{targets.destdir}}"/app/
      cp -r web/.next/static "${{targets.destdir}}"/app/web/.next/
      cp -r web/public "${{targets.destdir}}"/app/web/

      cp -r packages/shared/prisma/. "${{targets.destdir}}"/app/packages/shared/prisma/
      cp -r packages/shared/clickhouse/. "${{targets.destdir}}"/app/packages/shared/clickhouse/

      install -m755 web/entrypoint.sh "${{targets.destdir}}"/app/web/entrypoint.sh
      install -Dm755 packages/shared/scripts/cleanup.sql "${{targets.destdir}}"/app/packages/shared/scripts/cleanup.sql

      # use our esbuild binary to remove cve
      cp /usr/bin/esbuild $(find "${{targets.destdir}}"/app/node_modules/.pnpm -path '*@esbuild+linux*bin/esbuild')

  - name: remove deps that cause compat issues
    runs: |
      # Remove all musl variants (since we're using glibc)
      find "${{targets.destdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'musl' | cut -d: -f1 | xargs rm -f
      if [ "${{build.arch}}" = "aarch64" ]; then
        find "${{targets.destdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'x86-64' | cut -d: -f1 | xargs rm -f
      else
        find "${{targets.destdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'aarch64|arm64' | cut -d: -f1 | xargs rm -f
      fi

test:
  environment:
    contents:
      packages:
        - bash
        - coreutils
        - npm
        - redis
        - shadow
        - sudo-rs
        - postgresql
        - postgresql-client
        - wait-for-it
        - glibc-locale-en
    environment:
      NEXTAUTH_SECRET: "test"
      NEXTAUTH_URL: "http://localhost:3030"
      SALT: "test"
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test"
      DIRECT_URL: "postgresql://postgres:postgres@localhost:5432/test"
      NODE_ENV: "production"
      PORT: "3030"
      REDIS_HOST: "127.0.0.1"
      REDIS_PORT: "6379"
      REDIS_URL: "redis://127.0.0.1:6379"
      REDIS_AUTH: ""
      REDIS_CONNECTION_STRING: "redis://127.0.0.1:6379"
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: "test-bucket"
      CLICKHOUSE_URL: "http://localhost:8123"
      CLICKHOUSE_USER: "testuser"
      CLICKHOUSE_PASSWORD: "testpass"
      NEXT_PUBLIC_LANGFUSE_CLOUD_REGION: ""
      LANGFUSE_AUTO_CLICKHOUSE_MIGRATION_DISABLED: true
      PGDATA: /tmp/test_db
      PGUSER: lfuser
      PGPASS: lftest
      PGDB: langfuse_test
      HOSTNAME: 127.0.0.1
  pipeline:
    - name: "launch webapp"
      working-directory: /app
      runs: |
        useradd postgres
        sudo -u postgres initdb -D ${PGDATA}
        sudo -u postgres pg_ctl -D ${PGDATA} -l /tmp/logfile start
        sudo -u postgres createdb ${PGDB}
        redis-server --daemonize yes
        dumb-init -- ./web/entrypoint.sh node ./web/server.js > /tmp/web.log 2>&1 &
        sleep 5
        wait-for-it localhost:3030 --timeout=60 || exit 1

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binaries in the location expected by entrypoint"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/local/bin/
          ln -sf ${{targets.contextdir}}/usr/local/lib/node_modules/prisma/build/index.js /usr/local/bin/prisma

  - name: ${{package.name}}-worker
    description: Langfuse worker background service
    dependencies:
      runtime:
        - bash
        - busybox
        - dumb-init
        - glibc
        - ld-linux
        - libgcc
        - libstdc++
        - nodejs-20
    pipeline:
      - name: "Build worker"
        runs: |
          pnpm run build --filter=worker
      - name: "Move output into directories"
        runs: |
          mkdir -p "${{targets.contextdir}}"/app
          turbo prune --scope=worker --docker

          # Copy lockfiles
          cp out/json/pnpm-lock.yaml "${{targets.contextdir}}"/app/pnpm-lock.yaml
          cp out/full/pnpm-workspace.yaml "${{targets.contextdir}}"/app/pnpm-workspace.yaml

          # Copy worker files
          cp -r out/full/package.json "${{targets.contextdir}}"/app/
          cp -r out/full/packages "${{targets.contextdir}}"/app/
          cp -r out/full/patches "${{targets.contextdir}}"/app/
          cp -r out/full/worker "${{targets.contextdir}}"/app/
          cp -r out/full/turbo.json "${{targets.contextdir}}"/app/

          # Fix a bunch of junk
          cp -r node_modules "${{targets.contextdir}}"/app/node_modules
          cp -r worker/dist "${{targets.contextdir}}"/app/worker/dist
          cp -r worker/node_modules "${{targets.contextdir}}"/app/worker/node_modules
          rm -rf "${{targets.contextdir}}"/app/worker/node_modules/@langfuse/shared/dist
          cp -r worker/node_modules/@langfuse/shared/dist/ "${{targets.contextdir}}"/app/worker/node_modules/@langfuse/shared/dist/
          rm -rf "${{targets.contextdir}}"/app/packages/shared/node_modules
          cp -r packages/shared/node_modules "${{targets.contextdir}}"/app/packages/shared/node_modules/

          # Copy entrypoint
          cp worker/entrypoint.sh "${{targets.contextdir}}"/app/worker/entrypoint.sh
          chmod +x "${{targets.contextdir}}"/app/worker/entrypoint.sh

          # use our esbuild binary to remove cve
          cp /usr/bin/esbuild $(find "${{targets.contextdir}}"/app/node_modules/.pnpm -path '*@esbuild+linux*bin/esbuild')
      - name: remove deps that cause compat issues
        runs: |
          # Remove all musl variants (since we're using glibc)
          find "${{targets.contextdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'musl' | cut -d: -f1 | xargs rm -f
          if [ "${{build.arch}}" = "aarch64" ]; then
            find "${{targets.contextdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'x86-64' | cut -d: -f1 | xargs rm -f
          else
            find "${{targets.contextdir}}"/app/node_modules -type f -exec file {} \; | grep ELF | grep -E 'aarch64|arm64' | cut -d: -f1 | xargs rm -f
          fi
      - name: remove unneeded packages and tests that may introduce CVE's
        runs: |
          # monorepo-symlink-test vulnerability
          find ${{targets.contextdir}}/app/node_modules -path "*/test/resolver/multirepo" -type d -exec rm -rf {} + 2>/dev/null || true

          #CVE-2025-27789 and CVE-2025-48068
          find ${{targets.contextdir}}/app/node_modules -type d \( \
            -name "next" -o \
            -name "@next" \
          \) -exec rm -rf {} + 2>/dev/null || true
    test:
      environment:
        contents:
          packages:
            - npm
            - curl
            - procps
            - redis
            - postgresql
            - postgresql-client
            - ca-certificates-bundle
            - file
            - glibc-locale-en
        environment:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test"
          DIRECT_URL: "postgresql://postgres:postgres@localhost:5432/test"
          NODE_ENV: "production"
          PORT: "3030"
          REDIS_HOST: "127.0.0.1"
          REDIS_PORT: "6379"
          REDIS_URL: "redis://127.0.0.1:6379"
          REDIS_AUTH: ""
          REDIS_CONNECTION_STRING: "redis://127.0.0.1:6379"
          LANGFUSE_S3_EVENT_UPLOAD_BUCKET: "test-bucket"
          CLICKHOUSE_URL: "http://localhost:8123"
          CLICKHOUSE_USER: "testuser"
          CLICKHOUSE_PASSWORD: "testpass"
          NEXT_PUBLIC_LANGFUSE_CLOUD_REGION: ""
          LANGFUSE_WORKER_HOST: "0.0.0.0"
          LANGFUSE_WORKER_PORT: "3030"
      pipeline:
        - name: "Start Redis & Postgres, apply Prisma schema"
          working-directory: /app
          runs: |
            redis-server --daemonize yes > /dev/null 2>&1

            mkdir -p /var/lib/postgresql/data
            chown build:build /var/lib/postgresql/data

            mkdir -p /var/run/postgresql
            chown build:build /var/run/postgresql

            su build -c "initdb -D /var/lib/postgresql/data" > /dev/null 2>&1
            su build -c "pg_ctl -D /var/lib/postgresql/data -o '-k /var/run/postgresql' start" > /dev/null 2>&1

            su build -c "/usr/bin/psql \
              -h /var/run/postgresql \
              -d postgres \
              -v ON_ERROR_STOP=1 <<-EOSQL
                CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD 'postgres';
                CREATE DATABASE test OWNER postgres;
            EOSQL" > /dev/null 2>&1

            SCHEMA_FILE=$(find . -name "schema.prisma" -type f | head -1)
            if [ -n "$SCHEMA_FILE" ]; then
              echo "Found schema at: $SCHEMA_FILE"
              npx prisma generate --schema="$SCHEMA_FILE" > /dev/null 2>&1 || true
              npx prisma db push --accept-data-loss --skip-generate --schema="$SCHEMA_FILE" > /dev/null 2>&1
            fi
        - name: "Test worker startup via entrypoint"
          uses: test/daemon-check-output
          working-directory: /app
          with:
            setup: |
              # Verify the worker files exist
              if [ ! -f /app/worker/entrypoint.sh ]; then
                echo "ERROR: /app/worker/entrypoint.sh not found"
                ls -la /app/worker/ || echo "worker directory not found"
                exit 1
              fi
              if [ ! -f /app/worker/dist/index.js ]; then
                echo "ERROR: /app/worker/dist/index.js not found"
                exit 1
              fi
            start: |
              dumb-init -- ./worker/entrypoint.sh node worker/dist/index.js
            timeout: 60
            expected_output: |
              Listening: http://
              Finished upserting default model prices

update:
  enabled: true
  schedule:
    period: daily
    reason: langfuse cuts a high number of tags every day.
  git:
    strip-prefix: v
