package:
  name: libglvnd
  version: 1.7.0
  epoch: 2
  description: The GL Vendor-Neutral Dispatch library
  copyright:
    - license: GPL-2.0-or-later AND BSD-2-Clause AND BSD-3-Clause AND MIT AND Apache-2.0

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - gtk-doc
      - intltool
      - libtool
      - libx11-dev
      - libxext-dev
      - libxml2-py3
      - m4
      - meson
      - pkgconf
      - pkgconf-dev
      - python3
      - xorgproto

pipeline:
  - uses: fetch
    with:
      expected-sha256: 2b6e15b06aafb4c0b6e2348124808cbd9b291c647299eaaba2e3202f51ff2f3d
      uri: https://gitlab.freedesktop.org/glvnd/libglvnd/-/archive/v${{package.version}}/libglvnd-v${{package.version}}.tar.gz

  - runs: |
      ./autogen.sh

  - uses: autoconf/configure

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    description: ${{package.name}} dev
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - libglvnd
    test:
      pipeline:
        - uses: test/pkgconf

update:
  enabled: true
  release-monitor:
    identifier: 12098

test:
  environment:
    contents:
      packages:
        - build-base
        - gcc
        - libglvnd-dev
  pipeline:
    - runs: |
        cat <<EOF > check_egl_gl_functions.c
        #include <stdio.h>
        #include <dlfcn.h>

        int main() {
            // Open the EGL library
            void *eglHandle = dlopen("libEGL.so", RTLD_LAZY);
            if (!eglHandle) {
                fprintf(stderr, "Failed to open libEGL.so: %s\n", dlerror());
                return -1;
            }

            // Check for the presence of key EGL functions
            void (*eglInitialize)(void) = dlsym(eglHandle, "eglInitialize");
            void (*eglGetDisplay)(void) = dlsym(eglHandle, "eglGetDisplay");
            if (!eglInitialize || !eglGetDisplay) {
                fprintf(stderr, "Failed to find necessary EGL functions: %s\n", dlerror());
                dlclose(eglHandle);
                return -1;
            }
            printf("EGL functions are available.\n");

            // Open the OpenGL library
            void *glHandle = dlopen("libGL.so", RTLD_LAZY);
            if (!glHandle) {
                fprintf(stderr, "Failed to open libGL.so: %s\n", dlerror());
                dlclose(eglHandle);
                return -1;
            }

            // Check for the presence of key OpenGL functions
            const char* (*glGetString)(unsigned int) = dlsym(glHandle, "glGetString");
            void (*glClear)(unsigned int) = dlsym(glHandle, "glClear");
            if (!glGetString || !glClear) {
                fprintf(stderr, "Failed to find necessary OpenGL functions: %s\n", dlerror());
                dlclose(glHandle);
                dlclose(eglHandle);
                return -1;
            }
            printf("OpenGL functions are available.\n");

            // Clean up
            dlclose(glHandle);
            dlclose(eglHandle);

            return 0;
        }
        EOF

        gcc check_egl_gl_functions.c -o check_egl_gl_functions -ldl
        ./check_egl_gl_functions | grep -E "EGL functions are available.|OpenGL functions are available."
