package:
  name: liblzf
  description: A small data compression library
  url: http://software.schmorp.de/pkg/liblzf.html
  version: 3.6
  epoch: 1
  copyright:
    - license: BSD-2-Clause

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - libtool
      - wolfi-baselayout

pipeline:
  - uses: fetch
    with:
      uri: http://dist.schmorp.de/liblzf/liblzf-${{package.version}}.tar.gz
      expected-sha512: 701f70245a11e7cf3412b14ed26bf7b1464512d5b0cf3f913e70ebfdfe20574b8ebbae5a78f4b56ac0034d54830380309cac3057ca00a8028edbde3d091141f5

  - uses: patch
    with:
      patches: liblzf-3.6-autoconf-20140314.patch

  - runs: |
      sh bootstrap.sh

  - uses: autoconf/configure

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: "liblzf-dev"
    description: "liblzf headers"
    pipeline:
      - uses: split/dev
    test:
      environment:
        contents:
          packages:
            - build-base
      pipeline:
        - name: Compile and run liblzf test
          runs: |
            # Adapted from bench.c in the liblzf source
            echo '#include <assert.h>' > test.c
            echo '#include <string.h>' >> test.c
            echo '#include <stdlib.h>' >> test.c
            echo '#include "lzf.h"' >> test.c
            echo '#define DSIZE 32768' >> test.c
            echo 'unsigned char data[DSIZE], data2[DSIZE*2], data3[DSIZE*2];' >> test.c
            echo 'int main()' >> test.c
            echo '{' >> test.c
            echo '  unsigned int i, l, j;' >> test.c
            echo '  for (i = 0; i < DSIZE; ++i)' >> test.c
            echo '    data[i] = i + (rand() & 1);' >> test.c
            echo '  l = lzf_compress (data, DSIZE, data2, DSIZE*2);' >> test.c
            echo '  assert(l);' >> test.c
            echo '  j = lzf_decompress (data2, l, data3, DSIZE*2);' >> test.c
            echo '  assert (j == DSIZE);' >> test.c
            echo '  assert (!memcmp (data, data3, DSIZE));' >> test.c
            echo '  return 0;' >> test.c
            echo '}' >> test.c
            gcc test.c -L. -llzf -o test
            ./test
        - uses: test/pkgconf
        - uses: test/tw/ldd-check

update:
  enabled: false

test:
  pipeline:
    - runs: |
        lzf -v
        lzf --help
    - uses: test/tw/ldd-check
