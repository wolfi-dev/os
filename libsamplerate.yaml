# Generated from https://git.alpinelinux.org/aports/plain/main/libsamplerate/APKBUILD
package:
  name: libsamplerate
  version: 0.2.2
  epoch: 2
  description: Secret Rabbit Code - aka Sample Rate Converter for audio
  copyright:
    - license: BSD-2-Clause

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - fftw-dev
      - libsndfile-dev
      - linux-headers

pipeline:
  - uses: fetch
    with:
      expected-sha256: 3258da280511d24b49d6b08615bbe824d0cacc9842b0e4caf11c52cf2b043893
      uri: https://github.com/libsndfile/libsamplerate/releases/download/${{package.version}}/libsamplerate-${{package.version}}.tar.xz

  - uses: autoconf/configure
    with:
      opts: |
        --enable-static

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: libsamplerate-static
    pipeline:
      - uses: split/static
    description: libsamplerate static

  - name: libsamplerate-dev
    pipeline:
      - uses: split/dev
    description: libsamplerate dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check

  - name: libsamplerate-doc
    pipeline:
      - uses: split/manpages
    description: libsamplerate manpages

update:
  release-monitor:
    identifier: 1716

test:
  environment:
    contents:
      packages:
        - gcc
        - glibc-dev
        - libsamplerate-dev
  pipeline:
    - runs: |
        #!/bin/bash

        # Define the name of the temporary C source file and compiled binary
        c_source="test_libsamplerate.c"
        binary="test_libsamplerate"

        # Write the C program to a temporary file
        cat << 'EOF' > $c_source
        #include <stdio.h>
        #include <stdlib.h>
        #include <samplerate.h>

        int main() {
            int error;
            SRC_STATE* src = src_new(SRC_LINEAR, 1, &error); // Initialize SRC_STATE

            if (src == NULL) {
                printf("libsamplerate initialization failed: %s\n", src_strerror(error));
                return 1; // Exit with error status if initialization fails
            }

            src_delete(src); // Clean up
            printf("libsamplerate basic test passed.\n");

            return 0; // Exit successfully
        }
        EOF

        # Compile the C program
        gcc -o $binary $c_source -lsamplerate

        # Check if compilation was successful
        if [ $? -ne 0 ]; then
            echo "Compilation failed."
            exit 1
        fi

        # Run the compiled binary
        ./$binary

        # Clean up: Remove the temporary source file and binary
        rm $c_source $binary
    - uses: test/tw/ldd-check
