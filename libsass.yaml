package:
  name: libsass
  version: "3.6.6"
  epoch: 1
  description: C/C++ implementation of a Sass compiler
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - libtool
      - wolfi-baselayout

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/sass/libsass
      tag: ${{package.version}}
      expected-commit: 7037f03fabeb2b18b5efa84403f5a6d7a990f460

  - runs: autoreconf -vfi

  - uses: autoconf/configure
    with:
      opts: |
        --disable-static

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    description: C/C++ implementation of a Sass compiler - development files
    dependencies:
      runtime:
        - libsass
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf

update:
  enabled: true
  github:
    identifier: sass/libsass

test:
  environment:
    contents:
      packages:
        - build-base
        - libsass-dev
  pipeline:
    - name: "Verify basic SASS compilation"
      runs: |
        cat << EOF > test.c
        #include <sass/context.h>
        #include <stdio.h>
        #include <string.h>
        #include <stdlib.h>

        int main() {
            struct Sass_Data_Context* data_ctx;
            struct Sass_Context* ctx;
            struct Sass_Options* options;

            const char* source = "body { color: #333; h1 { font-size: 20px; } }";
            data_ctx = sass_make_data_context(strdup(source));
            ctx = sass_data_context_get_context(data_ctx);
            options = sass_context_get_options(ctx);

            sass_option_set_precision(options, 10);
            sass_option_set_source_comments(options, false);

            int status = sass_compile_data_context(data_ctx);
            const char* output = sass_context_get_output_string(ctx);

            if (status != 0) {
                printf("Compilation failed: %s\n", sass_context_get_error_message(ctx));
                return 1;
            }

            if (!output || !strstr(output, "body {")) {
                printf("Invalid output\n");
                return 1;
            }

            sass_delete_data_context(data_ctx);
            return 0;
        }
        EOF

        gcc test.c -o test_sass -lsass
        ./test_sass
    - name: "Test variable compilation"
      runs: |
        cat << EOF > test_vars.c
        #include <sass/context.h>
        #include <stdio.h>
        #include <string.h>
        #include <stdlib.h>

        int main() {
            struct Sass_Data_Context* data_ctx;
            struct Sass_Context* ctx;

            const char* source = "\$primary: #007bff; .button { background-color: \$primary; }";
            data_ctx = sass_make_data_context(strdup(source));
            ctx = sass_data_context_get_context(data_ctx);

            int status = sass_compile_data_context(data_ctx);
            const char* output = sass_context_get_output_string(ctx);

            if (status != 0) {
                printf("Compilation failed: %s\n", sass_context_get_error_message(ctx));
                return 1;
            }

            if (!output || !strstr(output, "#007bff")) {
                printf("Variable processing failed\n");
                return 1;
            }

            sass_delete_data_context(data_ctx);
            return 0;
        }
        EOF

        gcc test_vars.c -o test_vars -lsass
        ./test_vars
    - name: "Test nested rules compilation"
      runs: |
        cat << EOF > test_nesting.c
        #include <sass/context.h>
        #include <stdio.h>
        #include <string.h>
        #include <stdlib.h>

        int main() {
            struct Sass_Data_Context* data_ctx;
            struct Sass_Context* ctx;

            const char* source = ".nav { padding: 10px; &__item { color: blue; } }";
            data_ctx = sass_make_data_context(strdup(source));
            ctx = sass_data_context_get_context(data_ctx);

            int status = sass_compile_data_context(data_ctx);
            const char* output = sass_context_get_output_string(ctx);

            if (status != 0) {
                printf("Compilation failed: %s\n", sass_context_get_error_message(ctx));
                return 1;
            }

            if (!output || !strstr(output, ".nav__item")) {
                printf("Nested rules processing failed\n");
                return 1;
            }

            sass_delete_data_context(data_ctx);
            return 0;
        }
        EOF

        gcc test_nesting.c -o test_nesting -lsass
        ./test_nesting
