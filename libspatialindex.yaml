package:
  name: libspatialindex
  version: 2.1.0
  epoch: 2
  description: "C++ implementation of R*-tree, an MVR-tree and a TPR-tree with C API"
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/libspatialindex/libspatialindex
      tag: ${{package.version}}
      expected-commit: 175b56a9541e76982d13dbbf0c9b8f0b8d752619

  - uses: cmake/configure

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: libspatialindex-dev
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf
        - uses: test/tw/ldd-check

test:
  environment:
    contents:
      packages:
        - libspatialindex-dev
        - build-base
  pipeline:
    - name: "Check libspatialindex.h header"
      runs: |
        test -f /usr/include/spatialindex/RTree.h
    - uses: test/tw/ldd-check
    - name: "Check libspatialindex.so library"
      runs: |
        test -f /usr/lib/libspatialindex.so
    - name: "Check if libspatialindex can be linked"
      runs: |
        # This test was taken from here:
        # https://raw.githubusercontent.com/libspatialindex/libspatialindex/refs/heads/main/test/geometry/Intersection.cc
        cat > test.cc << EOF
          #include <spatialindex/SpatialIndex.h>

          using namespace SpatialIndex;
          using namespace std;

          /*
          * Test the Geometry
          * Nowhere near complete, but it's something
          */
          int main(int /*argc*/, char** /*argv*/) {
              //define points
              double c1[2] = {1.0, 0.0};
              double c2[2] = {3.0, 2.0};
              double c3[2] = {2.0, 0.0};
              double c4[2] = {2.0, 4.0};
              double c5[2] = {1.0, 1.0};
              double c6[2] = {2.5, 3.0};
              double c7[2] = {1.0, 2.0};
              double c8[2] = {0.0, -1.0};
              double c9[2] = {4.0, 3.0};
              Point p1 = Point(&c1[0], 2);
              Point p2 = Point(&c2[0], 2);
              Point p3 = Point(&c3[0], 2);
              Point p4 = Point(&c4[0], 2);
              Point p5 = Point(&c5[0], 2);
              Point p6 = Point(&c6[0], 2);
              Point p7 = Point(&c7[0], 2);
              Point p8 = Point(&c8[0], 2);
              Point p9 = Point(&c9[0], 2);

              double c3a[2] = {2.0, 3.0};
              Point p3a = Point(&c3a[0], 2);

              //Now Test LineSegment intersection
              LineSegment ls1 = LineSegment(p1, p2);
              LineSegment ls2 = LineSegment(p3, p4);
              LineSegment ls3 = LineSegment(p3a, p4);

              if (!ls1.intersectsShape(ls2)) {
                  cerr << "Test failed:  intersectsShape returned false, but should be true." << endl;
                  cerr << ls1 << ", " << ls2 << endl;
                  return -1;
              }

              if (ls1.intersectsShape(ls3)) {
                  cerr << "Test failed:  intersectsShape returned true, but should be false." << endl;
                  cerr << ls1 << ", " << ls3 << endl;
                  return -1;
              }

              //Now LineSegment Region intersection
              Region r1 = Region(p5, p6);
              Region r2 = Region(p7, p6);
              Region r3 = Region(p8, p9);

              if (!r1.intersectsShape(ls1) || !ls1.intersectsShape(r1)) {
                  cerr << "Test failed:  intersectsShape returned false, but should be true." << endl;
                  cerr << r1 << ", " << ls1 << endl;
                  return -1;
              }

              if (r2.intersectsShape(ls1) || ls1.intersectsShape(r2)) {
                  cerr << "Test failed:  intersectsShape returned true, but should be false." << endl;
                  cerr << r2 << ", " << ls1 << endl;
                  return -1;
              }

              // This is the contains test
              if (!r3.intersectsShape(ls1) || !ls1.intersectsShape(r3)) {
                  cerr << "Test failed:  intersectsShape returned false, but should be true." << endl;
                  cerr << r3 << ", " << ls1 << endl;
                  return -1;
              }

              return 0;
          }

        EOF

        # Compile user space program
        g++ -o test_prog test.cc -lspatialindex

        # Run the program to check if it can open the BPF object
        ./test_prog

update:
  enabled: true
  github:
    identifier: libspatialindex/libspatialindex
