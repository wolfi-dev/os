package:
  name: libyang
  version: 3.7.8
  epoch: 0
  description: YANG data modeling language library
  copyright:
    - license: BSD-3-Clause

environment:
  contents:
    packages:
      - build-base
      - cmake
      - cmocka-dev
      - doxygen
      - graphviz
      - pcre2-dev
      - tcl
      - valgrind

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 03e294d83b610f89e8ba7b2156a80dc0ad534443
      repository: https://github.com/CESNET/libyang
      tag: v${{package.version}}

  - uses: cmake/configure
    with:
      opts: |
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=True \
        -DCMAKE_C_FLAGS="$CFLAGS"

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: libyang-dev
    description: dev library for libyang
    dependencies:
      runtime:
        - libyang
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf

  - name: libyang-doc
    pipeline:
      - uses: split/manpages
    description: libyang manpages
    test:
      pipeline:
        - uses: test/docs

  - name: libyang-debug
    pipeline:
      - uses: split/debug
    description: libyang debug

update:
  enabled: true
  github:
    identifier: CESNET/libyang
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - glibc-dev
        - gcc
        - pkgconf
        - libyang-dev
  pipeline:
    - name: version test
      runs: /usr/bin/yanglint --version | grep ${{package.version}}
    - name: libyang-dev headers file
      runs: |
        stat /usr/include/libyang/*.h
        stat /usr/lib/libyang.so
    - name: run a sample test
      runs: |
        cat <<EOF > yang.c
        #include <stdio.h>
        #include <stdlib.h>
        #include <libyang/libyang.h>

        int main() {
            struct lys_module *mod = NULL;
            struct ly_ctx *ctx = NULL;

            if (ly_ctx_new(NULL, 0, &ctx) != LY_SUCCESS) {
                fprintf(stderr, "failed to create context\n");
                exit(1);
            }

            printf("libyang version: %s\n", LIBYANG_VERSION);

            const char *yang_model = "module example { namespace \"urn:example\"; prefix ex; leaf example-leaf { type string; } }";

            if (lys_parse_mem(ctx, yang_model, LYS_IN_YANG, &mod) != LY_SUCCESS) {
                fprintf(stderr, "failed to parse module\n");
                ly_ctx_destroy(ctx);
                exit(1);
            }
            printf("parsed '%s' yang module\n", mod->name);
            ly_ctx_destroy(ctx);
        }
        EOF

        gcc -o yang yang.c -l:libyang.so -DLIBYANG_VERSION=\"$(pkg-config --modversion libyang)\"
        ./yang
        ./yang | grep ${{package.version}}
        ./yang | grep "parsed 'example' yang module"
