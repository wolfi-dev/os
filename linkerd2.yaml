package:
  name: linkerd2
  version: "25.9.1"
  epoch: 0 # GHSA-xwfj-jgwm-7wp5
  description: "meta linkerd package"
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - merged-bin
      - wolfi-baselayout

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - cargo-auditable
      - clang
      - cmake
      - nodejs
      - openssl-dev
      - perl-dev
      - rust
      - yarn

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 3e6383f8aa72ae4e172c3ed119eea00a5c2ca01d
      repository: https://github.com/linkerd/linkerd2/
      tag: edge-${{package.version}}

  - uses: rust/cargobump

subpackages:
  - name: ${{package.name}}-web
    pipeline:
      - runs: |
          ./bin/web setup install --frozen-lockfile
          ./bin/web build
          go build -mod=readonly -o web/web -ldflags "-w" ./web
          mkdir -p ${{targets.contextdir}}/app
          mkdir -p ${{targets.contextdir}}/templates
          cp -r ./web/app/dist ${{targets.contextdir}}/app
          cp -r ./web/templates ${{targets.contextdir}}/
          cp ./web/web ${{targets.contextdir}}/
    test:
      pipeline:
        - name: version and help message
          runs: |
            /web -version
            /web -help
            /web > web.log 2>&1 && cat web.log | grep 'starting admin server'
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-cli
    pipeline:
      - uses: go/build
        with:
          packages: ./cli
          tags: prod
          output: linkerd
          ldflags: -X github.com/linkerd/linkerd2/pkg/version.Version=edge-${{package.version}}
    test:
      pipeline:
        - name: linkerd version check
          runs: linkerd version --client | grep ${{package.version}}
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-proxy-identity
    pipeline:
      - uses: go/build
        with:
          packages: ./proxy-identity
          output: linkerd2-proxy-identity
          install-dir: lib/linkerd
    test:
      pipeline:
        - name: check presence of required files
          runs: |
            # executable doesn't have help or version flag.
            stat /usr/lib/linkerd/linkerd2-proxy-identity
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  # included policy-controller which was merged in https://github.com/linkerd/linkerd2/pull/14348
  - name: ${{package.name}}-controller
    pipeline:
      - uses: go/build
        with:
          packages: ./controller/cmd/main.go
          tags: prod
          output: controller
      - runs: |
          export RUSTFLAGS="$RUSTFLAGS --cfg tokio_unstable"
          cargo auditable build --release --package=linkerd-policy-controller
          mkdir -p ${{targets.contextdir}}/usr/bin
          mv ./target/release/linkerd-policy-controller ${{targets.contextdir}}/usr/bin
      - uses: strip
    test:
      pipeline:
        - name: check presence of required files
          runs: |
            # executable doesn't have help or version flag.
            stat /usr/bin/controller
            stat /usr/bin/linkerd-policy-controller
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-controller-compat
    description: "upstream image has executable placed at /"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          ln -sf /usr/bin/controller ${{targets.contextdir}}/controller
          ln -sf /usr/bin/linkerd-policy-controller ${{targets.contextdir}}/linkerd-policy-controller
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-metrics-api
    dependencies:
      runtime:
        - ca-certificates-bundle
        - merged-bin
        - wolfi-baselayout
    pipeline:
      - uses: go/build
        with:
          packages: ./viz/metrics-api/cmd/main.go
          tags: prod
          output: metrics-api
    test:
      pipeline:
        - name: version and help message
          runs: |
            /usr/bin/metrics-api -version
            /usr/bin/metrics-api -help

  - name: ${{package.name}}-metrics-api-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}
          ln -sf /usr/bin/metrics-api ${{targets.contextdir}}/metrics-api
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-tap
    pipeline:
      - uses: go/build
        with:
          packages: ./viz/tap/cmd/main.go
          tags: prod
          output: tap
    test:
      pipeline:
        - runs: |
            # executable doesn't have help or version flags
            # it only take two args https://github.com/linkerd/linkerd2/blob/main/viz/tap/cmd/main.go (to be run inside kubernetes)
            stat /usr/bin/tap
            /usr/bin/tap api 2>&1 | grep "starting admin server"
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  - name: ${{package.name}}-tap-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}
          ln -sf /usr/bin/tap ${{targets.contextdir}}/tap
    dependencies:
      runtime:
        - merged-bin
        - wolfi-baselayout

  # the linkerd debug image doesn't have linkerd2 binaries, but has a number of tools
  - name: ${{package.name}}-debug
    description: "utilities for the linkerd debug container"
    dependencies:
      runtime:
        - bind-tools
        - conntrack-tools
        - coreutils
        - curl
        - findutils
        - grep
        - iproute2
        - iptables
        - iptables-xtables-privileged
        - jq
        - libcap
        - libcap-utils
        - lsof
        - merged-bin
        - nghttp2
        - openssl
        - sed
        - tcpdump
        - tshark
        - util-linux-misc
        - wolfi-baselayout

update:
  enabled: true
  github:
    identifier: linkerd/linkerd2
    tag-filter: edge-
    strip-prefix: edge-

# Based on package size if was determined that this origin package is empty apart from its own SBOM and this test was added to confirm it is empty and will fail if the package is not longer empty (contains more than an SBOM)
test:
  pipeline:
    - uses: test/emptypackage
