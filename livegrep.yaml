package:
  name: livegrep
  version: "0.0.1"
  epoch: 0
  description: Interactive grep for source code
  copyright:
    - license: BSD-2-Clause
  resources:
    cpu: 16
    memory: 8Gi

environment:
  contents:
    packages:
      - bash
      - bazel-7
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-18
      - cmake
      - coreutils
      - gflags-dev
      - git
      - go
      - libgit2-dev
      - libstdc++-6
      - libstdc++-6-dev
      - linux-headers
      - llvm-18
      - llvm-18-dev
      - llvm-libcxx-18
      - llvm-libcxx-18-dev
      - llvm-libcxxabi-18
      - llvm-lld-18~18
      - openjdk-21
      - re2-dev
      - wolfi-baselayout

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/livegrep/livegrep
      expected-commit: 136a311a8991fe79c49f92de1aa7c81fdbb3e4df
      destination: livegrep

  - runs: "export JAVA_HOME=/usr/lib/jvm/java-21-openjdk\nexport PATH=\"/usr/lib/jvm/java-21-openjdk/bin:$PATH\"\nmkdir -p .cache/bazel/_bazel_root\n\ncd livegrep\n\n# Fix Python root user issue by adding Python toolchain to MODULE.bazel\necho '' >> MODULE.bazel\necho '# Add Python toolchain with root user workaround' >> MODULE.bazel\necho 'bazel_dep(name = \"rules_python\", version = \"1.0.0\")' >> MODULE.bazel\necho 'python = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")' >> MODULE.bazel\necho 'python.toolchain(' >> MODULE.bazel\necho '    configure_coverage_tool = False,' >> MODULE.bazel\necho '    ignore_root_user_error = True,' >> MODULE.bazel\necho '    python_version = \"3.11\",' >> MODULE.bazel\necho ')' >> MODULE.bazel\n\n# Build C++ tools individually\necho \"=== Building C++ tools ===\"\nbazel build --verbose_failures \\\n  -c opt \\\n  //src/tools:codesearch \\\n  //src/tools:codesearchtool \\\n  //src/tools:analyze-re \\\n  //src/tools:dump-file \\\n  //src/tools:inspect-index\n\necho \"=== C++ tools built successfully ===\"\n\n# Build Go tools individually \necho \"=== Building Go tools ===\"\n\n# Build all Go tools in one command to be more efficient\nbazel build --verbose_failures -c opt \\\n  //cmd/lg:lg \\\n  //cmd/livegrep:livegrep \\\n  //cmd/livegrep-fetch-reindex:livegrep-fetch-reindex \\\n  //cmd/livegrep-github-reindex:livegrep-github-reindex \\\n  //cmd/livegrep-reload:livegrep-reload\n\necho \"=== Go builds completed successfully ===\"\n\n# Create installation directories\nmkdir -p ${{targets.destdir}}/usr/bin/\n\n# Install C++ tools\ncp bazel-bin/src/tools/codesearch ${{targets.destdir}}/usr/bin/\ncp bazel-bin/src/tools/codesearchtool ${{targets.destdir}}/usr/bin/\ncp bazel-bin/src/tools/analyze-re ${{targets.destdir}}/usr/bin/\ncp bazel-bin/src/tools/dump-file ${{targets.destdir}}/usr/bin/\ncp bazel-bin/src/tools/inspect-index ${{targets.destdir}}/usr/bin/\n\n# Install Go tools with robust path discovery\necho \"=== Installing Go tools ===\"\n\n# Function to find and install Go binary with fallback discovery\ninstall_go_binary() {\n  local target_name=\"$1\"\n  local binary_name=\"$2\"\n  \n  echo \"Installing $binary_name...\"\n  \n  # Primary path: bazel-bin/cmd/{name}/{name}_/{name}\n  if [ -f \"bazel-bin/cmd/$target_name/${target_name}_/$binary_name\" ]; then\n    cp \"bazel-bin/cmd/$target_name/${target_name}_/$binary_name\" \"${{targets.destdir}}/usr/bin/$binary_name\"\n    echo \"  ✓ Found $binary_name at primary path\"\n    return 0\n  fi\n  \n  # Fallback 1: bazel-bin/cmd/{name}/{name}\n  if [ -f \"bazel-bin/cmd/$target_name/$binary_name\" ]; then\n    cp \"bazel-bin/cmd/$target_name/$binary_name\" \"${{targets.destdir}}/usr/bin/$binary_name\"\n    echo \"  ✓ Found $binary_name at fallback path 1\"\n    return 0\n  fi\n  \n  # Fallback 2: Search bazel-bin for the binary\n  local found_path=$(find bazel-bin -name \"$binary_name\" -type f -executable 2>/dev/null | head -1)\n  if [ -n \"$found_path\" ] && [ -f \"$found_path\" ]; then\n    cp \"$found_path\" \"${{targets.destdir}}/usr/bin/$binary_name\"\n    echo \"  ✓ Found $binary_name at discovered path: $found_path\"\n    return 0\n  fi\n  \n  echo \"  ✗ Warning: $binary_name not found - skipping\"\n  return 1\n}\n\n# Install each Go binary with error handling\ninstall_go_binary \"lg\" \"lg\"\ninstall_go_binary \"livegrep\" \"livegrep\"\ninstall_go_binary \"livegrep-fetch-reindex\" \"livegrep-fetch-reindex\"\ninstall_go_binary \"livegrep-github-reindex\" \"livegrep-github-reindex\"\ninstall_go_binary \"livegrep-reload\" \"livegrep-reload\"\n\necho \"=== All tools installed successfully ===\"\n\n# Clean up cache\nrm -rf ../.cache/bazel/_bazel_root\n"

  - uses: strip

subpackages:
  - name: livegrep-backend
    description: Livegrep core search engine and C++ tools
    dependencies:
      runtime:
        - gflags
        - libgit2
        - re2
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          # C++ tools from cc_tools (excluding livegrep-reload which is Go-based)
          for tool in codesearch codesearchtool analyze-re dump-file inspect-index; do
            if [ -f ${{targets.destdir}}/usr/bin/$tool ]; then
              mv ${{targets.destdir}}/usr/bin/$tool ${{targets.subpkgdir}}/usr/bin/
              echo "✓ Installed $tool to livegrep-backend"
            else
              echo "✗ Warning: $tool not found"
            fi
          done

          # livegrep-reload is Go-based but belongs in backend package
          if [ -f ${{targets.destdir}}/usr/bin/livegrep-reload ]; then
            mv ${{targets.destdir}}/usr/bin/livegrep-reload ${{targets.subpkgdir}}/usr/bin/
            echo "✓ Installed livegrep-reload to livegrep-backend"
          else
            echo "✗ Warning: livegrep-reload not found"
          fi
    test:
      pipeline:
        - name: "Verify C++ tools installation and basic functionality"
          runs: |
            # Test codesearch binary exists and shows help
            codesearch --help

            # Test codesearchtool binary exists and shows help
            codesearchtool --help

            # Test analysis tools exist and show help
            analyze-re --help
            dump-file --help
            inspect-index --help

            # Test reload utility exists
            livegrep-reload --help || echo "livegrep-reload may require server connection"

  - name: livegrep-web
    description: Livegrep web frontend server
    dependencies:
      runtime:
        - livegrep-backend=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          if [ -f ${{targets.destdir}}/usr/bin/livegrep ]; then
            mv ${{targets.destdir}}/usr/bin/livegrep ${{targets.subpkgdir}}/usr/bin/
            echo "✓ Installed livegrep web server"
          else
            echo "✗ Error: livegrep web server binary not found"
            exit 1
          fi
    test:
      pipeline:
        - name: "Verify web server binary installation"
          runs: |
            # Test livegrep web server binary exists and shows help
            livegrep --help

  - name: livegrep-cli
    description: Livegrep command-line client
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          if [ -f ${{targets.destdir}}/usr/bin/lg ]; then
            mv ${{targets.destdir}}/usr/bin/lg ${{targets.subpkgdir}}/usr/bin/
            echo "✓ Installed lg CLI client"
          else
            echo "✗ Error: lg CLI client binary not found"
            exit 1
          fi
    test:
      pipeline:
        - name: "Verify CLI client binary installation"
          runs: |
            # Test lg CLI client binary exists and shows help
            lg --help

  - name: livegrep-indexer
    description: Livegrep repository indexing tools
    dependencies:
      runtime:
        - livegrep-backend=${{package.full-version}}
        - git
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          if [ -f ${{targets.destdir}}/usr/bin/livegrep-fetch-reindex ]; then
            mv ${{targets.destdir}}/usr/bin/livegrep-fetch-reindex ${{targets.subpkgdir}}/usr/bin/
            echo "✓ Installed livegrep-fetch-reindex"
          else
            echo "✗ Error: livegrep-fetch-reindex binary not found"
            exit 1
          fi
    test:
      pipeline:
        - name: "Verify repository indexing tool installation"
          runs: |
            # Test livegrep-fetch-reindex binary exists and shows help
            livegrep-fetch-reindex --help

  - name: livegrep-github
    description: Livegrep GitHub integration tools
    dependencies:
      runtime:
        - livegrep-backend=${{package.full-version}}
        - git
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin/
          if [ -f ${{targets.destdir}}/usr/bin/livegrep-github-reindex ]; then
            mv ${{targets.destdir}}/usr/bin/livegrep-github-reindex ${{targets.subpkgdir}}/usr/bin/
            echo "✓ Installed livegrep-github-reindex"
          else
            echo "✗ Error: livegrep-github-reindex binary not found"
            exit 1
          fi
    test:
      pipeline:
        - name: "Verify GitHub integration tool installation"
          runs: |
            # Test livegrep-github-reindex binary exists and shows help
            livegrep-github-reindex --help

test:
  environment:
    contents:
      packages:
        - bash
        - git
  pipeline:
    - name: "Verify all packages are installable"
      runs: |
        # This is a metapackage test - individual tools are tested in subpackages
        echo "All subpackages created successfully"

update:
  enabled: false
