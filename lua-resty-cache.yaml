package:
  name: lua-resty-cache
  version: "0.15"
  epoch: 2
  description: "lua-resty-lrucache - Lua-land LRU cache based on the LuaJIT FFI."
  copyright:
    - license: BSD-3-Clause

environment:
  contents:
    packages:
      - bash
      - build-base
      - ca-certificates-bundle
      - wolfi-base
  environment:
    PREFIX: /usr

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/openresty/lua-resty-lrucache
      tag: v${{package.version}}
      expected-commit: 3ff6300e68b73ba20e909c7d16bd839aef2e5a4b

  - uses: autoconf/make-install

update:
  enabled: true
  github:
    identifier: openresty/lua-resty-lrucache
    strip-prefix: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - bash
        - luajit
  pipeline:
    - name: "Check lua-resty-cache Installation"
      runs: |
        echo "Verifying lua-resty-cache installation..."
        if [ -f "/usr/lib/lua/resty/lrucache.lua" ]; then
          echo "lua-resty-cache module found."
        else
          echo "lua-resty-cache module not found!" && exit 1
        fi
    - name: "Test lua-resty-cache with ngx Mock"
      runs: |
        echo "Running a simple Lua script with resty.lrucache..."

        # Set the correct LUA_PATH and LUA_CPATH
        export LUA_PATH="/usr/lib/lua/?.lua;;"
        export LUA_CPATH="/usr/lib/lua/?.so;;"

        # Create a simple ngx mock for tests to avoid errors
        cat <<EOF > test_cache.lua
        ngx = {}
        local lrucache = require "resty.lrucache"

        -- Create a cache with a max size of 10
        local cache = lrucache.new(10)

        -- Test setting and getting a value
        cache:set("cat", "meow")
        local result = cache:get("cat")

        -- Assert that the result matches the expected output
        if result ~= "meow" then
          error("Test failed! Expected 'meow' but got " .. tostring(result))
        else
          print("Test passed! Got the expected result: " .. result)
        end
        EOF

        # Run the Lua script
        luajit test_cache.lua
