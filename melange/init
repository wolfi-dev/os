#!/bin/busybox sh
set -e
set -x

PATH=/usr/bin:/usr/sbin:/sbin:/bin

mount -t proc proc -o nodev,nosuid,hidepid=2 /proc
mount -t devtmpfs -o nosuid,noexec devtmpfs /dev
mount -t sysfs sys -o nodev,nosuid,noexec /sys
mount -t tmpfs -o nodev,nosuid,noexec tmpfs /tmp

# Setup tty/pty
mkdir /dev/pts
mount -t devpts devpts -o noexec,nosuid,newinstance,ptmxmode=0666,mode=0620,gid=tty /dev/pts/
mount --bind /dev/pts/ptmx /dev/ptmx

# ldconfig is run to prime ld.so.cache for glibc packages which require it.
if [ -x /sbin/ldconfig ]; then
	ldconfig /lib /usr/lib /usr/lib64
fi

# Fetch settings from cmdline
DNS="$(tr ' ' '\n' < /proc/cmdline | grep "dns=" | cut -d'=' -f2-)"
HOSTNAME="$(tr ' ' '\n' < /proc/cmdline | grep "hostname=" | cut -d'=' -f2-)"
SSHKEY="$(tr ' ' '\n' < /proc/cmdline | grep "sshkey=" | cut -d'=' -f2- | base64 -d)"

if [ -z "${SSHKEY}" ]; then
	echo "Missing default mount for ssh keys"
	exit 1
fi

# We can ignore this fail, if we use a kernel with kvm_guest.config, we won't need this
# and network will work anyway
# If this fails and we won't have network, the ifconfig command will fail anyway.
# Also we load cpu accelleration drivers in case those are needed.
depmod -a || :
sort -u /sys/devices/system/cpu/modalias | xargs -n1 modprobe 2>/dev/null || :
sort -u /sys/devices/pci*/*/virtio*/modalias | xargs -n1 modprobe 2>/dev/null || :
# modprobe 9p if absent
if ! grep -q 9p /proc/filesystems; then
	modprobe virtio
	modprobe virtio_blk
	modprobe virtio_gpu
	modprobe virtio_net
	modprobe virtio_pci
	modprobe virtio_pci_legacy_dev
	modprobe virtio_pci_modern_dev
	modprobe virtio_pmem
	modprobe virtio_ring
	modprobe virtio_rng
	modprobe virtio_scsi
	modprobe 9pnet_virtio
	modprobe 9pnet
	modprobe 9p
fi

# Setup default mountpoint for 9p shared dir
mount -t 9p -o trans=virtio -o version=9p2000.L -o security_model=mapped-xattr -o posixacl=on -o msize=104857600 defaultshare /mnt/

# If we have an external disk, we want to perform builds in that
if [ -e /dev/vda ]; then
	grep -q ext4 /proc/filesystems || modprobe ext4
	mkfs.ext4 -O ^has_journal /dev/vda
	mkdir -p /mount
	mount -o nobarrier,noatime,nodiratime,nobh -t ext4 /dev/vda /mount
	# We need to have more space not only for rootless builds, but also for
	# rootful ones, and have space for cache for downloads
	mkdir -p /mount/build /mount/root /mount/cache
	mount --bind /mount/build /home/build
	mount --bind /mount/cache /var/cache
	mount --bind /mount/root /root
fi

# Fix home permissions from cpio command
if grep -q build /etc/passwd; then
	chown -R build:build /home/build
fi

# Setup default network
interface_name="$(ip -o link show | grep 'BROADCAST,MULTICAST' | head -n 1 | cut -d':' -f2 | tr -d ' ')"
ip link set lo up
ip link set "${interface_name:-"eth0"}" up
ip addr add 10.0.2.15/24 dev "${interface_name:-"eth0"}"
ip route add default via 10.0.2.2 dev "${interface_name:-"eth0"}"

hostname "${HOSTNAME:-"wolfi-vm"}"
echo "${HOSTNAME:-"wolfi-vm"}" > /etc/hostname
echo "127.0.0.1 ${HOSTNAME:-"wolfi-vm"}" >> /etc/hosts
echo "nameserver ${DNS:-"10.0.2.3"}" > /etc/resolv.conf

##############
# Entrypoint #
##############
# Setup SSH keys for external access
mkdir -p -m 0700 /root/.ssh/ /home/build/.ssh/
echo "${SSHKEY}" > /root/.ssh/authorized_keys
echo "${SSHKEY}" > /home/build/.ssh/authorized_keys
chmod 0400 /root/.ssh/authorized_keys /home/build/.ssh/authorized_keys
if grep -q build /etc/passwd; then
	chown -R build:build /home/build/.ssh/
fi
# Setting up AcceptEnv
echo "AcceptEnv *" >> /etc/ssh/sshd_config
ssh-keygen -A
exec /usr/sbin/sshd -D
