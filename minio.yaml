# Set update to manual:true because we also need to verify the bitnami repo (https://github.com/bitnami/containers/tree/main/bitnami/minio)
# for releases as you can see minio-bitnami-2025-compat is using hardcoded version-path: 2025/debian-12
# till we have a way to track such subpackage updates in bitnami repo, we will keep it manual
# Internal tracking issue here: https://github.com/chainguard-dev/internal-dev/issues/8397
# For now, I have added a check to verify if the path exists in GitHub in subpackage pipeline
package:
  name: minio
  version: "0.20250203.210304"
  epoch: 0
  description: Multi-Cloud Object Storage
  copyright:
    - license: AGPL-3.0-or-later

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - go
      - perl

var-transforms:
  - from: ${{package.version}}
    match: ^0\.(\d{4})(\d{2})(\d{2})\.(\d{2})(\d{2})(\d{2})$
    replace: RELEASE.${1}-${2}-${3}T${4}-${5}-${6}Z
    to: mangled-package-version

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/minio/minio
      tag: ${{vars.mangled-package-version}}
      expected-commit: 712fe1a8dfd64bbc3fde1863cbbf55ae17e7c911

  - runs: |
      make build
      mkdir -p ${{targets.destdir}}/usr/bin
      mv minio ${{targets.destdir}}/usr/bin
      mv dockerscripts/docker-entrypoint.sh ${{targets.destdir}}/usr/bin/docker-entrypoint.sh

  - uses: strip

subpackages:
  - name: minio-bitnami-2025-compat
    description: "compat package with bitnami/minio image"
    pipeline:
      - name: Check if the 2025/debian-12 path exists in GitHub
        runs: |
          # Make sure we fail on any error
          set -e

          # The path we need to check
          URL="https://github.com/bitnami/containers/tree/main/bitnami/minio/2025/debian-12"

          # Grab the HTTP status from the first line (e.g., "HTTP/2 200")
          # and extract the status code field (should be "200" if OK).
          CODE="$(curl -sI "$URL" | head -n 1 | cut -d' ' -f2)"

          if [ "$CODE" != "200" ]; then
            echo "ERROR: The GitHub path '$URL' does not exist or is not accessible. HTTP status code: $CODE"
            exit 1
          fi
      - uses: bitnami/compat
        with:
          image: minio
          version-path: 2025/debian-12
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/minio/bin/
          chmod g+rwX ${{targets.subpkgdir}}/opt/bitnami
          # Use package path while unpacking
          find ${{targets.subpkgdir}}/opt/bitnami -iname "*.sh" -exec sh -c '
              sed -i "s#/opt/bitnami#${{targets.subpkgdir}}/opt/bitnami#g" "$1"
              sed -i "s#\"/bitnami\"#\"${{targets.subpkgdir}}/bitnami\"#g" "$1"
              sed -i "s#\"/certs\"#\"${{targets.subpkgdir}}/certs\"#g" "$1"
              sed -i "s#/bitnami/minio/data#${{targets.subpkgdir}}/bitnami/minio/data#g" "$1"
              sed -i "s#/.mc#${{targets.subpkgdir}}/.mc#g" "$1"
          ' sh {} \;
            ${{targets.subpkgdir}}/opt/bitnami/scripts/minio-client/postunpack.sh || true
            ${{targets.subpkgdir}}/opt/bitnami/scripts/minio/postunpack.sh || true
          # Restore path
          find ${{targets.subpkgdir}}/opt/bitnami -type f -exec sed 's#${{targets.subpkgdir}}##g' -i {} \;
    test:
      pipeline:
        - runs: |
            run-script --version
            run-script --help

update:
  enabled: true
  manual: true
  version-transform:
    - match: ^RELEASE\.(\d{4})-(\d{2})-(\d{2})T(\d{2})-(\d{2})-(\d{2})Z$
      replace: 0.${1}${2}${3}.${4}${5}${6}
  github:
    identifier: minio/minio
    use-tag: true

test:
  environment:
    contents:
      packages:
        - mc
        - curl
        - posix-libc-utils
  pipeline:
    - runs: |
        #!/bin/bash

        # Variables
        MINIO_ALIAS="myminio"
        BUCKET_NAME="test-bucket"
        TEST_FILE="testfile.txt"
        MINIO_BINARY="minio"
        MINIO_DATA_DIR="/data/minio"
        MINIO_SERVER_URL="http://localhost:9000"
        MINIO_ACCESS_KEY="minioadmin"
        MINIO_SECRET_KEY="minioadmin"

        # Function to start MinIO server
        start_minio() {
            echo "Starting MinIO server..."
            MINIO_ROOT_USER=$MINIO_ACCESS_KEY MINIO_ROOT_PASSWORD=$MINIO_SECRET_KEY $MINIO_BINARY server $MINIO_DATA_DIR &
            MINIO_PID=$!

            sleep 10
        }

        # Function to stop MinIO server
        stop_minio() {
            echo "Stopping MinIO server..."
            kill $MINIO_PID
            wait $MINIO_PID
        }

        # Function to check if MinIO is running
        check_minio() {
            echo "Checking if MinIO server is running..."
            if mc alias list | grep -q "$MINIO_ALIAS"; then
                echo "MinIO server is accessible."
                return 0
            else
                echo "MinIO server is not accessible."
                return 1
            fi
        }

        # Configure mc with default credentials
        configure_mc() {
            echo "Configuring mc with default credentials..."
            mc alias set "$MINIO_ALIAS" $MINIO_SERVER_URL "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"
        }

        # Main script
        if start_minio; then
            configure_mc

            if check_minio; then
                # Create a test file
                echo "Creating a test file..."
                echo "This is a test file." > $TEST_FILE

                # Create a bucket
                echo "Creating a bucket named $BUCKET_NAME..."
                mc mb "$MINIO_ALIAS/$BUCKET_NAME"

                # Upload the test file to the bucket
                echo "Uploading the test file to the bucket..."
                mc cp $TEST_FILE "$MINIO_ALIAS/$BUCKET_NAME"

                # List the contents of the bucket
                echo "Listing the contents of the bucket..."
                mc ls "$MINIO_ALIAS/$BUCKET_NAME"

                # Clean up
                echo "Cleaning up..."
                rm $TEST_FILE
                mc rb --force "$MINIO_ALIAS/$BUCKET_NAME"

                echo "MinIO test completed."
            else
                echo "MinIO server failed to respond. Exiting."
                exit 1
            fi

            stop_minio
        else
            echo "MinIO server failed to start. Exiting."
            exit 1
        fi
        docker-entrypoint.sh --version
        docker-entrypoint.sh --help
        minio --version
        minio --help
