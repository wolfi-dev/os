package:
  name: multus-cni
  version: "4.2.0"
  epoch: 3
  description: A CNI meta-plugin for multi-homed pods in Kubernetes
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/k8snetworkplumbingwg/multus-cni
      tag: v${{package.version}}
      expected-commit: 2a91646eafe7e777f54cc01134a430f4730325e2

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/oauth2@v0.27.0
        golang.org/x/net@v0.38.0

  - uses: go/build
    with:
      packages: ./cmd/multus
      ldflags: -X 'gopkg.in/k8snetworkplumbingwg/multus-cni.v4/pkg/multus.version=${{package.version}}'
      output: multus

  - uses: go/build
    with:
      packages: ./cmd/multus-daemon
      ldflags: -X 'gopkg.in/k8snetworkplumbingwg/multus-cni.v4/pkg/multus.version=${{package.version}}'
      output: multus-daemon

  - uses: go/build
    with:
      packages: ./cmd/multus-shim
      ldflags: -X 'gopkg.in/k8snetworkplumbingwg/multus-cni.v4/pkg/multus.version=${{package.version}}'
      output: multus-shim

  - uses: go/build
    with:
      packages: ./cmd/install_multus
      ldflags: -X 'gopkg.in/k8snetworkplumbingwg/multus-cni.v4/pkg/multus.version=${{package.version}}'
      output: install_multus

  - uses: go/build
    with:
      packages: ./cmd/thin_entrypoint
      ldflags: -X 'gopkg.in/k8snetworkplumbingwg/multus-cni.v4/pkg/multus.version=${{package.version}}'
      output: thin_entrypoint

  - uses: strip

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/src/multus-cni/bin
          ln -sf /usr/bin/multus ${{targets.contextdir}}/usr/src/multus-cni/bin/multus
          ln -sf /usr/bin/multus-shim ${{targets.contextdir}}/usr/src/multus-cni/bin/multus-shim
          ln -sf /usr/bin/multus-daemon ${{targets.contextdir}}/usr/src/multus-cni/bin/multus-daemon
          ln -sf /usr/bin/install_multus ${{targets.contextdir}}/install_multus
          ln -s /usr/bin/thin_entrypoint ${{targets.contextdir}}/thin_entrypoint

update:
  enabled: true
  github:
    identifier: k8snetworkplumbingwg/multus-cni
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - multus-cni-compat
  pipeline:
    - runs: |
        multus -version
        multus-daemon -h
        multus-shim -h
        multus --version
        multus --help
        multus-daemon --help
        multus-shim --version
        multus-shim --help
        thin_entrypoint version
        thin_entrypoint help
    - name: "Check compat paths"
      runs: |
        /usr/src/multus-cni/bin/multus -version
        /usr/src/multus-cni/bin/multus-shim -version
        /usr/src/multus-cni/bin/multus-daemon -help
        /thin_entrypoint --multus-log-level info
    - name: "Run multus with dummy config"
      runs: |
        echo '{"cniVersion": "0.3.1", "name": "test", "type": "multus"}' > /tmp/netconf.json
        output=$(multus < /tmp/netconf.json 2>&1)
        echo "$output"

        if echo "$output" | grep -qi "CNI protocol versions supported"; then
          echo "Multus responded correctly to dummy config."
        else
          echo "Multus output did not match expected output."
          exit 1
        fi
    - name: "Run thin_entrypoint and validate logs"
      uses: test/daemon-check-output
      with:
        setup: |
          mkdir -p /host/etc/cni/net.d
          mkdir -p /host/opt/cni/bin

          cat <<EOF > /host/etc/cni/net.d/10-flannel.conflist
          {
            "cniVersion": "0.3.1",
            "name": "cbr0",
            "plugins": [
              {
                "type": "flannel",
                  "delegate": {
                  "hairpinMode": true,
                  "isDefaultGateway": true
                }
              },
              {
                "type": "portmap",
                "capabilities": {"portMappings": true},
                "snat": true
              }
            ]
          }
          EOF
          mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
          echo "FAKE_CA_CERT" > /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          echo "fake-token" > /var/run/secrets/kubernetes.io/serviceaccount/token
          echo "default" > /var/run/secrets/kubernetes.io/serviceaccount/namespace
        start: |
          thin_entrypoint --multus-log-level=debug 2>&1
        timeout: 10
        expected_output: |
          kubeconfig file is created
          multus config file is created
        post: |
          echo "thin_entrypoint ran successfully with mocked environment"
