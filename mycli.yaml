package:
  name: mycli
  version: "1.31.1"
  epoch: 0
  description: "static code and composition analysis tool for IaC"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    runtime:
      - python3

environment:
  contents:
    packages:
      - ca-certificates-bundle
      - py3-cli-helpers
      - py3-click
      - py3-configobj
      - py3-cryptography
      - py3-gpep517
      - py3-installer
      - py3-prompt-toolkit
      - py3-pyaes
      - py3-pygments
      - py3-pymysql
      - py3-pyperclip
      - py3-setuptools
      - py3-sqlglot
      - py3-sqlparse
      - py3-wheel
      - python3
      - uv
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/dbcli/mycli.git
      tag: v${{package.version}}
      expected-commit: 5f487ab5b7f2484ba5d224d71ce7debe34391b9f

  - runs: |
      uv build

  - runs: |
      python3 -m installer -d "${{targets.destdir}}" dist/*.whl
      rm -rf "${{targets.destdir}}"/usr/lib/python3*/site-packages/test/

  - uses: strip

test:
  environment:
    contents:
      packages:
        - py3-click
        - py3-pymysql
        - py3-pyperclip
        - py3-sqlparse
  pipeline:
    - uses: python/import
      with:
        imports: |
          from mycli import __version__
    - uses: py/one-python
      with:
        content: |
          python3 <<-EOF
          from mycli import __version__
          from unittest.mock import Mock, patch, PropertyMock
          import pymysql

          expected_version = "${{package.version}}"
          assert __version__ == expected_version, f"Expected version {expected_version}, got {__version__}"
          print(f"Version check passed: {__version__}")

          # Test core mycli functionality
          from mycli.packages.special import iocommands
          assert hasattr(iocommands, 'write_tee')
          print("Core functionality test passed")

          # Test connection and query functionality
          from mycli.sqlexecute import SQLExecute
          with patch('pymysql.connect') as mock_connect:
              mock_conn = Mock()
              mock_cursor = Mock()

              # Setup the mock connection with proper version string
              type(mock_conn).server_version = PropertyMock(return_value='5.7.0-MySQL')
              mock_conn.get_server_info.return_value = '5.7.0-MySQL'
              mock_connect.return_value = mock_conn
              mock_conn.cursor.return_value = mock_cursor

              # Setup mock responses
              mock_cursor.fetchall.return_value = [("mycli",)]
              mock_cursor.description = [("Database",)]

              sql = SQLExecute(
                  host='localhost',
                  user='test',
                  password='test',
                  port=3306,
                  database='test',
                  socket=None,
                  charset='utf8mb4',
                  local_infile=False,
                  ssl=None,
                  ssh_user=None,
                  ssh_host=None,
                  ssh_port=None,
                  ssh_password=None,
                  ssh_key_filename=None,
              )

              # Test connection
              sql.connect()
              print("Connection test passed")

              # Test a basic query
              result = sql.run("SHOW DATABASES")
              assert result is not None
              print("Query test passed")

          print("All tests passed")
          EOF

update:
  enabled: true
  github:
    identifier: dbcli/mycli
    strip-prefix: v
