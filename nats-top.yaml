package:
  name: nats-top
  version: "0.6.3"
  epoch: 3
  description: A top-like tool for monitoring NATS servers.
  copyright:
    - license: MIT

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/nats-io/nats-top
      tag: v${{package.version}}
      expected-commit: 812d35cc991232d7606816a15b2ea0b12fb129e7

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/crypto@v0.35.0
        github.com/nats-io/nats-server/v2@v2.10.27

  - uses: go/build
    with:
      packages: .
      output: nats-top
      ldflags: -X main.version=${{package.version}} -X main.commit=$(git rev-parse HEAD) -X main.date=$(date -u -d "@$SOURCE_DATE_EPOCH" +"%Y-%m-%dT%H:%M:%SZ")

subpackages:
  - name: ${{package.name}}-compat
    description: Compat package for ${{package.name}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/usr/local/bin
          ln -s /usr/bin/nats-top "${{targets.contextdir}}"/usr/local/bin/nats-top

update:
  enabled: true
  github:
    identifier: nats-io/nats-top
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - nats-server
        - nats
        - util-linux-misc
        - mkcert
        - openssl
        - python3
  pipeline:
    - name: "Version test"
      runs: |
        nats-top --version 2>&1 | grep ${{package.version}}
    - name: Set up NATS server
      runs: |
        nats-server -p 4222 -m 8222 & sleep 2 &
    - name: Set up NATS subscribers
      runs: |
        nats sub -s "localhost:4222" client2 > /dev/null &
        sleep 3
        nats sub -s "localhost:4222" client1 > /dev/null &
        sleep 1
    - name: Test and validate nats-top (basic)
      runs: |
        nats-top -s localhost -b -u -o nats-output-${{package.version}}.txt
        grep -q "client1" nats-output-${{package.version}}.txt
        grep -q "client2" nats-output-${{package.version}}.txt
        grep -q "Connections Polled: 2" nats-output-${{package.version}}.txt
    - name: test connection limit (-n)
      runs: |
        nats-top -n 1 -o nats-output-${{package.version}}.txt
        grep -q "Connections Polled: 1" nats-output-${{package.version}}.txt
    - name: test sorting options (-sort)
      runs: |
        nats-top -sort uptime -u -o nats-output-${{package.version}}.txt & sleep 1
        grep -q client2 <(tail -1 nats-output-${{package.version}}.txt)
    - name: test output with delimiter (-l)
      runs: |
        nats-top -o nats-output-${{package.version}}.csv -l ","
        if [ ! -s "nats-output-${{package.version}}.csv" ]; then
          echo "Error: CSV File is empty!"
          exit 1
        fi
        # Sanitize the input
        sed -i '/^$/d' nats-output-${{package.version}}.csv
        # Ensure at least one column for each rows
        python -c "import csv; reader = csv.reader(open('nats-output-${{package.version}}.csv', 'r')); [print(row[0]) for row in reader]"
    - name: test setting refresh delay (-d) and refresh count (-r)
      runs: |
        export TERM=xterm
        script --quiet --return --command "timeout 3 nats-top -d 1 -r 3"
    - name: Generate certs for nats-top in TLS mode
      runs: |
        mkdir -p certs && cd certs
        # Using mkcert to generate certs
        mkcert -install
        mkcert -cert-file server-cert.pem -key-file server-key.pem localhost 127.0.0.1
        mkcert -client -cert-file client-cert.pem -key-file client-key.pem localhost 127.0.0.1
        cp "$(mkcert -CAROOT)/rootCA.pem" ca-cert.pem
        # Certs validation before injecting them into NATS
        openssl verify -CAfile ca-cert.pem server-cert.pem
        openssl verify -CAfile ca-cert.pem client-cert.pem
    - name: Set up NATS server in TLS mode
      runs: |
        pkill nats-server & sleep 2
        nats-server -p 4223 --https_port 8223 --tlsverify --tlscert ./certs/server-cert.pem --tlskey ./certs/server-key.pem --tlscacert ./certs/ca-cert.pem &
        sleep 2
    - name: Set up one NATS subscriber in TLS mode
      runs: |
        nats sub -s "localhost:4223" --tlscert ./certs/client-cert.pem --tlskey ./certs/client-key.pem --tlsca ./certs/ca-cert.pem "test.subject" > /dev/null &
        sleep 1
    - name: Test NATS top in TLS mode
      runs: |
        nats-top -s "localhost" -ms 8223 -u -cert ./certs/client-cert.pem -key ./certs/client-key.pem -cacert ./certs/ca-cert.pem -o nats-output-${{package.version}}.txt
        grep -q "test.subject" nats-output-${{package.version}}.txt
        grep -q "Connections Polled: 1" nats-output-${{package.version}}.txt
