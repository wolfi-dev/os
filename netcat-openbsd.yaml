package:
  name: netcat-openbsd
  version: "1.229"
  epoch: 0
  description: The TCP/IP swiss army knife. OpenBSD variant from debian.
  copyright:
    - license: BSD-3-Clause

environment:
  contents:
    packages:
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - libbsd-dev
      - libmd-dev
      - patch

pipeline:
  - uses: fetch
    with:
      uri: https://deb.debian.org/debian/pool/main/n/netcat-openbsd/netcat-openbsd_${{package.version}}.orig.tar.gz
      expected-sha512: ce778bcfb7a11f442479d9d49ddf268896082df6ac80ab8a99e0f865d78230192b42234720f330c3099941704bf93730fad4656d281c4754a4cb12f64db71f45

  - uses: fetch
    with:
      uri: https://deb.debian.org/debian/pool/main/n/netcat-openbsd/netcat-openbsd_${{package.version}}-1.debian.tar.xz
      expected-sha512: f815e55d33af9c4ff8eade5c5e54e36eb9832f64862a1aebb8cb9c17c3126b51cc97c57b0614e85fe7a70c816b6c5855a795b24b9623ef5bb05e9381e975f27b
      extract: false
      delete: false

  - runs: |
      mkdir -p debian
      tar -x '--strip-components=1' -f "netcat-openbsd_${{package.version}}-1.debian.tar.xz" -C debian
      while read -r patch; do
        patch -Np1 < ./debian/patches/"$patch"
      done < ./debian/patches/series

      # linux port requires b64_ntop. include in in SRCS (Makefile)
      # we also want this to link with libmd as well because it uses sha512update...
      sed -i Makefile -e "/SRCS=/s;\(.*\);& base64.c;"
      sed -i Makefile -e "s/\libbsd\b/& libmd/"

  - runs: |
      make CFLAGS="$CFLAGS -DDEBIAN_VERSION=\"\\\"${{package.version}}\\\"\""

  - runs: |
      install -Dm755 nc "${{targets.destdir}}"/usr/bin/nc
      install -Dm644 nc.1 "${{targets.destdir}}"/usr/share/man/man1/nc.openbsd.1

  - uses: strip

update:
  enabled: true
  release-monitor:
    identifier: 21534

test:
  pipeline:
    - name: Basic command verification
      runs: |
        test -f /usr/bin/nc
        test -x /usr/bin/nc
        nc -h
    - name: Basic functionality tests
      runs: |
        # Create test directory
        mkdir -p /tmp/nc-test

        # Start listener and capture its PID
        timeout 5 nc -l 12345 > /tmp/nc-test/received.txt &
        LISTENER_PID=$!
        sleep 1

        # Send data to the listener and check result
        echo "test" | nc -N localhost 12345
        SEND_STATUS=$?
        if [ $SEND_STATUS -ne 0 ]; then
            echo "Failed to send data: $SEND_STATUS"
            exit 1
        fi

        # Check listener received the data
        wait $LISTENER_PID
        if ! grep -q "test" /tmp/nc-test/received.txt; then
            echo "Data not received correctly"
            exit 1
        fi

        # Test UDP mode
        timeout 5 nc -u -l 12346 > /tmp/nc-test/udp_received.txt &
        UDP_LISTENER_PID=$!
        sleep 1

        echo "udp test" | nc -u localhost 12346
        UDP_SEND_STATUS=$?
        if [ $UDP_SEND_STATUS -ne 0 ]; then
            echo "Failed to send UDP data: $UDP_SEND_STATUS"
            exit 1
        fi
