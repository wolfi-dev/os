#nolint:valid-pipeline-git-checkout-tag
package:
  name: nextcloud-server
  version: 31.0.4
  epoch: 0
  description: "Nextcloud server, a safe home for all your data"
  copyright:
    - license: AGPL-3.0-or-later
  dependencies:
    runtime:
      - coreutils
      - findutils
      - grep
      - sed
      - flock
      - redis
      - rsync
      - su-exec
      - diffutils
      - apache2-utils
      - apache2-compat
      - procps
      - apache2
      - bash
      - dash-binsh
      - docker-library-php
      - docker-library-php-compat
      - busybox
      - bzip2
      - libldap
      - libmagic
      - imagemagick
      - php-${{vars.php-version}}
      - php-${{vars.php-version}}-apache
      - php-${{vars.php-version}}-bcmath
      - php-${{vars.php-version}}-exif
      - php-${{vars.php-version}}-ftp
      - php-${{vars.php-version}}-fpm
      - php-${{vars.php-version}}-gd
      - php-${{vars.php-version}}-gmp
      - php-${{vars.php-version}}-intl
      - php-${{vars.php-version}}-apcu
      - php-${{vars.php-version}}-ldap
      - php-${{vars.php-version}}-igbinary
      - php-${{vars.php-version}}-imagick
      - php-${{vars.php-version}}-memcached
      - php-${{vars.php-version}}-sodium
      - php-${{vars.php-version}}-opcache
      - php-${{vars.php-version}}-pcntl
      - php-${{vars.php-version}}-pdo
      - php-${{vars.php-version}}-pdo_mysql
      - php-${{vars.php-version}}-mysqlnd
      - php-${{vars.php-version}}-pdo_pgsql
      - php-${{vars.php-version}}-sysvsem
      - php-${{vars.php-version}}-zip
      - php-${{vars.php-version}}-redis
      - php-${{vars.php-version}}-pdo_sqlite
      - php-${{vars.php-version}}-iconv
      - php-${{vars.php-version}}-ctype
      - php-${{vars.php-version}}-dom
      - php-${{vars.php-version}}-curl
      - php-${{vars.php-version}}-xml
      - php-${{vars.php-version}}-simplexml
      - php-${{vars.php-version}}-fileinfo
      - php-${{vars.php-version}}-mbstring
      - php-${{vars.php-version}}-curl
      - php-${{vars.php-version}}-openssl
      - php-${{vars.php-version}}-posix
      - php-${{vars.php-version}}-xmlreader
      - php-${{vars.php-version}}-xmlwriter
      - rsync
      - ${{package.name}}-apache2-config
  scriptlets:
    post-install: |
      #!/bin/sh
      # As wolfi-baselayout does provide /var/spool/cron already, and we can not create this
      # directory in the package, we need to create the cron file in the post-install scriptlet.
      echo '*/5 * * * * php -f /var/www/html/cron.php' > /var/spool/cron/crontabs/www-data

vars:
  php-version: 8.1

# Create a new major-version variable that contains only the major version
# to use in the `nextcloud/docker` repo to find out the correct folder for the image.
# e.g. 31.0.4 will create a new var major-version=31
var-transforms:
  - from: ${{package.version}}
    match: ^(\d+).*
    replace: $1
    to: major-version

environment:
  contents:
    packages:
      - apache2-compat
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - composer
      - curl
      - git
      - nodejs
      - npm
      - php-${{vars.php-version}}
  environment:
    APACHE_BODY_LIMIT: "1073741824"
    PHP_MEMORY_LIMIT: "512M"
    PHP_UPLOAD_LIMIT: "512M"
    PHP_OPCACHE_MEMORY_CONSUMPTION: "128"
    PHP_INI_DIR: "etc/php"

pipeline:
  - runs: mkdir -p ${{targets.destdir}}/usr/src/nextcloud

  - uses: fetch
    with:
      uri: https://download.nextcloud.com/server/releases/nextcloud-${{package.version}}.tar.bz2
      expected-sha256: a47541566d5c6ac6f63e4f617e27da295156da47daa2cd22eee3400fd2ad1251
      directory: ${{targets.destdir}}/usr/src/nextcloud
      delete: true

  - uses: git-checkout
    with:
      repository: https://github.com/nextcloud/docker
      branch: master # It's ok to use master branch here, as this is something is not build-able thing; we just copy files around.
      expected-commit: af005991484e03918488bb6cdb75750598a121f5
      destination: nextcloud-docker

  - name: Create dirs
    runs: |
      mkdir -p ${{targets.destdir}}/usr/src/nextcloud/data
      mkdir -p ${{targets.destdir}}/usr/src/nextcloud/custom_apps
      mkdir -p ${{targets.destdir}}/var/www/data
      mkdir -p ${{targets.destdir}}/docker-entrypoint-hooks.d/pre-installation
      mkdir -p ${{targets.destdir}}/docker-entrypoint-hooks.d/post-installation
      mkdir -p ${{targets.destdir}}/docker-entrypoint-hooks.d/pre-upgrade
      mkdir -p ${{targets.destdir}}/docker-entrypoint-hooks.d/post-upgrade
      mkdir -p ${{targets.destdir}}/docker-entrypoint-hooks.d/before-starting
      mkdir -p ${{targets.destdir}}/${PHP_INI_DIR}/conf.d
      mkdir -p ${{targets.destdir}}/etc/apache2/conf-available

  - working-directory: nextcloud-docker/${{vars.major-version}}/apache
    runs: |
      cp -a config/. "${{targets.destdir}}/usr/src/nextcloud/config/"
      install -m755 *.sh ${{targets.destdir}}/
      install -m755 upgrade.exclude ${{targets.destdir}}/

  - name: Prepare configs
    runs: |
      # Write opcache recommended settings
      {
          echo 'opcache.enable=1'
          echo 'opcache.interned_strings_buffer=32'
          echo 'opcache.max_accelerated_files=10000'
          echo "opcache.memory_consumption=${PHP_OPCACHE_MEMORY_CONSUMPTION}"
          echo 'opcache.save_comments=1'
          echo 'opcache.revalidate_freq=60'
          echo 'opcache.jit=1255'
          echo 'opcache.jit_buffer_size=8M'
      } > ${{targets.destdir}}/${PHP_INI_DIR}/conf.d/opcache-recommended.ini

      # Enable APCu for CLI
      {
        echo 'apc.enable_cli=1'
      } > ${{targets.destdir}}/${PHP_INI_DIR}/conf.d/docker-php-ext-apcu.ini

      # Configure igbinary serializer
      {
          echo 'apc.serializer=igbinary'
          echo 'session.serialize_handler=igbinary'
      } >> ${{targets.destdir}}/${PHP_INI_DIR}/conf.d/docker-php-ext-igbinary.ini

      # Set Nextcloud PHP limits
      {
          echo "memory_limit=${PHP_MEMORY_LIMIT}"
          echo "upload_max_filesize=${PHP_UPLOAD_LIMIT}"
          echo "post_max_size=${PHP_UPLOAD_LIMIT}"
      } > ${{targets.destdir}}/${PHP_INI_DIR}/conf.d/nextcloud.ini

      # Set apache config RemoteIPs
      {
        echo 'RemoteIPHeader X-Real-IP'
        echo 'RemoteIPInternalProxy 10.0.0.0/8'
        echo 'RemoteIPInternalProxy 172.16.0.0/12'
        echo 'RemoteIPInternalProxy 192.168.0.0/16'
      } > ${{targets.destdir}}/etc/apache2/conf-available/remoteip.conf

      # Set apache config LimitRequestBody
      {
        echo "LimitRequestBody ${APACHE_BODY_LIMIT}"
      } > ${{targets.destdir}}/etc/apache2/conf-available/apache-limits.conf

  - name: Configure symlinks
    runs: |
      # Upstream image uses /usr/bin/apache2, but we have /usr/bin/httpd instead, both are the same
      # https://github.com/docker-library/php/blob/d21ab07e7f4014a5443f47c8ff8e292f9c703a58/apache2-foreground#L40
      mkdir -p ${{targets.destdir}}/usr/bin
      ln -sf /usr/bin/httpd ${{targets.destdir}}/usr/bin/apache2
      mkdir -p ${{targets.destdir}}/usr/local/etc/php
      ln -sf /${PHP_INI_DIR}/conf.d ${{targets.destdir}}/usr/local/etc/php/conf.d

subpackages:
  - name: ${{package.name}}-apache2-config
    description: ${{package.name}} Apache2 httpd.conf configuration
    dependencies:
      replaces:
        - apache2-config
        - apache2-compat
      provides:
        - apache2-config
        - apache2-compat
    pipeline:
      - runs: |
          # IMPORTANT: The additional configuration files are need to be in the conf.d directory
          # in order to be loaded by the Apache server. And since we use the `apache2-compat` package
          # at runtime, the `ServerRoot` is set to `/usr/local/apache2`, so we need to
          # create the `conf.d` directory in there. If we don't do this, the Apache server will not
          # load the additional configuration files and the server will not work as expected. It would
          # only print the default Apache page: "It works!".

          mkdir -p "${{targets.contextdir}}"/etc/apache2
          mkdir -p "${{targets.contextdir}}"/etc/apache2/extra/

          TARGET="${{targets.contextdir}}"/etc/apache2/httpd.conf

          cp /etc/apache2/httpd.conf "$TARGET"
          cp /etc/apache2/extra/httpd-ssl.conf "${{targets.contextdir}}"/etc/apache2/extra/httpd-ssl.conf

          sed -i 's|/usr/share/apache2/default-site/htdocs|/var/www/html|' "$TARGET"
          sed -i 's|/usr/local/apache2/htdocs|/var/www/html|' "$TARGET"

          cat <<EOF >> "$TARGET"
          LoadModule deflate_module     /usr/lib/apache2/modules/mod_deflate.so
          LoadModule negotiation_module /usr/lib/apache2/modules/mod_negotiation.so
          LoadModule rewrite_module     /usr/lib/apache2/modules/mod_rewrite.so
          LoadModule remoteip_module    /usr/lib/apache2/modules/mod_remoteip.so
          LoadModule php_module         /usr/lib/apache2/modules/libphp.so
          <FilesMatch \.php$>
            SetHandler application/x-httpd-php
          </FilesMatch>
          IncludeOptional /etc/apache2/conf-available/remoteip.conf
          IncludeOptional /etc/apache2/conf-available/apache-limits.conf
          EOF

update:
  enabled: true
  github:
    identifier: nextcloud/server
    use-tag: true
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - wait-for-it
        - curl
    accounts:
      groups:
        - groupname: www-data
          gid: 65532
      users:
        - username: www-data
          gid: 65532
          uid: 65532
      run-as: 0 # to create /var directory for testing
    environment:
      NEXTCLOUD_ADMIN_USER: admin
      NEXTCLOUD_ADMIN_PASSWORD: admin
  pipeline:
    # TODO: ensure enabled modules "httpd -M | grep -E 'php|rewrite|remoteip'"
    - name: Ensure installed files
      runs: |
        for f in /cron.sh /entrypoint.sh /upgrade.exclude; do
          stat ${f}
          [ -x "$f" ]
        done
        find /usr/src/nextcloud/config/ -type f -name "*.php" | grep -q .
    # - name: Ensure all needed modules are enabled
    #   runs: |
    #     # Those modules are scraped from the upstream image `nextcloud:latest`: `apache2-foreground -e debug`
    #     apache2-foreground -M 2>/dev/null \
    #     | grep -E '(access_compat|alias|auth_basic|authn_(core|file)|authz_(core|host|user)|autoindex|deflate|dir|env|filter|headers|mime|mpm_prefork|negotiation|php|remoteip|reqtimeout|rewrite|setenvif|status)_module'
    - working-directory: /var/www/html
      pipeline:
        - name: "start daemon on localhost"
          uses: test/daemon-check-output
          with:
            start: "/entrypoint.sh apache2-foreground"
            timeout: 120
            expected_output: |
              Initializing nextcloud
              Initializing finished
            post: |
              wait-for-it -t 10 --strict localhost:80
              curl -sSf --retry 3 http://localhost | grep -iq "It works!"
