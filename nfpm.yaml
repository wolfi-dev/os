package:
  name: nfpm
  version: "2.43.1"
  epoch: 0
  description: nFPM is a simple, 0-dependencies, deb, rpm, apk and arch linux packager written in Go
  copyright:
    - license: MIT

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/goreleaser/nfpm
      tag: v${{package.version}}
      expected-commit: 75a52a288bf13f31e4810212982c3095a5bf3115

  - uses: go/build
    with:
      packages: ./cmd/nfpm
      output: nfpm
      ldflags: |-
        -X main.version=v${{package.version}}
        -X main.commit=$(git rev-parse HEAD)
        -X main.date=$(date -u -d "@$SOURCE_DATE_EPOCH" +"%Y-%m-%dT%H:%M:%SZ")
        -X main.builtBy=melange

update:
  enabled: true
  github:
    identifier: goreleaser/nfpm
    strip-prefix: v

test:
  pipeline:
    - name: version check
      runs: |
        nfpm --version
        nfpm --help
    - name: Test init command
      runs: |
        # Create a test directory
        mkdir -p test-nfpm
        cd test-nfpm

        # Initialize nfpm configuration
        nfpm init

        # Verify configuration file was created
        test -f nfpm.yaml && echo "nfpm.yaml created successfully"

        # Check that the config contains expected fields
        grep -q "name:" nfpm.yaml && echo "Found name field"
        grep -q "arch:" nfpm.yaml && echo "Found arch field"
        grep -q "version:" nfpm.yaml && echo "Found version field"
    - name: Test JSON schema generation
      runs: |
        # Generate JSON schema
        nfpm jsonschema > schema.json

        # Verify schema was generated and contains expected content
        test -s schema.json && echo "JSON schema generated successfully"
        grep -q '"$schema"' schema.json && echo "Schema contains $schema field"
        grep -q '"properties"' schema.json && echo "Schema contains properties"
    - name: Test package command with basic config
      runs: |
        cd test-nfpm

        # Create a simple nfpm config
        cat <<EOF > test.yaml
        name: test-package
        arch: amd64
        platform: linux
        version: 1.0.0
        maintainer: Test User
        description: Test package
        license: MIT
        contents:
          - src: nfpm.yaml
            dst: /tmp/test.yaml
        EOF

        # Test packaging to different formats
        # Test deb packaging
        nfpm pkg --config test.yaml --packager deb --target test.deb
        test -f test.deb && echo "Debian package created successfully"

        # Test rpm packaging
        nfpm pkg --config test.yaml --packager rpm --target test.rpm
        test -f test.rpm && echo "RPM package created successfully"

        # Test apk packaging
        nfpm pkg --config test.yaml --packager apk --target test.apk
        test -f test.apk && echo "APK package created successfully"
    - name: Test completion commands
      runs: |
        # Test bash completion
        nfpm completion bash > bash_completion.sh
        test -s bash_completion.sh && echo "Bash completion generated"
        grep -q "nfpm" bash_completion.sh && echo "Completion contains nfpm commands"

        # Test zsh completion
        nfpm completion zsh > zsh_completion.sh
        test -s zsh_completion.sh && echo "Zsh completion generated"

        # Test fish completion
        nfpm completion fish > fish_completion.sh
        test -s fish_completion.sh && echo "Fish completion generated"
    - name: Test package command with invalid config
      runs: |
        # Create an invalid config (missing required fields)
        cat <<EOF > invalid.yaml
        description: Invalid package
        EOF

        # This should fail - verify it fails appropriately
        if nfpm pkg --config invalid.yaml --packager deb --target invalid.deb 2>/dev/null; then
          echo "ERROR: Should have failed with invalid config"
          exit 1
        else
          echo "Correctly failed with invalid config"
        fi
    - name: Test environment variable expansion
      runs: |
        # Create config with environment variables
        export TEST_VERSION="2.0.0"
        export TEST_NAME="env-test-package"

        cat <<EOF > env-test.yaml
        name: \${TEST_NAME}
        arch: amd64
        platform: linux
        version: \${TEST_VERSION}
        maintainer: Test User
        description: Test package with env vars
        license: MIT
        EOF

        # Package with environment variable expansion
        nfpm pkg --config env-test.yaml --packager deb --target env-test.deb
        test -f env-test.deb && echo "Package with env vars created successfully"
