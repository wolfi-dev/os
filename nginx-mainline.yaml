package:
  name: nginx-mainline
  # Must also bump njs at the same time
  version: "1.27.4"
  epoch: 0
  description: HTTP and reverse proxy server (mainline version)
  copyright:
    - license: BSD-2-Clause
  dependencies:
    provides:
      - nginx=${{package.full-version}}
    # Let's ensure that we have config. This gets the default, but can also
    # be override by users.
    runtime:
      - nginx-config

environment:
  contents:
    packages:
      - autoconf
      - automake
      - brotli-dev
      - build-base
      - busybox
      - ca-certificates-bundle
      - gd-dev
      - geoip-dev
      - libmaxminddb-dev
      - libxml2-dev
      - libxslt-dev
      - luajit-dev
      - openssl-dev
      - pcre-dev
      - perl-dev
      - pkgconf
      - zeromq-dev
      - zlib-dev

data:
  - name: modules
    items:
      http_geoip: "10"
      http_image_filter: "10"
      http_perl: "10"
      http_xslt_filter: "10"
      mail: "10"
      stream_geoip: "10"
      stream: "10"

# TODO look at adding extra modules like alpine does https://git.alpinelinux.org/aports/tree/main/nginx/APKBUILD#n149
# Also note the nginx inc config https://hg.nginx.org/pkg-oss/file/tip/alpine
pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/nginx/nginx.git
      tag: release-${{package.version}}
      expected-commit: ecb809305e54ed15be9f620d56b19ff4e4be7db5
      destination: nginx-mainline
  - name: configure
    working-directory: nginx-mainline
    runs: |
      export LUAJIT_LIB="$(pkgconf --variable=libdir luajit)"
      export LUAJIT_INC="$(pkgconf --variable=includedir luajit)"

      ./auto/configure \
          --prefix=/var/lib/nginx \
          --sbin-path=/usr/sbin/nginx \
          --modules-path=/usr/lib/nginx/modules \
          --conf-path=/etc/nginx/nginx.conf \
          --pid-path=/run/nginx/nginx.pid \
          --lock-path=/run/nginx/nginx.lock \
          --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \
          --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
          --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \
          --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi \
          --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
          --with-perl_modules_path=/usr/lib/perl5/vendor_perl \
          \
          --user=nginx \
          --group=nginx \
          --with-threads \
          --with-file-aio \
          \
          --without-pcre2 \
          \
          --with-compat \
          \
          --with-http_ssl_module \
          --with-http_v2_module \
          --with-http_realip_module \
          --with-http_addition_module \
          --with-http_xslt_module=dynamic \
          --with-http_image_filter_module=dynamic \
          --with-http_geoip_module=dynamic \
          --with-http_sub_module \
          --with-http_flv_module \
          --with-http_mp4_module \
          --with-http_gunzip_module \
          --with-http_gzip_static_module \
          --with-http_auth_request_module \
          --with-http_random_index_module \
          --with-http_secure_link_module \
          --with-http_degradation_module \
          --with-http_slice_module \
          --with-http_stub_status_module \
          --with-http_perl_module=dynamic \
          --with-mail=dynamic \
          --with-mail_ssl_module \
          --with-stream=dynamic \
          --with-stream_ssl_module \
          --with-stream_realip_module \
          --with-stream_geoip_module=dynamic \
          --with-stream_ssl_preread_module
  - working-directory: nginx-mainline
    runs: |
      make -j$(nproc)
      make DESTDIR=${{targets.destdir}} install
      # Stash the configuration into a separate directory so that it's not part
      # of the main package and hence configurable by users of -config
      # subpackage. We install it separately below in a subpackage.
      #
      # Unfortunately, there's no way to install configuration into a separate
      # directory that I could find.
      mkdir pkg-config
      mv ${{targets.destdir}}/etc/nginx pkg-config/
  - uses: strip

subpackages:
  - name: nginx-mainline-config
    description: Creates nginx config step that can then be overridden by users
    dependencies:
      runtime:
        - nginx-mainline
      provides:
        - nginx-config=${{package.full-version}}
    pipeline:
      - working-directory: nginx-mainline
        runs: |
          # This was moved into ./pkg-config/etc/nginx so put it into the
          # subpackage directory here.
          mkdir -p ${{targets.subpkgdir}}/etc/nginx
          cp -R ./pkg-config/nginx/* ${{targets.subpkgdir}}/etc/nginx/
          # default error logs to standard error
          sed -i 's/#error_log  logs\/error.log;$/error_log  stderr  notice;/' ${{targets.subpkgdir}}/etc/nginx/nginx.conf
          # and both access logs to stdout
          sed -i 's/#access_log.*;$/access_log  \/dev\/stdout;/' ${{targets.subpkgdir}}/etc/nginx/nginx.conf

  - name: nginx-mainline-package-config
    description: Config supplied in packaged nginx.org bundles at https://hg.nginx.org/pkg-oss/
    dependencies:
      runtime:
        - nginx-mainline
      provides:
        - nginx-package-config=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/etc/nginx/conf.d
          install -m644 -D nginx.conf ${{targets.subpkgdir}}/etc/nginx/

          install -m644 -D nginx.default.conf ${{targets.subpkgdir}}/etc/nginx/conf.d

          # Follow Docker Image and link logs to to stdout/stderr
          # https://github.com/nginxinc/docker-nginx/blob/73a5acae6945b75b433cafd0c9318e4378e72cbb/mainline/alpine-slim/Dockerfile#L106-L107
          mkdir -p ${{targets.subpkgdir}}/var/log/nginx
          ln -sf /dev/stdout ${{targets.subpkgdir}}/var/log/nginx/access.log
          ln -sf /dev/stderr ${{targets.subpkgdir}}/var/log/nginx/error.log
          # Package config has a different default location for html files, rather annoyingly
          # Don't really like using a symlink here, but seems better than copying
          mkdir -p ${{targets.subpkgdir}}/usr/share/nginx/html
          ln -sf /var/lib/nginx/html/50x.html ${{targets.subpkgdir}}/usr/share/nginx/html/50x.html
          ln -sf /var/lib/nginx/html/index.html ${{targets.subpkgdir}}/usr/share/nginx/html/index.html
      - name: "Create templates directory"
        runs: |
          mkdir -p ${{targets.contextdir}}/etc/nginx/templates

  - name: nginx-mainline-openrc
    description: nginx-mainline openrc init
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/etc/init.d/
          install -Dm755 nginx.initd "${{targets.subpkgdir}}"/etc/init.d/nginx

  - range: modules
    name: nginx-mainline-mod-${{range.key}}
    description: Nginx third-party module ${{range.key}}
    dependencies:
      provides:
        - nginx-mod-${{range.key}}=${{package.full-version}}
      runtime:
        - perl-dev
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/nginx/modules
          mkdir -p ${{targets.subpkgdir}}/etc/nginx/modules

          mv ${{targets.destdir}}/usr/lib/nginx/modules/ngx_${{range.key}}_module.so ${{targets.subpkgdir}}/usr/lib/nginx/modules/

          # TODO may need to rework the prefix here if we add other module subpackages like alpine does https://git.alpinelinux.org/aports/tree/main/nginx/APKBUILD#n417
          echo "load_module \"modules/ngx_${{range.key}}_module.so\";" >> ${{targets.subpkgdir}}/etc/nginx/modules/${{range.value}}_${{range.key}}.conf

          case ${{range.key}} in
            http_perl)
              mv ${{targets.destdir}}/usr/lib/perl5 ${{targets.subpkgdir}}/usr/lib/
            ;;
            http_naxsi)
              install -m644 -D naxsi-*/naxsi_config/naxsi_core.rules \
                ${{targets.subpkgdir}}/etc/nginx/naxsi_core.rules
            ;;
            stream)
              mkdir -p ${{targets.subpkgdir}}/etc/nginx/stream.d
              install -m644 -D stream.conf ${{targets.subpkgdir}}/etc/nginx/stream.d/
            ;;
          esac
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

  - name: nginx-mainline-src
    description: Nginx source code
    dependencies:
      runtime:
        - nginx-mainline
        - perl-dev
      provides:
        - nginx-src-main=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/src/nginx
          cp -r ./nginx-mainline/* ${{targets.contextdir}}/usr/src/nginx
          ls -latr ${{targets.contextdir}}/usr/src/nginx
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

  - name: ${{package.name}}-config-compat
    description: Nginx config compatibility with upstream image
    dependencies:
      runtime:
        - nginx-mainline
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/etc/nginx/conf.d
          install -m644 -D nginx.default.conf ${{targets.subpkgdir}}/etc/nginx/conf.d/
          ln -s /etc/nginx/conf.d/nginx.default.conf ${{targets.subpkgdir}}/etc/nginx/conf.d/default.conf

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-config
        - ${{package.name}}-config-compat
        - curl
  pipeline:
    - name: Create Nginx user and directories
      runs: |
        # Create the 'nginx' user if it does not exist
        if ! id -u nginx > /dev/null 2>&1; then
          adduser -D -g 'Nginx User' nginx
        fi
        # Create necessary directories
        mkdir -p /var/lib/nginx/tmp/client_body /var/lib/nginx/tmp/proxy /var/lib/nginx/tmp/fastcgi /var/lib/nginx/tmp/uwsgi /var/lib/nginx/tmp/scgi /run/nginx
        chown -R nginx:nginx /var/lib/nginx /run/nginx
    - name: Verify Nginx Version
      runs: |
        # Ensure Nginx is installed and shows the correct version
        nginx -v || exit 1
    - name: Check Main Configuration File
      runs: |
        # Verify the main configuration file exists and is formatted correctly
        if [ ! -f /etc/nginx/nginx.conf ]; then
          echo "nginx.conf not found!"
          exit 1
        fi
        head -n 5 /etc/nginx/nginx.conf || exit 1
    - name: Check Additional Configuration Files
      runs: |
        # Verify default and compatibility configuration files are present
        if [ ! -f /etc/nginx/conf.d/nginx.default.conf ]; then
          echo "nginx.default.conf not found!"
          exit 1
        fi
        head -n 5 /etc/nginx/conf.d/nginx.default.conf || exit 1
    - name: Start Nginx and Check Status
      runs: |
        # Start Nginx and check if it is running
        nginx || exit 1
        nginx -t  # Verify the configuration is valid
        sleep 5  # Give some time for Nginx to start
        curl -I http://localhost || exit 1  # Check if Nginx is serving a basic request

update:
  enabled: true
  github:
    identifier: nginx/nginx
    use-tag: true
    tag-filter: release-1.27
    strip-prefix: release-
