package:
  name: nss-passwords
  version: 0.6
  epoch: 1
  description: "Read Mozilla keyrings from command line"
  copyright:
    - license: MPL-1.1
    - license: GPL-2.0-only
    - license: LGPL-2.1-or-later
  dependencies:
    runtime:
      - libnss

environment:
  contents:
    packages:
      - apk-tools
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - git
      - libnss-dev
      - mercurial
      - ocaml
      - ocaml-compiler-libs
      - opam
      - openssl-dev
      - patch
      - posix-libc-utils
      - rsync
      - sqlite-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/glondu/nss-passwords
      tag: ${{package.version}}
      expected-commit: c2dd491aae707bd4514d936ea52e13ed6eda141c

  - runs: |
      opam init --disable-sandboxing --shell=sh --disable-shell-hook -y
      eval $(opam env)
      opam switch create build-switch ocaml-base-compiler -y
      eval $(opam env --switch=build-switch)
      opam install --yes fileutils sqlite3 ppx_yojson_conv
      dune build
      install -Dm755 _build/default/main.exe "${{targets.destdir}}"/usr/bin/nss-passwords

  - uses: strip

update:
  enabled: true
  github:
    identifier: glondu/nss-passwords
    use-tag: true

test:
  environment:
    contents:
      packages:
        - sqlite
        - firefox
        - nss
        - libnss-tools # for certutil
  pipeline:
    - name: Verify binary presence and help message
      runs: |
        nss-passwords --help
    - name: Populate and test the NSS database
      runs: |
        # 1) Create the test-profile directory
        mkdir -p test-profile

        # 2) Create an empty 'password' file to satisfy certutilâ€™s password prompt
        echo > pwdfile

        # 3) Initialize an NSS database with empty password
        certutil -N -d sql:test-profile --empty-password -f pwdfile

        # 4) Generate some randomness to use as seed
        dd if=/dev/urandom of=randfile bs=1024 count=1

        # 5) Generate a keypair (RSA 2048) using
        certutil -G \
          -d sql:test-profile \
          -k rsa \
          -g 2048 \
          -z randfile \
          -f pwdfile

        # 6) Create a self-signed test certificate
        certutil -S \
          -d sql:test-profile \
          -n "Test Cert" \
          -s "CN=Test" \
          -x \
          -t "CT,," \
          -k rsa \
          -g 2048 \
          -z randfile \
          -f pwdfile

        # 7) Verify that something is in the DB now:
        certutil -L -d sql:test-profile

        # 8) Try running nss-passwords
        # This is failing test since its not possible to create moz_logins and a truly valid NSS+password store here.
        nss-passwords -d test-profile 'hostname:testsite.com' 2>&1 | grep -iq "Assertion failed"
