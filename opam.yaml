package:
  name: opam
  version: "2.4.1"
  epoch: 1
  description: "opam is a source-based package manager. It supports multiple simultaneous compiler installations, flexible package constraints, and a Git-friendly development workflow."
  copyright:
    - license: LGPL-2.1-only WITH OCaml-LGPL-linking-exception
  dependencies:
    runtime:
      - bubblewrap # https://opam.ocaml.org/doc/FAQ.html#Why-does-opam-require-bwrap
      - build-base # Necessary for any basic usage (package installs)
      - coreutils # Some package builds depend on GNU coreutils options for readlink
      - curl # Can be one of  `curl` or `wget`
      - ocaml
      - posix-libc-utils

environment:
  contents:
    packages:
      - acl-dev
      - binutils-dev
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl-dev
      - gawk
      - libacl1
      - libcurl-openssl4
      - ocaml
      - ocaml-compiler-libs
      - ocaml-dev
      - patch
      - wget
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ocaml/opam
      tag: ${{package.version}}
      expected-commit: 7c92631391984f698f31ee24f3ae4dc1cd3698ff

  - uses: autoconf/configure
    with:
      opts: |
        --with-mccs \
        --with-vendored-deps

  - uses: autoconf/make
    with:
      opts: all

  - uses: autoconf/make-install

  - uses: strip

subpackages:
  - name: ${{package.name}}-doc
    description: ${{package.name}} documentation
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  github:
    identifier: ocaml/opam

test:
  pipeline:
    - name: Smoke tests
      runs: |
        opam --help | grep -F -e "Opam is a package manager."
        opam-installer --help | grep -F -e "Handles (un)installation of package files"
        opam --version | grep -F -e "${{package.version}}"
        opam-installer --version | grep -F -e "${{package.version}}"
    - name: Install packages
      runs: |
        # Sandboxing needs to be disabled on bwrap/docker melange runners
        opam init -a --disable-sandboxing
        opam switch default
        opam install tiny_httpd -y
        . "${HOME}/.profile"
        echo "(lang dune 3.0)" > dune-project
        dune init exec httpserv
        echo "(executable (name httpserv) (libraries tiny_httpd))" > dune
        tee httpserv.ml <<'EOF'
        module S = Tiny_httpd

        let () =
          let server = S.create () in

          (* say hello *)
          S.add_route_handler ~meth:`GET server
            S.Route.(exact "hello" @/ string @/ return)
            (fun name _req -> S.Response.make_string (Ok ("hello " ^name ^"!\n")));

          (* run the server *)
          Printf.printf "listening on http://%s:%d\n%!" (S.addr server) (S.port server);
          match S.run server with
          | Ok () -> ()
          | Error e -> raise e
        EOF


        dune build
    - name: Sample HTTP server
      uses: test/daemon-check-output
      with:
        start: _build/default/httpserv.exe
        timeout: 20
        expected_output: listening on http://
        post: curl "http://localhost:8080/hello/linky" | grep -F -e "hello linky!"
