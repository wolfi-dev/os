package:
  name: opentelemetry-operator
  version: "0.122.0"
  epoch: 0
  description: Kubernetes Operator for OpenTelemetry Collector
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/open-telemetry/opentelemetry-operator
      tag: v${{package.version}}
      expected-commit: 554cc1f0f4f9bbae1b9df916f4f3c7562adda3ad

  - uses: go/build
    with:
      modroot: .
      packages: .
      output: manager
      ldflags: |
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.version=$(grep -v '\#' versions.txt | grep operator= | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.buildDate=$(date -u -d "@${SOURCE_DATE_EPOCH:-$(date +%s)}" "+%Y-%m-%dT%H:%M:%SZ")
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.otelCol=$(grep -v '\#' versions.txt | grep opentelemetry-collector | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.targetAllocator=$(grep -v '\#' versions.txt | grep targetallocator | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.operatorOpAMPBridge=$(grep -v '\#' versions.txt | grep operator-opamp-bridge | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationJava=$(grep -v '\#' versions.txt | grep autoinstrumentation-java | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationNodeJS=$(grep -v '\#' versions.txt | grep autoinstrumentation-nodejs | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationPython=$(grep -v '\#' versions.txt | grep autoinstrumentation-python | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationDotNet=$(grep -v '\#' versions.txt | grep autoinstrumentation-dotnet | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationGo=$(grep -v '\#' versions.txt | grep autoinstrumentation-go | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationApacheHttpd=$(grep -v '\#' versions.txt | grep autoinstrumentation-apache-httpd | awk -F= '{print $2}')
        -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationNginx=$(grep -v '\#' versions.txt | grep autoinstrumentation-nginx | awk -F= '{print $2}')

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binaries in the location expected by upstream helm charts"
    pipeline:
      - runs: |
          # The helm chart expects the binaries to be in / instead of /usr/bin
          mkdir -p "${{targets.subpkgdir}}"
          ln -sf /usr/bin/manager ${{targets.subpkgdir}}/manager

  - name: ${{package.name}}-otel-allocator
    description: "OpenTelemetry Allocator"
    pipeline:
      - uses: go/build
        with:
          modroot: .
          packages: ./cmd/otel-allocator
          output: main
          ldflags: |
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.version=$(grep -v '\#' versions.txt | grep operator= | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.buildDate=$(date -u -d "@${SOURCE_DATE_EPOCH:-$(date +%s)}" "+%Y-%m-%dT%H:%M:%SZ")
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.otelCol=$(grep -v '\#' versions.txt | grep opentelemetry-collector | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.targetAllocator=$(grep -v '\#' versions.txt | grep targetallocator | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.operatorOpAMPBridge=$(grep -v '\#' versions.txt | grep operator-opamp-bridge | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationJava=$(grep -v '\#' versions.txt | grep autoinstrumentation-java | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationNodeJS=$(grep -v '\#' versions.txt | grep autoinstrumentation-nodejs | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationPython=$(grep -v '\#' versions.txt | grep autoinstrumentation-python | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationDotNet=$(grep -v '\#' versions.txt | grep autoinstrumentation-dotnet | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationGo=$(grep -v '\#' versions.txt | grep autoinstrumentation-go | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationApacheHttpd=$(grep -v '\#' versions.txt | grep autoinstrumentation-apache-httpd | awk -F= '{print $2}')
            -X github.com/open-telemetry/opentelemetry-operator/internal/version.autoInstrumentationNginx=$(grep -v '\#' versions.txt | grep autoinstrumentation-nginx | awk -F= '{print $2}')
    test:
      pipeline:
        - runs: |
            main --help || true # test tends to fail

  - name: ${{package.name}}-otel-allocator-compat
    description: "Compatibility package to place binaries in the location expected by upstream helm charts"
    pipeline:
      - runs: |
          # The helm chart expects the binaries to be in / instead of /usr/bin
          mkdir -p "${{targets.contextdir}}"
          ln -sf /usr/bin/main ${{targets.contextdir}}/main

update:
  enabled: true
  github:
    identifier: open-telemetry/opentelemetry-operator
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - kubectl
        - git
        - mkcert
        - kustomize
        - curl
        - helm
  pipeline:
    - uses: test/kwok/cluster
    - name: Fetch the testdata from the source repo
      runs: git clone --depth=1 https://github.com/open-telemetry/opentelemetry-operator/
    - name: Install CRDs
      working-directory: opentelemetry-operator/config/crd/
      runs: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm install prometheus-operator-crds prometheus-community/prometheus-operator-crds --wait
        kubectl wait --for=condition=Ready nodes --all
        kustomize build | kubectl apply --server-side=true -f -
        # wait for all CRDs to be created
        sleep 3
    - name: "Test manager run with mock cluster"
      runs: |
        mkdir -p /tmp/k8s-webhook-server/serving-certs/
        mkcert -install
        mkcert -key-file /tmp/k8s-webhook-server/serving-certs/tls.key -cert-file /tmp/k8s-webhook-server/serving-certs/tls.crt localhost
        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        echo "default" > /var/run/secrets/kubernetes.io/serviceaccount/namespace
        /usr/bin/manager --metrics-addr :8080 --health-probe-addr :8081 &
        sleep 5
        STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" http://localhost:8081/healthz)
        # Check if the status code is 200, if so exit 0, otherwise exit 1
        if [ "$STATUS" -eq 200 ]; then
            echo "Health check passed with status code 200"
            exit 0
        else
            echo "Health check failed with status code $STATUS"
            exit 1
        fi
