package:
  name: perl-command-runner
  version: "0.201"
  epoch: 0
  description: run external commands and Perl code refs
  copyright:
    - license: Artistic-1.0-Perl OR GPL-1.0-or-later
  dependencies:
    runtime:
      - perl
      - perl-capture-tiny
      - perl-file-pushd
      - perl-string-shellquote
      - perl-win32-shellquote

environment:
  contents:
    packages:
      - busybox
      - perl
      - perl-capture-tiny
      - perl-extutils-config
      - perl-extutils-helpers
      - perl-extutils-installpaths
      - perl-file-pushd
      - perl-module-build-tiny
      - perl-string-shellquote
      - perl-win32-shellquote

pipeline:
  - uses: fetch
    with:
      expected-sha256: 38e3294ae9ffd015625d7746a0803cc329de92fb0f0edae9a29cd8232cf458d3
      uri: https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Command-Runner-${{package.version}}.tar.gz

  - name: Build and Test
    runs: |
      export CFLAGS=$(perl -MConfig -E 'say $Config{ccflags}')
      perl Build.PL --installdirs=vendor

  - runs: |
      export CFLAGS=$(perl -MConfig -E 'say $Config{ccflags}')
      perl Build
      perl Build test

  - runs: |
      perl Build install --destdir=${{targets.destdir}}
      find ${{targets.destdir}} \( -name perllocal.pod -o -name .packlist \) -delete

update:
  enabled: true
  release-monitor:
    identifier: 17233

subpackages:
  - name: ${{package.name}}-doc
    description: ${{package.name}} documentation
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

test:
  pipeline:
    - name: Smoke test
      runs: echo "use Command::Runner;" | perl
    - name: Ensure command runner works
      runs: |
        {
        perl <<'EOF' || exit 0
        use Command::Runner;
        use Data::Dumper;

        my $cmd = Command::Runner->new(
          command => ['touch', 'success.txt'],
          timeout => 10,
          stdout  => sub { warn "out: $_[0]\n" },
          stderr  => sub { warn "err: $_[0]\n" },
        );
        my $res = $cmd->run;
        my $cmd = Command::Runner->new(
          command => ['ls', '-al', '/fail'],
          timeout => 10,
          stdout  => sub { warn "out: $_[0]\n" },
          stderr  => sub { warn "err: $_[0]\n" },
        );
        my $res = $cmd->run;
        EOF
        } 2>&1 | tee output.txt

        grep '/fail: No such file or directory' ./output.txt
        stat success.txt
