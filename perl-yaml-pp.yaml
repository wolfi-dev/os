package:
  name: perl-yaml-pp
  version: "0.39.0"
  epoch: 0
  description: YAML 1.2 processor
  copyright:
    - license: GPL-1.0-or-later OR Artistic-1.0-Perl
  dependencies:
    runtime:
      - perl

pipeline:
  - uses: fetch
    with:
      expected-sha256: 32f53c65781277dcbe50827b4cbf217eceeff264779e3a6c98c94229eb149f58
      uri: https://cpan.metacpan.org/authors/id/T/TI/TINITA/YAML-PP-v${{package.version}}.tar.gz

  - uses: perl/make

  - uses: autoconf/make

  - uses: autoconf/make-install

  - uses: perl/cleanup

  - uses: strip

update:
  enabled: true
  release-monitor:
    identifier: 74192

subpackages:
  - name: ${{package.name}}-doc
    description: ${{package.name}} documentation
    pipeline:
      - uses: split/manpages
    test:
      pipeline:
        - uses: test/docs

test:
  pipeline:
    - name: Smoke test
      runs: |
        echo "use YAML::PP" | perl
        # None of these have descriptions so just use one of the option's descriptions
        yamlpp-load --help | grep "Allow cyclic references"
        yamlpp-load-dump --help | grep "Number of spaces for indentation"
        yamlpp-events --help | grep "Module to use for parsing"
        yamlpp-parse-emit --help | grep "'no' (default, always output block style)"
        yamlpp-highlight --help | grep "Expand tabs to 8 spaces"
    - name: Ensure parser works
      runs: |
        perl <<'EOF'
        use YAML::PP;
        my $ypp = YAML::PP->new;
        my $yaml = <<'EOM';
        --- # Document one is a mapping
        name: Tina
        age: 29
        favourite language: Perl
        --- # Document two is a sequence
        - plain string
        - 'in single quotes'
        - "in double quotes we have escapes! like \t and \n"
        - | # a literal block scalar
          line1
          line2
        - > # a folded block scalar
          this is all one
          single line because the
          linebreaks will be folded
        EOM
        my $documents = $ypp->load_string($yaml);
        $ypp->dump_file("test.file.yaml", $documents);
        EOF
        grep "Tina" ./test.file.yaml
    - name: Check if extra utilities work
      runs: |
        tee file.yaml <<EOF
        --- # Document one is a mapping
        name: Tina
        age: 29
        favourite language: Perl
        --- # Document two is a sequence
        - plain string
        - 'in single quotes'
        - "in double quotes we have escapes! like \t and \n"
        - | # a literal block scalar
          line1
          line2
        - > # a folded block scalar
          this is all one
          single line because the
          linebreaks will be folded
        EOF
        # Load YAML into a data structure and dump with Data::Dumper
        yamlpp-load < file.yaml
        # Load and Dump
        yamlpp-load-dump < file.yaml
        # Print the events from the parser in yaml-test-suite format
        yamlpp-events < file.yaml
        # Parse and emit events directly without loading
        yamlpp-parse-emit < file.yaml
        # Create ANSI colored YAML. Can also be useful for invalid YAML, showing
        # you the exact location of the error
        yamlpp-highlight < file.yaml
