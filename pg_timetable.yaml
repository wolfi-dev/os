package:
  name: pg_timetable
  version: "5.11.0"
  epoch: 0
  description: Advanced scheduling for PostgreSQL
  copyright:
    - license: PostgreSQL
  dependencies:
    runtime:
      - curl
      - postgresql-client

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 5046c1ad93f6588c330dcbf6b85d738a107caf42
      repository: https://github.com/cybertec-postgresql/pg_timetable.git
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/crypto@v0.35.0

  - uses: go/build
    with:
      packages: .
      ldflags: |
        -X main.version=$(git describe --tags --abbrev=0)
        -X main.commit=$(git show -s --format=%H HEAD)
        -X main.date=$(git show -s --format=%cI HEAD)
      output: pg_timetable

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binaries in the location expected by pg_timetable"
    dependencies:
      runtime:
        - ${{package.name}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}
          ln -sf /usr/bin/pg_timetable ${{targets.contextdir}}/pg_timetable
    test:
      pipeline:
        - runs: "[ \"$(stat -c '%N' /pg_timetable 2>/dev/null)\" = \"'/pg_timetable' -> '/usr/bin/pg_timetable'\" ]"

update:
  enabled: true
  github:
    identifier: cybertec-postgresql/pg_timetable
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - postgresql
        - build-base
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: wolfi
      PGHOST: /tmp
  pipeline:
    - name: "Initialize and Start PostgreSQL"
      runs: |
        echo "Creating PostgreSQL user..."
        useradd wolfi
        echo "Initializing PostgreSQL..."
        sudo -u wolfi initdb -D /tmp/test_db
        echo "Starting PostgreSQL..."
        sudo -u wolfi pg_ctl -D /tmp/test_db -l /tmp/logfile start
        sleep 5  # Ensure PostgreSQL has time to start
    - name: "Ensure PostgreSQL is running"
      runs: |
        echo "Checking PostgreSQL status..."
        until pg_isready -h /tmp -U wolfi; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready."
    - name: "Create test database and scheduler user"
      runs: |
        echo "Creating test database as user wolfi..."
        createdb -U wolfi testdb

        echo "Creating timetable database..."
        createdb -U wolfi timetable

        echo "Creating scheduler user..."
        psql -U wolfi -d testdb -c "CREATE ROLE scheduler WITH LOGIN SUPERUSER PASSWORD 'scheduler';"

        echo "Granting privileges to scheduler..."
        psql -U wolfi -d timetable -c "GRANT ALL PRIVILEGES ON DATABASE timetable TO scheduler;"
        psql -U wolfi -d testdb -c "GRANT ALL PRIVILEGES ON DATABASE testdb TO scheduler;"
    - name: "Initialize pg_timetable Schema"
      runs: |
        echo "Initializing pg_timetable schema in timetable database..."
        pg_timetable --init -c "dbname=timetable user=scheduler password=scheduler host=/tmp sslmode=disable"

        echo "Ensuring timetable schema exists..."
        SCHEMA_EXISTS=$(psql -U scheduler -d timetable -t -A -c \
          "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'timetable';")

        if [ -z "$SCHEMA_EXISTS" ]; then
          echo "ERROR: timetable schema is missing in timetable database!"
          exit 1
        fi
    - name: "Create a Simple SQL Task"
      runs: |
        echo "Scheduling a simple task in pg_timetable..."

        # Ensure timetable schema exists in the correct database
        SCHEMA_EXISTS=$(psql -U scheduler -d timetable -t -A -c \
          "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'timetable';")

        if [ -z "$SCHEMA_EXISTS" ]; then
          echo "ERROR: timetable schema is missing in timetable database!"
          exit 1
        fi

        # Create a test chain and extract only the chain_id
        CHAIN_ID=$(psql -U scheduler -d timetable -t -A -c \
          "INSERT INTO timetable.chain (chain_name, live) VALUES ('Test Task', TRUE) RETURNING chain_id;" | head -n 1)

        if [ -z "$CHAIN_ID" ]; then
          echo "ERROR: Failed to create chain!"
          exit 1
        fi

        echo "CHAIN_ID is $CHAIN_ID"

        # Create a simple task in the chain
        psql -U scheduler -d timetable -c \
          "INSERT INTO timetable.task (chain_id, task_order, kind, command)
          VALUES ($CHAIN_ID, 1, 'SQL', 'SELECT now();');"

        echo "Task scheduled successfully."
    - name: "Start pg_timetable"
      runs: |
        echo "Starting pg_timetable..."
        nohup pg_timetable -c "dbname=timetable user=scheduler password=scheduler host=/tmp sslmode=disable" > /tmp/pg_timetable.log 2>&1 &
        sleep 5  # Give it time to start
        echo "pg_timetable started."
    - name: "Verify Task Execution"
      runs: |
        echo "Checking if task executed..."
        sleep 5

        cat /tmp/pg_timetable.log

        # Ensure we check the timetable database
        RESULT=$(psql -U scheduler -d timetable -t -A -c "SELECT count(*) FROM timetable.execution_log;" | tr -d '[:space:]')

        echo "Checking if task executed..."
        psql -U scheduler -d timetable -c 'SELECT * FROM timetable.execution_log ORDER BY finished DESC LIMIT 10;'

        # Retrieve and print execution logs
        echo "Execution Log Entries:"
        psql -U scheduler -d timetable -c '\d timetable.execution_log'

        if [ -z "$RESULT" ]; then
          echo "ERROR: timetable.execution_log does not exist in timetable database!"
          exit 1
        elif [ "$RESULT" -eq 0 ]; then
          echo "ERROR: No execution logs found, task may not have run!"
          exit 1
        else
          echo "SUCCESS: Task executed correctly!"
        fi
