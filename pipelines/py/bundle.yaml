name: Install Python package bundles with uv

needs:
  packages:
    - busybox
    - uv

inputs:
  package:
    description: |
      "Main package. Used to validate package version and requirements are in sync."
    default: ""
  python:
    description: "Path to Python executable."
    default: "/usr/bin/python3"
  requirements:
    description: "Path to requirements file."
    default: "requirements.locked"
  venv:
    description: "Installation path for virtual environment."
    default: ""

pipeline:
  - runs: |
      main_package=${{inputs.package}}

      # If main package is unset, default to package name
      if [ -z $main_package ]; then
        main_package=${{package.name}}
      fi

      # Validate requirements contain main package at package version
      if ! grep "$main_package==${{package.version}}" ${{inputs.requirements}}; then
        echo "Failed to find $main_package at version ${{package.version}} in requirements!"
        echo "Please update your requirements file at ${{package.name}}/${{inputs.requirements}}"
        echo "To compile new requirements, use the py/compile-requirements pipeline."
        exit 1
      fi

      # Set Python path
      export "UV_PYTHON=${{inputs.python}}"

      # Default to system Python installation
      install_opts="--system --prefix ${{targets.contextdir}}/usr"

      # If a path to a virtual env has been provided, create and source the
      # virtual environment. Unset options for system Python installation.
      if [ -n "${{inputs.venv}}" ]; then
        uv venv --system-site-packages ${{inputs.venv}}
        source ${{inputs.venv}}/bin/activate
        install_opts=""
      fi

      # Install package
      mkdir -p ${{targets.contextdir}}
      uv pip install \
        --config-file /etc/uv/uv.toml \
        $install_opts \
        -r ${{inputs.requirements}}

      if [ -n "${{inputs.venv}}" ]; then
        # Install virtual environment
        mkdir -p ${{targets.contextdir}}/${{inputs.venv}}
        mv ${{inputs.venv}}/* ${{targets.contextdir}}/${{inputs.venv}}/
      else
        # Remove lockfile
        rm ${{targets.contextdir}}/usr/.lock
      fi
