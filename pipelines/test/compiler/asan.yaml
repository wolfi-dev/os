name: Address Sanitizer Test

inputs:
  cc:
    description: |
      CC compiler to use
    required: true

pipeline:
  # from https://www.osc.edu/resources/getting_started/howto/howto_use_address_sanitizer
  - name: no leaks
    runs: |
      tmpdir="$(mktemp -d)"
      trap "rm -rf $tmpdir" EXIT
      cd "$tmpdir"

      cat > noleak.c <<"EOF"
      #include <stdio.h>
      #include <stdlib.h>
      #include <string.h>

      int main(int argc, const char *argv[]) {
        char *s = malloc(100);
        strcpy(s, "Hello world!");
        printf("string is: %s\n", s);
        free(s);
        return 0;
      }
      EOF
      ${{inputs.cc}} noleak.c -o noleak -fsanitize=address -lasan
      [ "$(./noleak 2>&1 | grep -v 'Hello world!')" = "" ]

  - name: missing free
    runs: |
      tmpdir="$(mktemp -d)"
      trap "rm -rf $tmpdir" EXIT
      cd "$tmpdir"

      cat > leak.c <<"EOF"
      #include <stdio.h>
      #include <stdlib.h>
      #include <string.h>

      int main(int argc, const char *argv[]) {
        char *s = malloc(100);
        strcpy(s, "Hello world!");
        printf("string is: %s\n", s);
        return 0;
      }
      EOF
      ${{inputs.cc}} leak.c -o leak -fsanitize=address -lasan
      ./leak 2>&1 | grep "detected memory leaks"

  - name: use after free
    runs: |
      tmpdir="$(mktemp -d)"
      trap "rm -rf $tmpdir" EXIT
      cd "$tmpdir"

      cat > uaf.c <<"EOF"
      #include <stdio.h>
      #include <stdlib.h>
      #include <string.h>

      int main(int argc, const char *argv[]) {
        char *s = malloc(100);
        free(s);
        strcpy(s, "Hello world!");
        printf("string is: %s\n", s);
        return 0;
      }
      EOF
      ${{inputs.cc}} uaf.c -o uaf -fsanitize=address -lasan
      ./uaf 2>&1 | grep "heap-use-after-free"
