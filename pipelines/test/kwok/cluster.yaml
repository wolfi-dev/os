name: Kwok Cluster

needs:
  packages:
    - busybox
    - kwok
    - kwokctl
    - kubernetes # has a runtime dependency on kubectl
    - etcd

inputs:
  namespace:
    description: namespace in which we want to run the operator/controller/manager
    required: true
    default: default

pipeline:
  - runs: |
      # ensure we can create a cluster using our own components instead of
      # fetching from the internet
      kwokctl create cluster --runtime binary \
        --kube-apiserver-binary="/usr/bin/kube-apiserver" \
        --kube-controller-manager-binary="/usr/bin/kube-controller-manager" \
        --kube-scheduler-binary="/usr/bin/kube-scheduler" \
        --kwok-controller-binary="/usr/bin/kwok" \
        --etcd-binary="/usr/bin/etcd"
      # Create a node
      kwokctl scale node --replicas 1

      wait_for_ready() {
          endpoint=$1
          i=1
          while [ $i -le 30 ]; do
              if kubectl get --raw "$endpoint" >/dev/null 2>&1; then
                  echo "$endpoint is ready"
                  return 0
              fi
              echo "Attempt $i: $endpoint not ready, retrying..."
              sleep 1
              i=$((i + 1))
          done
          echo "$endpoint did not become ready in time"
          return 1
      }

      for endpoint in "/healthz" "/readyz" "/openapi/v2"; do
          if ! wait_for_ready "$endpoint"; then
              exit 1
          fi
      done

      kubectl wait --for=condition=Ready nodes --all
      kubectl cluster-info
      mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
      CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
      cp $CA /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      echo ${{inputs.namespace}} > /var/run/secrets/kubernetes.io/serviceaccount/namespace
