name: verify-service

needs:
  packages:
    - apk-tools
    - grep
    - systemd

inputs:
  man:
    description: Run verify without skipping doc tests
    default: 'false'

pipeline:
  - name: Verify Service files
    runs: |
      set -xe

      # If there's a templated service file systemd-analyze verify
      # will fill in  test_instance for the template. If the
      # test resource doesn't exist verify won't pass.
      # The quaota service need a mountpoint to verify the quota service against.
      # Which casued this but any service that depends on a template will probably
      # need something.
      cat << EOF > /usr/lib/systemd/system/test_instance.mount
      [Unit]
      Description=Test Mount
      DefaultDependencies=no
      Conflicts=umount.target
      Before=local-fs.target umount.target

      [Mount]
      What=/dev/null
      Where=/test_instance
      EOF

      # ${{package.name}} when run inside of a test pipeline is always the name of the top-level
      # package. This seems like a bug to me.
      package_name=$(basename ${{targets.contextdir}})

      echo "Package name: ${package_name}"
      service_files=$(mktemp)
      apk -L info ${package_name} | grep 'usr/lib/systemd/system/.*.service$' > ${service_files} || true

      if [ ! -s ${service_files} ]; then
        echo "No service files found!"
        exit 1
      fi

      for file in $(cat "${service_files}"); do
        systemd-analyze verify --man=${{inputs.man}} "${file}"
      done

      rm "${service_files}"
