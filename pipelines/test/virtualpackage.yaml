name: virtualpackage

# virtual packages should never be installed - instead one of the providing packages should be installed.
# This package test ensures this remains true and does not regress.
inputs:
  virtual_pkg_name:
    description: "virtual package name to test"
    required: true
  real_pkg_name:
    description: |
      if you want to ensure at least one of the real packages are installed, set its name here
    required: false
    default: ''

pipeline:
  - name: virtual package not installed
    description: Check that a virtual package does not install itself
    runs: |
      get_installed_version() {
        pkg="$1"
        apk list installed "${pkg}" 2>/dev/null | awk '{print $1}'
      }

      virtual_pkg_name_and_version="${{inputs.virtual_pkg_name}}-${{package.full-version}}"
      maybe_installed_pkg_name_and_version="$(get_installed_version ${{inputs.virtual_pkg_name}})"

      if [ "${virtual_pkg_name_and_version}" == "${maybe_installed_pkg_name_and_version}" ] ; then
        echo "${virtual_pkg_name_and_version} is installed. This is not expected, is a virtual package."
        exit 1
      fi

      echo "${virtual_pkg_name_and_version} is not installed. This is expected, is a virtual package."

      if [ "${{inputs.real_pkg_name}}" != "" ] ; then
        maybe_real_pkg_installed_name_and_version="$(get_installed_version ${{inputs.real_pkg_name}})"
        if [ "${maybe_real_pkg_installed_name_and_version}" != "" ] ; then
          echo "${maybe_real_pkg_installed_name_and_version} is installed. This is expected, is a real package"
          exit 0
        else
          echo "No real package ${{inputs.real_pkg_name}} installed for virtual package ${{inputs.virtual_pkg_name}}. Unexpected."
          exit 1
        fi
      fi
