name: Get coverage data with the xcover profiler tool 

needs:
  packages:
    - busybox
    - jq
    - xcover

inputs:
  executable-path:
    description: The path to the executable of the application to test.
    required: true
  exclude-functions:
    description: The function symbols to exclude from profiling as a regular expression.
    required: false
  log-level:
    description: The log level of the xcover profile command.
    required: false
    default: info
  min-coverage:
    description: The minimum coverage to accept as percentage.
    required: false
    default: ""
  verbose:
    description: Enable verbosity of the xcover profile command. It prints out all the functions being traced real-time.
    required: false
    default: "false"
  tests:
    description: The script of the tests to profile coverage for.
    required: true
  wait-timeout:
    description: The maximum amount of time to wait for the xcover profiler to be ready for profiling, in seconds.
    required: false
    default: "60"
  graceful-shutdown-timeout:
    description: The maximum amount of time to wait for graceful shutdown of the profiler, in seconds.
    required: false
    default: "3"

pipeline:
  - runs: |

      # Run profile in background.
      xcover profile \
        --path ${{inputs.executable-path}} \
        --exclude ${{inputs.exclude-functions}} \
        --log-level=${{inputs.log-level}} \
        --verbose=${{inputs.verbose}} \
        --status &

      # Run a sync barrier, that is:
      # the tracee that is going to be tested
      # is being traced.
      xcover wait --timeout ${{inputs.wait-timeout}}s

      # Only then, start executing tests.
      ${{inputs.tests}}

      # Graceful shutdown.
      kill -SIGINT %1
      wait %1

      # Validate the coverage report.
      test -f xcover-report.json || \
        { echo "Skip report validation: report does not exist."; exit 1; }

      # Extract coverage percentage from the report.
      coverage=$(jq '.cov_by_func' < <(cat xcover-report.json))
      echo "Coverage is ${coverage} %"

      # If set, set up the gate.
      if [ -n "${{inputs.min-coverage}}" ]; then
        true=1
        if [[ $(echo "$coverage > ${{inputs.min-coverage}}" | bc -l) != $true ]]; then
          echo "Coverage ${coverage} % is below the expected minimum ${{inputs.min-coverage}}"
          exit 1
        fi
      fi

