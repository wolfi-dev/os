package:
  name: pixi
  version: "0.53.0"
  epoch: 2 # GHSA-xwfj-jgwm-7wp5
  description: "Package management made easy"
  dependencies:
    runtime:
      - bash # Requires bash at runtime when trying to run `pixi add`
  copyright:
    - license: BSD-3-Clause

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/prefix-dev/pixi.git
      expected-commit: aa5270d67ebdc42f41571b8a883f411c39b870d1
      tag: v${{package.version}}

  - uses: rust/cargobump

  - uses: cargo/build
    with:
      modroot: .
      output: pixi

  - uses: strip

update:
  enabled: true
  github:
    identifier: prefix-dev/pixi
    strip-prefix: v

subpackages:
  - name: ${{package.name}}-compat
    description: Compatibility subpackage for Pixi upstream image
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}/usr/local/bin"
          ln -s ../../bin/pixi "${{targets.subpkgdir}}/usr/local/bin/pixi"
    test:
      environment:
        contents:
          packages:
            - ${{package.name}}
      pipeline:
        - uses: test/tw/symlink-check

test:
  pipeline:
    - name: Smoke tests
      runs: |
        set -o pipefail
        pixi --help | grep -F -e "Developer Workflow and Environment Management"
        pixi --version | grep -F -e "${{package.version}}"
    - name: Ensure functionality works
      runs: |
        set -o pipefail
        pixi init

        pixi search numpy | grep -E -e "License.*BSD-3-Clause"

        pixi add flask pytest

        pixi task add test 'pytest -s'
        { pixi run test || true ; } | grep -F -e "collected 0 items"
        pixi clean

        pixi config list 2>&1 | grep -F -e "Configuration not set"

        pixi list | grep -F -e "flask"
        pixi list | grep -F -e "pytest"

        pixi exec pyright --help | grep -F -e "Usage: pyright [options]"
