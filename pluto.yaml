package:
  name: pluto
  version: "5.22.1"
  epoch: 2
  description: A cli tool to help discover deprecated apiVersions in Kubernetes
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/FairwindsOps/pluto
      tag: v${{package.version}}
      expected-commit: b2edcf65c9a59ea14efc56f4fd4cd0634b1c19e2

  - uses: go/bump
    with:
      deps: |-
        github.com/go-viper/mapstructure/v2@v2.3.0

  - uses: go/build
    with:
      packages: ./cmd/pluto/main.go
      output: pluto
      ldflags: |
        -X main.version=${{package.version}} -X main.commit=$(git rev-parse HEAD)}

update:
  enabled: true
  github:
    identifier: FairwindsOps/pluto
    strip-prefix: v
    use-tag: true
    tag-filter: v

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binaries in the location expected by upstream Dockerfile"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          ln -sf /usr/bin/pluto ${{targets.contextdir}}/pluto
    test:
      pipeline:
        - uses: test/tw/symlink-check

test:
  environment:
    contents:
      packages:
        - jq
  pipeline:
    - name: "Basic version test"
      runs: |
        pluto version | grep -q "${{package.version}}"
        pluto --help
    - uses: test/kwok/cluster
    - name: "Bash Completion test"
      runs: |
        pluto completion bash 2>&1 | grep -q "bash completion V2 for pluto"
    - name: "Detection test"
      runs: |
        # Create a sample manifest
        cat > deprecated.yaml <<EOF
        apiVersion: apps/v1beta1
        kind: Deployment
        metadata:
          name: deprecated-deployment
        spec:
          template:
            spec:
              containers:
              - name: nginx
                image: nginx
        EOF
        # Detect issues
        pluto detect deprecated.yaml --output json | jq '.items[]' | grep -q '"deprecated": true'
        echo "hello"
    - name: "detect-all-in-cluster"
      runs: |
        # Create and apply a custom Endpoints object
        cat > deprecated-endpoints.yaml <<EOF
        apiVersion: v1
        kind: Endpoints
        metadata:
          name: deprecated-endpoints
        subsets:
        - addresses:
          - ip: 10.0.0.10
          ports:
          - port: 80
            protocol: TCP
        EOF
        kubectl apply -f deprecated-endpoints.yaml
        pluto detect-all-in-cluster --output json --ignore-deprecations --ignore-removals | grep -q "target-versions"
    - name: "List Versions"
      runs: |
        pluto list-versions | grep -q "Deployment"
        pluto list-versions | grep -q "PodSecurityPolicy"
