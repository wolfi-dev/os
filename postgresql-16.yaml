package:
  name: postgresql-16
  version: "16.6"
  epoch: 2
  description: A sophisticated object-relational DBMS
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - postgresql=${{package.full-version}}
    runtime:
      - ${{package.name}}-base=${{package.full-version}}

environment:
  environment:
    # Used to fetch docker scripts
    ALPINE_VERSION: "3.21"
  contents:
    packages:
      - autoconf
      - automake
      - bash
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - execline-dev
      - flex
      - icu-dev
      - libedit-dev
      - libxml2-dev
      - net-tools
      - openssl-dev
      - util-linux-dev
      - zlib-dev

var-transforms:
  - from: ${{package.name}}
    match: "-"
    replace: ""
    to: mangled-package-name
  - from: ${{package.version}}
    match: '\.'
    replace: "_"
    to: mangled-package-version
  - from: ${{package.version}}
    match: ^(\d+).*
    replace: $1
    to: major-version

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 1f47e7b59b92c58eee6840325d1aaa6acee84194
      repository: https://github.com/postgres/postgres
      tag: REL_${{vars.mangled-package-version}}

  - uses: patch
    with:
      patches: |
        per-version-dirs.patch

  - uses: autoconf/configure
    with:
      opts: |
        --bindir=/usr/libexec/${{vars.mangled-package-name}} \
        --datadir=/usr/share/${{vars.mangled-package-name}} \
        --docdir=/usr/share/doc/${{vars.mangled-package-name}} \
        --mandir=/usr/share/${{vars.mangled-package-name}}/man \
        --with-openssl \
        --with-libedit-preferred \
        --with-uuid=e2fs \
        --with-libxml

  - uses: autoconf/make

  - uses: autoconf/make-install

  - runs: |
      # Symlink postgres to /usr/bin
      mkdir -p ${{targets.destdir}}/usr/bin
      ln -sf /usr/libexec/${{vars.mangled-package-name}}/postgres ${{targets.destdir}}/usr/bin/postgres16

      # the official postgres image listens on all interfaces by default, let's do the same for consistency
      sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/postgresql.conf.sample
      grep -F "listen_addresses = '*'" ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/postgresql.conf.sample

  - uses: strip

vars:
  client-tools: clusterdb createdb createuser dropdb dropuser pg_amcheck pg_basebackup pg_dump pg_dumpall pg_isready pg_receivewal pg_recvlogical pg_restore pg_verifybackup psql reindexdb vacuumdb

subpackages:
  - name: ${{package.name}}-dev
    pipeline:
      - uses: split/dev
    dependencies:
      provides:
        - postgresql-dev=${{package.full-version}}
      runtime:
        - ${{package.name}}
        - openssl-dev
        - ${{package.name}}-client
        - libpq-16
    description: postgresql dev

  - name: ${{package.name}}-client-base
    description: PostgreSQL client base
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}
          for binary in ${{vars.client-tools}}; do
            mv ${{targets.destdir}}/usr/libexec/${{vars.mangled-package-name}}/${binary} ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/${binary}
          done

  - name: ${{package.name}}-client
    description: PostgreSQL client
    dependencies:
      runtime:
        - ${{package.name}}-client-base=${{package.full-version}}
      provides:
        - postgresql-client=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          for binary in ${{vars.client-tools}}; do
            ln -sf /usr/libexec/${{vars.mangled-package-name}}/${binary} ${{targets.subpkgdir}}/usr/bin/${binary}
          done

  - name: ${{package.name}}-pgadmin-compat
    description: Provides pg${{vars.major-version}} client utils in pgAdmin's path
    dependencies:
      runtime:
        - ${{package.name}}-client-base
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/local/pgsql-${{vars.major-version}}
          for path in ${{targets.outdir}}/${{package.name}}-client-base/usr/libexec/${{vars.mangled-package-name}}/*; do
            name=${path##*/}
            ln -s /usr/libexec/${{vars.mangled-package-name}}/$name ${{targets.contextdir}}/usr/local/pgsql-${{vars.major-version}}/$name
          done

  - name: ${{package.name}}-contrib
    dependencies:
      provides:
        - postgresql-contrib=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}
          make DESTDIR=${{targets.subpkgdir}} -C contrib install
    description: Extension modules distributed with PostgreSQL
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

  - name: libpq-16
    description: PostgreSQL libraries
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib
          mv ${{targets.destdir}}/usr/lib/libpq.so* ${{targets.subpkgdir}}/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})
    dependencies:
      provider-priority: 16
      provides:
        - libpq=${{package.full-version}}

  - name: libecpg-16
    description: Embedded PostgreSQL libraries
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib
          mv ${{targets.destdir}}/usr/lib/libecpg.so* ${{targets.subpkgdir}}/usr/lib/
          mv ${{targets.destdir}}/usr/lib/libecpg_compat.so* ${{targets.subpkgdir}}/usr/lib/
          mv ${{targets.destdir}}/usr/lib/libpgtypes.so* ${{targets.subpkgdir}}/usr/lib/
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})
    dependencies:
      provider-priority: 16
      provides:
        - libecpg=${{package.full-version}}

  - name: ${{package.name}}-oci-entrypoint-base
    description: Base for PostgreSQL entrypoint in OCI containers
    dependencies:
      runtime:
        - bash
        # Needs gosu, added at image level
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}
          curl https://raw.githubusercontent.com/docker-library/postgres/master/16/alpine"${ALPINE_VERSION}"/docker-entrypoint.sh -o \
            ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh
          curl https://raw.githubusercontent.com/docker-library/postgres/master/16/alpine"${ALPINE_VERSION}"/docker-ensure-initdb.sh -o \
            ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh
          sed -i "s|/docker-entrypoint-initdb.d|/var/lib/postgres/initdb|g" ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh
          sed -i "s|/usr/local|/usr|g" ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh
          chmod +x ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh

  - name: ${{package.name}}-oci-entrypoint
    description: Entrypoint for using PostgreSQL in OCI containers
    dependencies:
      provides:
        - postgresql-oci-entrypoint=${{package.full-version}}
      runtime:
        - ${{package.name}}-oci-entrypoint-base
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          mkdir -p ${{targets.subpkgdir}}/var/lib/postgres/initdb
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh ${{targets.subpkgdir}}/usr/bin/docker-entrypoint.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh ${{targets.subpkgdir}}/var/lib/postgres/initdb/docker-entrypoint.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh ${{targets.subpkgdir}}/usr/bin/docker-ensure-initdb.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh ${{targets.subpkgdir}}/var/lib/postgres/initdb/docker-ensure-initdb.sh
    test:
      pipeline:
        - name: "Verify entrypoint scripts exist and are not empty"
          runs: |
            # Define files as a space-separated string
            FILES="/usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh \
                  /usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh"

            # Iterate over each file
            for FILE_PATH in $FILES; do
              # Check if the file exists
              if [ ! -f "$FILE_PATH" ]; then
                echo "Error: $FILE_PATH does not exist."
                exit 1
              fi

              # Check if the file is not empty
              if [ ! -s "$FILE_PATH" ]; then
                echo "Error: $FILE_PATH is empty."
                exit 1
              fi

              # Display the first few lines of the file for debugging
              echo "File $FILE_PATH exists and is not empty. Showing the first few lines:"
              head -n 10 "$FILE_PATH"
              echo
            done

  # This subpackage should always come last to avoid shipping resources included in other subpackages
  - name: "${{package.name}}-base"
    description: "Base for PostgreSQL 16"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"

          # Move contents of main package to base package
          mv "${{targets.destdir}}"/* "${{targets.subpkgdir}}"

          # Create symlinks to binaries in execdir to bindir in main package
          export bindir="${{targets.destdir}}/usr/bin"
          export execdir="/usr/libexec/${{vars.mangled-package-name}}"

          mkdir -p "${bindir}"

          cd "${{targets.subpkgdir}}/${execdir}"
          for binary in *; do
            ln -sf "${execdir}/${binary}" "${bindir}/${binary}"
          done
    test:
      pipeline:
        - uses: test/ldd-check
          with:
            packages: $(basename ${{targets.contextdir}})

update:
  version-separator: _
  enabled: true
  # Requires manual steps when updating because of usage of ALPINE_VERSION: "3.21" while pulling docker-entrypoint scripts
  # which gets updated in https://github.com/docker-library/postgres.
  # This will help us prevent breaking changes in the future.
  manual: true
  github:
    identifier: postgres/postgres
    strip-prefix: REL_
    tag-filter: REL_16
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-client
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: wolfi
  pipeline:
    - name: "Test if PostgreSQL binaries are present and runnable"
      runs: |
        command -v initdb
        command -v pg_ctl
        command -v psql
        ecpg --version
        ecpg --help
        initdb --version
        initdb --help
        pg_archivecleanup --version
        pg_archivecleanup --help
        pg_checksums --version
        pg_checksums --help
        pg_config --version
        pg_config --help
        pg_controldata --version
        pg_controldata --help
        pg_ctl --version
        pg_ctl --help
        pg_resetwal --version
        pg_resetwal --help
        pg_rewind --version
        pg_rewind --help
        pg_test_fsync --version
        pg_test_fsync --help
        pg_test_timing --version
        pg_upgrade --version
        pg_upgrade --help
        pg_waldump --version
        pg_waldump --help
        pgbench --version
        pgbench --help
        postgres --version
        postgres --help
    - name: "Test database creation"
      runs: |
        useradd $PGUSER
        sudo -u $PGUSER initdb -D /tmp/test_db
        sudo -u $PGUSER pg_ctl -D /tmp/test_db -l /tmp/logfile start
        createdb testdb
        psql -lqt | cut -d \| -f 1 | grep -qw testdb
    - name: "Test basic read/write operations"
      runs: |
        psql -d testdb -c "CREATE TABLE test_table (id SERIAL PRIMARY KEY, test_value VARCHAR(50));"
        psql -d testdb -c "INSERT INTO test_table (test_value) VALUES ('Hello, PostgreSQL!');"
        psql -d testdb -t -A -c "SELECT test_value FROM test_table WHERE id=1;"
    - name: "Test xml support"
      runs: |
        psql -d testdb -c "CREATE TABLE test (data xml);"
        psql -d testdb -c "INSERT INTO test values (XMLPARSE(CONTENT '<foo>bar</foo>'));"
    - name: "Test server can run and respond to requests"
      runs: |
        psql -d testdb -c "\conninfo"
