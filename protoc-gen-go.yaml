package:
  name: protoc-gen-go
  version: "1.36.5"
  epoch: 0
  description: Go support for Google's protocol buffers
  copyright:
    - license: BSD-3-Clause

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/protocolbuffers/protobuf-go
      tag: v${{package.version}}
      expected-commit: f09e239720f1bcd654d565107b1d4feea184d552

  - uses: go/build
    with:
      packages: ./cmd/protoc-gen-go
      modroot: .
      output: protoc-gen-go

  - uses: strip

update:
  enabled: true
  github:
    identifier: protocolbuffers/protobuf-go
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - protobuf
        - go
        - build-base
        - protoc
  pipeline:
    - name: "Verify protoc-gen-go installation"
      runs: |
        which protoc-gen-go
    - name: "Check protoc-gen-go version"
      runs: |
        protoc-gen-go --version
    - name: "Test basic proto compilation"
      runs: |
        cat > simple.proto << 'EOF'
        syntax = "proto3";
        package example;
        option go_package = "example/generated";
        message Person {
          string name = 1;
          int32 age = 2;
        }
        EOF
        protoc --go_out=. --go_opt=paths=source_relative simple.proto
        test -f simple.pb.go
    - name: "Test proto with nested messages"
      runs: |
        cat > nested.proto << 'EOF'
        syntax = "proto3";
        package example;
        option go_package = "example/generated";
        message Outer {
          message Inner {
            string value = 1;
          }
          Inner inner = 1;
        }
        EOF
        protoc --go_out=. --go_opt=paths=source_relative nested.proto
        test -f nested.pb.go
    - name: "Test proto with services"
      runs: |
        cat > service.proto << 'EOF'
        syntax = "proto3";
        package example;
        option go_package = "example/generated";
        message Request {
          string input = 1;
        }
        message Response {
          string output = 1;
        }
        service Echo {
          rpc Echo(Request) returns (Response);
        }
        EOF
        protoc --go_out=. --go_opt=paths=source_relative service.proto
        test -f service.pb.go
    - name: "Test handling of imports"
      runs: |
        mkdir -p protos
        cat > protos/common.proto << 'EOF'
        syntax = "proto3";
        package common;
        option go_package = "example/common";
        message Status {
          string message = 1;
        }
        EOF
        cat > protos/main.proto << 'EOF'
        syntax = "proto3";
        package main;
        option go_package = "example/main";
        import "protos/common.proto";
        message Response {
          common.Status status = 1;
        }
        EOF
        protoc --go_out=. --go_opt=paths=source_relative protos/*.proto
        test -f protos/common.pb.go
        test -f protos/main.pb.go
    - name: "Test error handling with invalid proto"
      runs: |
        cat > invalid.proto << 'EOF'
        syntax = "proto3";
        package example;
        option go_package = "example/generated";
        message Invalid {
          string name = 1
        }
        EOF
        if protoc --go_out=. --go_opt=paths=source_relative invalid.proto 2>/dev/null; then
          exit 1
        fi
