package:
  name: pugixml
  version: "1.15"
  epoch: 0
  description: "Light-weight, simple and fast XML parser for C++ with XPath support"
  copyright:
    - license: MIT

environment:
  contents:
    repositories:
      - https://packages.wolfi.dev/os
    keyring:
      - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - samurai

pipeline:
  - uses: git-checkout
    with:
      expected-commit: ee86beb30e4973f5feffe3ce63bfa4fbadf72f38
      repository: https://github.com/zeux/pugixml
      tag: v${{package.version}}

  - uses: cmake/configure
    with:
      output-dir: build
      opts: >-
        -G Ninja
        -DCMAKE_INSTALL_PREFIX=/usr
        -DCMAKE_BUILD_TYPE=Release
        -DBUILD_SHARED_LIBS=ON
        -DPUGIXML_BUILD_TESTS=OFF
        -DPUGIXML_INSTALL=ON

  - uses: cmake/build
    with:
      output-dir: build

  - uses: cmake/install
    with:
      output-dir: build

  - uses: strip

subpackages:
  - name: "pugixml-dev"
    description: "Development files for pugixml"
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - pugixml

update:
  enabled: true
  github:
    identifier: zeux/pugixml
    strip-prefix: v
    tag-filter-prefix: v

test:
  environment:
    contents:
      repositories:
        - https://packages.wolfi.dev/os
      keyring:
        - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
      packages:
        - build-base
        - pugixml-dev
        - g++
  pipeline:
    - name: "Check pugixml version"
      runs: |
        pkg-config --modversion pugixml | grep ${{package.version}}

    - name: "Compile and run simple XML parsing test"
      runs: |
        cat > test.cpp << EOF
        #include <pugixml.hpp>
        #include <iostream>

        int main() {
            pugi::xml_document doc;

            // Parse simple string
            pugi::xml_parse_result result = doc.load_string("<root><child>Test</child></root>");

            if (!result) {
                std::cerr << "Parse error: " << result.description() << std::endl;
                return 1;
            }

            // Print elements
            for (pugi::xml_node child = doc.first_child().first_child(); child; child = child.next_sibling()) {
                std::cout << "Element: " << child.name() << std::endl;
            }

            return 0;
        }
        EOF

        g++ -o test test.cpp -lpugixml
        ./test | grep "Element: child"
