package:
  name: py3-awscrt
  version: "0.23.10"
  epoch: 0
  description: Python bindings for the AWS Common Runtime
  copyright:
    - license: Apache-2.0
  dependencies:
    provider-priority: 0

vars:
  pypi-package: awscrt
  import: awscrt

data:
  - name: py-versions
    items:
      3.10: "310"
      3.11: "311"
      3.12: "312"
      3.13: "313"

environment:
  contents:
    packages:
      - aws-crt-cpp-dev
      - cmake
      - openssl-dev
      - py3-supported-build-base-dev
      - py3-supported-gpep517
      - py3-supported-setuptools
      - samurai
  environment:
    AWS_CRT_BUILD_USE_SYSTEM_LIBCRYPTO: 1
    AWS_CRT_BUILD_FORCE_STATIC_LIBS: 0 # Allow linking to shared libraries

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/awslabs/aws-crt-python
      tag: v${{package.version}}
      expected-commit: 3fb77f66f281e1e0356d1b0ff070dd38580e0c42
      recurse-submodules: true

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: python${{range.key}} version of ${{vars.pypi-package}}
    dependencies:
      provider-priority: ${{range.value}}
      provides:
        - py3-${{vars.pypi-package}}
    pipeline:
      - uses: py/pip-build-install
        with:
          python: python${{range.key}}
      - uses: strip
    test:
      environment:
        contents:
          packages:
            - python-${{range.key}}
      pipeline:
        - runs: |
            python <<-EOF
            import awscrt
            from awscrt import io, mqtt

            # Test EventLoopGroup
            event_loop_group = io.EventLoopGroup(1)
            assert event_loop_group is not None

            # Test HostResolver
            host_resolver = io.DefaultHostResolver(event_loop_group)
            assert host_resolver is not None

            # Test ClientBootstrap
            client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)
            assert client_bootstrap is not None

            # Test TLS options
            tls_ctx_options = io.TlsContextOptions()
            assert tls_ctx_options is not None
            assert hasattr(tls_ctx_options, 'verify_peer')

            print("CRT functionality tests passed!")
            EOF
        - uses: python/import
          with:
            python: python${{range.key}}
            imports: |
              import ${{vars.import}}

  - name: py3-supported-${{vars.pypi-package}}
    description: meta package providing ${{vars.pypi-package}} for supported python versions.
    dependencies:
      runtime:
        - py3.10-${{vars.pypi-package}}
        - py3.11-${{vars.pypi-package}}
        - py3.12-${{vars.pypi-package}}
        - py3.13-${{vars.pypi-package}}

test:
  pipeline:
    - uses: python/import
      with:
        imports: |
          import ${{vars.import}}

update:
  enabled: true
  github:
    identifier: awslabs/aws-crt-python
    use-tag: true
    strip-prefix: v
