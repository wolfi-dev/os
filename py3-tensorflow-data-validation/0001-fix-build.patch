diff --git a/WORKSPACE b/WORKSPACE
index 71db771..7ce9383 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -32,6 +32,37 @@ load("@rules_proto//proto:toolchains.bzl", "rules_proto_toolchains")
 
 rules_proto_toolchains()
 
+# m4 is used and fetched by zetasql but we want to patch it so load it before calling zetasql_deps_step_2 
+http_archive(
+    name = "m4",
+    build_file_content = """filegroup(name = "all", srcs = glob(["**"]), visibility = ["//visibility:public"])""",
+    strip_prefix = "m4-1.4.18",
+    sha256 = "ab2633921a5cd38e48797bf5521ad259bdc4b979078034a3b790d7fec5493fab",
+    urls = [
+        "https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.gz",
+        "https://mirrors.kernel.org/gnu/m4/m4-1.4.18.tar.gz",
+    ],
+    patches = [
+        "@com_google_zetasql//bazel:m4.patch",
+        "@//third_party:m4-cstack.patch"
+    ],
+)
+
+
+# Needed by abseil-py by zetasql.
+[
+    http_archive(
+        name = name,
+        urls = [
+            "http://mirror.bazel.build/pypi.python.org/packages/source/s/six/six-1.16.0.tar.gz",
+            "https://pypi.python.org/packages/source/s/six/six-1.16.0.tar.gz",
+        ],
+        sha256 = "1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926",
+        build_file = "@//third_party:six.BUILD",
+    )
+    for name in ["six_archive", "six"]
+]
+
 # Install version 0.9.0 of rules_foreign_cc, as default version causes an
 # invalid escape sequence error to be raised, which can't be avoided with
 # the --incompatible_restrict_string_escapes=false flag (flag was removed in
@@ -72,16 +103,18 @@ http_archive(
 )
 
 # Needed by abseil-py by zetasql.
-http_archive(
-    name = "six_archive",
-    build_file = "//third_party:six.BUILD",
-    sha256 = "105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a",
-    strip_prefix = "six-1.10.0",
-    urls = [
-        "http://mirror.bazel.build/pypi.python.org/packages/source/s/six/six-1.10.0.tar.gz",
-        "https://pypi.python.org/packages/source/s/six/six-1.10.0.tar.gz",
-    ],
-)
+[
+    http_archive(
+        name = name,
+        urls = [
+            "http://mirror.bazel.build/pypi.python.org/packages/source/s/six/six-1.16.0.tar.gz",
+            "https://pypi.python.org/packages/source/s/six/six-1.16.0.tar.gz",
+        ],
+        sha256 = "1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926",
+        build_file = "@//third_party:six.BUILD",
+    )
+    for name in ["six_archive", "six"]
+]
 
 load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
 
diff --git a/tensorflow_data_validation/workspace.bzl b/tensorflow_data_validation/workspace.bzl
index 9f67ea5..c6a13be 100644
--- a/tensorflow_data_validation/workspace.bzl
+++ b/tensorflow_data_validation/workspace.bzl
@@ -14,6 +14,6 @@ def tf_data_validation_workspace():
 
     git_repository(
         name = "com_github_tfx_bsl",
-        branch = "master",
+        commit = "1d4b5389b5e65df7a26b3748f68a6399aaea034f",
         remote = "https://github.com/tensorflow/tfx-bsl",
     )
diff --git a/third_party/m4-cstack.patch b/third_party/m4-cstack.patch
new file mode 100644
index 0000000..9fedf70
--- /dev/null
+++ b/third_party/m4-cstack.patch
@@ -0,0 +1,40 @@
+--- lib/c-stack.c
++++ lib/c-stack2.c
+@@ -50,14 +50,14 @@
+ #if ! HAVE_STACK_T && ! defined stack_t
+ typedef struct sigaltstack stack_t;
+ #endif
+-#ifndef SIGSTKSZ
+-# define SIGSTKSZ 16384
+-#elif HAVE_LIBSIGSEGV && SIGSTKSZ < 16384
++#ifndef GNULIB_SIGSTKSZ
++# define GNULIB_SIGSTKSZ 16384
++#elif HAVE_LIBSIGSEGV && GNULIB_SIGSTKSZ < 16384
+ /* libsigsegv 2.6 through 2.8 have a bug where some architectures use
+    more than the Linux default of an 8k alternate stack when deciding
+    if a fault was caused by stack overflow.  */
+-# undef SIGSTKSZ
+-# define SIGSTKSZ 16384
++# undef GNULIB_SIGSTKSZ
++# define GNULIB_SIGSTKSZ 16384
+ #endif
+ 
+ #include <stdlib.h>
+@@ -131,7 +131,7 @@
+ /* Storage for the alternate signal stack.  */
+ static union
+ {
+-  char buffer[SIGSTKSZ];
++  char buffer[GNULIB_SIGSTKSZ];
+ 
+   /* These other members are for proper alignment.  There's no
+      standard way to guarantee stack alignment, but this seems enough
+@@ -282,7 +282,7 @@
+ # if SIGALTSTACK_SS_REVERSED
+   /* Irix mistakenly treats ss_sp as the upper bound, rather than
+      lower bound, of the alternate stack.  */
+-  st.ss_sp = alternate_signal_stack.buffer + SIGSTKSZ - sizeof (void *);
++  st.ss_sp = alternate_signal_stack.buffer + GNULIB_SIGSTKSZ - sizeof (void *);
+   st.ss_size = sizeof alternate_signal_stack.buffer - sizeof (void *);
+ # else
+   st.ss_sp = alternate_signal_stack.buffer;
\ No newline at end of file
diff --git a/third_party/six.BUILD b/third_party/six.BUILD
index 206a160..f093c09 100644
--- a/third_party/six.BUILD
+++ b/third_party/six.BUILD
@@ -8,9 +8,22 @@ licenses(["notice"])  # MIT
 
 exports_files(["LICENSE"])
 
+load("@rules_python//python:defs.bzl", "py_library")
+
+# Consume `six.py` as `__init__.py` for compatibility
+# with `--incompatible_default_to_explicit_init_py`.
+# https://github.com/protocolbuffers/protobuf/pull/6795#issuecomment-546060749
+# https://github.com/bazelbuild/bazel/issues/10076
+genrule(
+    name = "copy_six",
+    srcs = ["six-1.16.0/six.py"],
+    outs = ["__init__.py"],
+    cmd = "cp $< $(@)",
+)
+
 py_library(
     name = "six",
-    srcs = ["six.py"],
+    srcs = ["__init__.py"],
     srcs_version = "PY2AND3",
     visibility = ["//visibility:public"],
 )
