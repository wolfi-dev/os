package:
  name: py3-wrapt
  version: "1.17.1"
  epoch: 1
  description: Module for decorators, wrappers and monkey patching.
  copyright:
    - license: BSD-2-Clause
  dependencies:
    provider-priority: "0"

vars:
  module_name: wrapt
  pypi-package: wrapt

data:
  - name: py-versions
    items:
      "3.10": "310"
      "3.11": "311"
      "3.12": "312"
      "3.13": "313"

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-supported-pip
      - py3-supported-setuptools
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/GrahamDumpleton/wrapt
      tag: ${{package.version}}
      expected-commit: c41e6eadb39f45ce96f488cecb250e417926b49d

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    pipeline:
      - name: Python Build
        uses: py/pip-build-install
        with:
          python: python${{range.key}}
    dependencies:
      provides:
        - py3-${{vars.pypi-package}}
      provider-priority: ${{range.value}}
    test:
      pipeline:
        - name: Import Test
          uses: python/import
          with:
            import: ${{vars.module_name}}
            python: python${{range.key}}

update:
  enabled: true
  github:
    identifier: GrahamDumpleton/wrapt
    strip-prefix: wrapt-

test:
  pipeline:
    - name: Import Test
      uses: python/import
      with:
        import: ${{vars.module_name}}
    - name: Test decorator functionality
      uses: py/one-python
      with:
        content: |
          #!/usr/bin/env python3
          import wrapt
          before_hit = False
          body_hit = False
          after_hit = False

          # Define a decorator that prints messages before and after the function
          @wrapt.decorator
          def my_decorator(wrapped, instance, args, kwargs):
              global before_hit, after_hit
              before_hit = True
              print("Before function")
              result = wrapped(*args, **kwargs)  # Call the decorated function
              after_hit = True
              return result

          # Apply the decorator to a sample function
          @my_decorator
          def sample_function():
              global body_hit
              body_hit = True
              print("Function body")  # This is the body of the function

          # Call the decorated function
          sample_function()

          assert before_hit is True, "Before code not hit"
          assert after_hit is True, "After code not hit"
          assert body_hit is True, "Body was not hit"
