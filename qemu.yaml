package:
  name: qemu
  version: "10.1.2"
  epoch: 1
  description: "fast processor emulator"
  copyright:
    - license: GPL-2.0
  dependencies:
    runtime:
      - ${{package.name}}-ipxe
      - ${{package.name}}-system-aarch64
      - ${{package.name}}-system-x86_64
      - ${{package.name}}-utils
      - glib

vars:
  python-version: "3.13"

environment:
  contents:
    packages:
      - bash
      - bison
      - build-base
      - flex
      - git
      - glib
      - glib-dev
      - glib-static
      - libaio-dev
      - libjpeg-turbo-dev
      - liburing-dev
      - ncurses
      - ncurses-dev
      - ninja-build
      - perl
      - pixman-dev
      - python3-as-${{vars.python-version}}
      - samurai
      - wolfi-base
      - zlib-dev
      - zlib-static
      - zstd-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/qemu/qemu
      expected-commit: ccaea6b2656ec6eab966585f7b16438208f98de7
      tag: v${{package.version}}

  - name: "qemu-system"
    runs: |
      mkdir -p build/qemu
      cd build/qemu
      # until this is initialized value don't remove the CFLAGS changes below
      # https://github.com/qemu/qemu/blob/v10.1.0/target/i386/kvm/tdx.c#L827
      CFLAGS="$CFLAGS -Wno-maybe-uninitialized" \
          ../../configure \
              --enable-system \
              --enable-slirp \
              --enable-vnc \
              --target-list=x86_64-softmmu,aarch64-softmmu \
              --prefix=/usr
      make -j$(nproc)
      make install DESTDIR=${{targets.destdir}}

  - name: "strip"
    runs: |
      # Remove this firmware file, which we don't need, but requires so:dld.sl, which we don't have
      rm -f ${{targets.destdir}}/usr/share/qemu/hppa-firmware64.img
      # Can't use strip pipeline; there are some binaries that melange can't strip,
      # causes a failed build, so here we do a lazy strip
      find ${{targets.destdir}}/usr -type f -exec strip {} \; || true

subpackages:
  - name: ${{package.name}}-ipxe
    description: "QEMU iPXE roms"
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu/
          for i in e1000 e1000e eepro100 ne2k_pci pcnet rtl8139 virtio vmxnet3; do
            mv "${{targets.destdir}}"/usr/share/qemu/efi-$i.rom "${{targets.subpkgdir}}"/usr/share/qemu/
          done

  - name: ${{package.name}}-utils # in Alpine this is qemu-img
    description: "QEMU utils"
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          for i in img io nbd storage-daemon; do
            mv "${{targets.destdir}}"/usr/bin/qemu-$i "${{targets.subpkgdir}}"/usr/bin/
          done
    test:
      environment:
        contents:
          packages:
            - jq
      pipeline:
        - runs: |
            qemu-img --version
            qemu-img --help
            qemu-img create -f qcow2 disk1.img 1G
            qemu-io --version
            qemu-io --help
            qemu-nbd --version
            qemu-nbd --help
            qemu-storage-daemon --version
            qemu-storage-daemon --help
        - name: "qemu-img zlib and zstd support"
          runs: |
            disk=disk1
            qemu-img create -f raw $disk.raw 2G
            for ctype in zlib zstd; do
                t="convert raw to qcow with $comp"
                qemu-img convert -f raw -O qcow2 -c -o compression_type=$ctype \
                    $disk.raw $disk-$ctype.qcow2 ||
                    { echo "FAIL: $t - qemu-img convert failed"; exit 1; }
                jblob=$(qemu-img info --output=json $disk-$ctype.qcow2) ||
                    { echo "FAIL: $t - qemu-img info --output=json failed"; exit 1; }
                found=$(echo "$jblob" |
                    jq -r '"\(.format)/\(.["format-specific"].data."compression-type")"')
                expected="qcow2/$ctype"
                [ "$found" = "qcow2/$ctype" ] || {
                  echo "FAIL: $t - qemu-img info said '$found' expected '$expected'";
                  exit 1;
                }
                echo "PASS: $t"
            done

  - name: ${{package.name}}-system-x86_64
    description: "QEMU x86 system"
    dependencies:
      runtime:
        - ${{package.name}}-ipxe
        - ${{package.name}}-edk2-x86_64
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/qemu-system-x86_64 "${{targets.subpkgdir}}"/usr/bin/
    test:
      environment:
        contents:
          packages:
            - curl
      pipeline:
        - runs: |
            qemu-system-x86_64 --version
            qemu-system-x86_64 --help

            # Basic test to launch a kernel with QEMU
            #
            # First download a kernel from Alpine. Based on:
            # https://github.com/chainguard-dev/melange/blob/1c0002b45a39afb617493c0cce16ce21ecb3411d/.github/workflows/wolfi-presubmit.yaml#L104
            KERNEL_PKG="$(curl -sL https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz | tar -Oxz APKINDEX | awk -F':' '$1 == "P" {printf "%s-", $2} $1 == "V" {printf "%s.apk\n", $2}' | grep "linux-virt" | grep -v dev)"
            curl -LSo /tmp/linux-virt.apk "https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/$KERNEL_PKG"
            tar -xf /tmp/linux-virt.apk -C /tmp/

            # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
            # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
            qemu-system-x86_64 \
              -kernel /tmp/boot/vmlinuz-virt -m 1G -nographic -append "console=ttyS0 panic=1" \
              -no-reboot | grep -q "Unable to mount root fs"

  - name: ${{package.name}}-edk2-x86_64
    description: "QEMU built edk2 files for x86_64"
    pipeline:
      - runs: |
          # This is the equivalent to QEMU_EFI.fd
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-x86_64-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-x86_64-secure-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/

          # i386 vars are same as format as x86_64, but this is easier for consumer.
          cp "${{targets.destdir}}"/usr/share/qemu/edk2-i386-vars.fd "${{targets.subpkgdir}}"/usr/share/qemu/edk2-x86_64-vars.fd

  - name: ${{package.name}}-system-aarch64
    description: "QEMU aarch64 system"
    dependencies:
      runtime:
        - ${{package.name}}-ipxe
        - ${{package.name}}-edk2-aarch64
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/qemu-system-aarch64 "${{targets.subpkgdir}}"/usr/bin/
    test:
      environment:
        contents:
          packages:
            - curl
      pipeline:
        - runs: |
            qemu-system-aarch64 --version
            qemu-system-aarch64 --help
            # Basic test to launch a kernel with QEMU
            #
            # First download a kernel from Alpine. Based on:
            # https://github.com/chainguard-dev/melange/blob/1c0002b45a39afb617493c0cce16ce21ecb3411d/.github/workflows/wolfi-presubmit.yaml#L104
            KERNEL_PKG="$(curl -sL https://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/APKINDEX.tar.gz | tar -Oxz APKINDEX | awk -F':' '$1 == "P" {printf "%s-", $2} $1 == "V" {printf "%s.apk\n", $2}' | grep "linux-virt" | grep -v dev)"
            curl -LSo /tmp/linux-virt.apk "https://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/$KERNEL_PKG"
            tar -xf /tmp/linux-virt.apk -C /tmp/

            # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
            # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
            qemu-system-aarch64 -kernel /tmp/boot/vmlinuz-virt -m 1G -cpu max -machine virt \
              -nographic -no-reboot -append "panic=1" | grep -q "Unable to mount root fs"

  - name: ${{package.name}}-edk2-aarch64
    description: "QEMU built edk2 files for aarch64"
    pipeline:
      - runs: |
          # This is the equivalent to QEMU_EFI.fd
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-aarch64-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/

          # arm vars are same as format as aarch64, but this is easier for consumer.
          cp "${{targets.destdir}}"/usr/share/qemu/edk2-arm-vars.fd "${{targets.subpkgdir}}"/usr/share/qemu/edk2-aarch64-vars.fd

  - name: ${{package.name}}-user
    description: "QEMU user binaries"
    pipeline:
      - runs: |
          mkdir -p build/user
          cd build/user
          # until this is initialized value don't remove the CFLAGS changes below
          # https://github.com/qemu/qemu/blob/v10.1.0/target/i386/kvm/tdx.c#L827
          CFLAGS="$CFLAGS -Wno-maybe-uninitialized" \
              ../../configure \
                  --static --disable-plugins \
                  --target-list=aarch64-linux-user,i386-linux-user,x86_64-linux-user \
                  --prefix=/usr
          make -j$(nproc)
          make install DESTDIR=${{targets.contextdir}}
          rm -rf ${{targets.contextdir}}/usr/share/qemu
          cd ../..

          chmod ugo+x binfmt-install
          ./binfmt-install ${{targets.contextdir}} ${{build.arch}} aarch64 i386 x86_64
          # binfmt-install creates .conf files in /usr/share/qemu/binfmt.d and
          # symlinks to those files in usr/lib/binfmt.d. This package will
          # contain only the conf files.
          # Remove the usr/lib/binfmt.d files that are packaged in -user-binfmt below.
          rm -Rf ${{targets.contextdir}}/usr/lib/binfmt.d/
      - uses: strip
    test:
      environment:
        contents:
          packages:
            - file
      pipeline:
        - uses: test/tw/ver-check
          with:
            bins: qemu-aarch64 qemu-i386 qemu-x86_64
            version-flag: "-version"
        - uses: test/tw/help-check
          with:
            bins: qemu-aarch64 qemu-i386 qemu-x86_64
            help-flag: -h
        - name: "should be static"
          runs: |
            set +x
            errors=""
            set -- /usr/bin/qemu-*
            for bin in "$@"; do
                out=$(file "$bin") || {
                  echo "ERROR: 'file $bin' exited $?";
                  errors="${errors} $bin";
                  continue;
                }
                echo "$out" | grep -q static-pie || {
                  echo "ERROR: 'file $bin' did not contain 'static-pie': $out"
                  errors=$((errors+1))
                  continue
                }
            done
            [ -z "$errors" ] || { echo "FATAL: found errors in ${errors}"; exit 1; }
            echo "PASS: static executables [$*]"

  - name: ${{package.name}}-user-binfmt
    description: "binfmt files for qemu-user"
    dependencies:
      runtime:
        - ${{package.name}}-user
    pipeline:
      - runs: |
          # package the symlinks in usr/lib/binfmt.d that systemd-binfmt.service(8) will use,
          # but remove the targets of those symlinks which are provided by qemu-user
          # which is a runtime dependency.
          chmod ugo+x binfmt-install
          ./binfmt-install ${{targets.contextdir}} ${{build.arch}} aarch64 i386 x86_64
          rm -Rf ${{targets.contextdir}}/usr/share/qemu/binfmt.d/
    test:
      pipeline:
        - runs: |
            set +x
            dir=/usr/lib/binfmt.d
            found=""
            for f in $dir/*.conf ; do
               [ -e "$f" ] || { echo "$f - did not exist"; continue; }
               [ -f "$f" ] || { echo "$f - unexpected non-file"; continue; }
               found="${found} ${f##*/}"
            done
            found=${found# }
            [ -n "$found" ] || { echo "FATAL: did not find files in $dir"; exit 1; }
            echo "PASS: found conf files in $dir: $found"

test:
  pipeline:
    - uses: test/tw/ldd-check
    - uses: test/pkgconf
    - runs: |
        for i in /usr/bin/qemu-system-*; do
          $i --help 2>/dev/null && echo "$i --> OKAY" || echo "$i --> FAIL"
          $i --version 2>/dev/null && echo "$i --> OKAY" || echo "$i --> FAIL"
        done
        qemu-edid version
        qemu-edid help
        qemu-ga --version
        qemu-ga --help
        qemu-pr-helper --version
        qemu-pr-helper --help

update:
  enabled: true
  github:
    identifier: qemu/qemu
    use-tag: true
    strip-prefix: v
    tag-filter: v
