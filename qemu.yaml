package:
  name: qemu
  version: "9.2.1"
  epoch: 0
  description: "fast processor emulator"
  copyright:
    - license: GPL-2.0
  dependencies:
    runtime:
      - ${{package.name}}-ipxe
      - ${{package.name}}-system-aarch64
      - ${{package.name}}-system-x86_64
      - ${{package.name}}-utils
      - glib

environment:
  contents:
    packages:
      - bash
      - bison
      - build-base
      - flex
      - git
      - glib
      - glib-dev
      - glib-static
      - ncurses
      - ncurses-dev
      - ninja-build
      - perl
      - py3-packaging
      - py3-pip
      - py3-sphinx
      - python3
      - samurai
      - wolfi-base
      - zlib-dev
      - zlib-static

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/qemu/qemu
      expected-commit: cac3fb4414778eab741a5e58ca0a30f1edc9528a
      tag: v${{package.version}}

  - runs: |
      mkdir build
      cd build
      ../configure --enable-system --enable-slirp --target-list=x86_64-softmmu,aarch64-softmmu --prefix=${{targets.destdir}}/usr
      make -j$(nproc)
      make install
      # Remove this firmware file, which we don't need, but requires so:dld.sl, which we don't have
      rm -f ${{targets.destdir}}/usr/share/qemu/hppa-firmware64.img
      # Can't use strip pipeline; there are some binaries that melange can't strip,
      # causes a failed build, so here we do a lazy strip
      find ${{targets.destdir}}/usr -type f -exec strip {} \; || true

subpackages:
  - name: ${{package.name}}-ipxe
    description: "QEMU iPXE roms"
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu/
          for i in e1000 e1000e eepro100 ne2k_pci pcnet rtl8139 virtio vmxnet3; do
            mv "${{targets.destdir}}"/usr/share/qemu/efi-$i.rom "${{targets.subpkgdir}}"/usr/share/qemu/
          done

  - name: ${{package.name}}-utils # in Alpine this is qemu-img
    description: "QEMU utils"
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          for i in img io nbd storage-daemon; do
            mv "${{targets.destdir}}"/usr/bin/qemu-$i "${{targets.subpkgdir}}"/usr/bin/
          done
    test:
      pipeline:
        - runs: |
            qemu-img --version
            qemu-img --help
            qemu-img create -f qcow2 disk1.img 1G
            qemu-io --version
            qemu-io --help
            qemu-nbd --version
            qemu-nbd --help
            qemu-storage-daemon --version
            qemu-storage-daemon --help

  - name: ${{package.name}}-system-x86_64
    description: "QEMU x86 system"
    dependencies:
      runtime:
        - ${{package.name}}-ipxe
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/qemu-system-x86_64 "${{targets.subpkgdir}}"/usr/bin/

          # This is the equivalent to QEMU_EFI.fd
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-x86_64-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-x86_64-secure-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/

          # i386 vars are same as format as x86_64, but this is easier for consumer.
          cp "${{targets.destdir}}"/usr/share/qemu/edk2-i386-vars.fd "${{targets.subpkgdir}}"/usr/share/qemu/edk2-x86_64-vars.fd
    test:
      environment:
        contents:
          packages:
            - curl
      pipeline:
        - runs: |
            qemu-system-x86_64 --version
            qemu-system-x86_64 --help

            # Basic test to launch a kernel with QEMU
            #
            # First download a kernel from Alpine. Based on:
            # https://github.com/chainguard-dev/melange/blob/1c0002b45a39afb617493c0cce16ce21ecb3411d/.github/workflows/wolfi-presubmit.yaml#L104
            KERNEL_PKG="$(curl -sL https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz | tar -Oxz APKINDEX | awk -F':' '$1 == "P" {printf "%s-", $2} $1 == "V" {printf "%s.apk\n", $2}' | grep "linux-virt" | grep -v dev)"
            curl -LSo /tmp/linux-virt.apk "https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/$KERNEL_PKG"
            tar -xf /tmp/linux-virt.apk -C /tmp/

            # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
            # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
            qemu-system-x86_64 \
              -kernel /tmp/boot/vmlinuz-virt -m 1G -nographic -append "console=ttyS0 panic=1" \
              -no-reboot | grep -q "Unable to mount root fs"

  - name: ${{package.name}}-system-aarch64
    description: "QEMU aarch64 system"
    dependencies:
      runtime:
        - ${{package.name}}-ipxe
    pipeline:
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          mv "${{targets.destdir}}"/usr/bin/qemu-system-aarch64 "${{targets.subpkgdir}}"/usr/bin/

          # This is the equivalent to QEMU_EFI.fd
          mkdir -p "${{targets.subpkgdir}}"/usr/share/qemu
          mv "${{targets.destdir}}"/usr/share/qemu/edk2-aarch64-code.fd "${{targets.subpkgdir}}"/usr/share/qemu/

          # arm vars are same as format as aarch64, but this is easier for consumer.
          cp "${{targets.destdir}}"/usr/share/qemu/edk2-arm-vars.fd "${{targets.subpkgdir}}"/usr/share/qemu/edk2-aarch64-vars.fd
    test:
      environment:
        contents:
          packages:
            - curl
      pipeline:
        - runs: |
            qemu-system-aarch64 --version
            qemu-system-aarch64 --help
            # Basic test to launch a kernel with QEMU
            #
            # First download a kernel from Alpine. Based on:
            # https://github.com/chainguard-dev/melange/blob/1c0002b45a39afb617493c0cce16ce21ecb3411d/.github/workflows/wolfi-presubmit.yaml#L104
            KERNEL_PKG="$(curl -sL https://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/APKINDEX.tar.gz | tar -Oxz APKINDEX | awk -F':' '$1 == "P" {printf "%s-", $2} $1 == "V" {printf "%s.apk\n", $2}' | grep "linux-virt" | grep -v dev)"
            curl -LSo /tmp/linux-virt.apk "https://dl-cdn.alpinelinux.org/alpine/edge/main/aarch64/$KERNEL_PKG"
            tar -xf /tmp/linux-virt.apk -C /tmp/

            # Launch qemu, point to our kernel, put kernel boot console on standard out, exit on panic,
            # don't reboot, and make sure we get to the step where we're trying to mount a rootfs
            qemu-system-aarch64 -kernel /tmp/boot/vmlinuz-virt -m 1G -cpu max -machine virt \
              -nographic -no-reboot -append "panic=1" | grep -q "Unable to mount root fs"

test:
  pipeline:
    - runs: |
        for i in /usr/bin/qemu-system-*; do
          $i --help 2>/dev/null && echo "$i --> OKAY" || echo "$i --> FAIL"
          $i --version 2>/dev/null && echo "$i --> OKAY" || echo "$i --> FAIL"
        done
        qemu-edid version
        qemu-edid help
        qemu-ga --version
        qemu-ga --help
        qemu-pr-helper --version
        qemu-pr-helper --help

update:
  enabled: true
  github:
    identifier: qemu/qemu
    use-tag: true
    strip-prefix: v
    tag-filter: v
