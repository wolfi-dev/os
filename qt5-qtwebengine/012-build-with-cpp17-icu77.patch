Subject: Build with C++17 for ICU 77 compatibility
Upstream: No (distribution compatibility patch)
Origin: Arch Linux (ICU 75), adapted by Debian for ICU 75, now for Wolfi ICU 77
Reference: https://gitlab.archlinux.org/archlinux/packaging/packages/qt5-webengine/-/blob/main/qt5-webengine-icu-75.patch?ref_type=heads
Author: Soren Stoutner <soren@debian.org> (Debian adaptation)
Forwarded: not-needed
Last-Update: 2024-05-21

Qt WebEngine 5.15.17 (Chromium 87) compiles with -std=gnu++14 by default, but
ICU 77 headers require C++17 features (std::is_same_v, std::u16string_view, auto
template parameters). This patch upgrades the compilation standard to C++17 and
adds missing C++17 headers.

Changes:
1. Upgrade from C++14 to C++17 in BUILD.gn compiler config
2. Add missing <cstdint> includes for C++17 WebRTC headers
3. Add missing <memory> include for reverb_model_estimator.h
4. Add absl/base/attributes.h for text_fragment_selector_generator.cc
5. Disable __STDCPP_DEFAULT_NEW_ALIGNMENT__ check (C++14 requirement comment obsolete)
6. Disable ABSL_OPTION_USE_STD_VARIANT to avoid C++17 std::variant issues

This allows Qt WebEngine to build with modern ICU versions while maintaining
compatibility with Chromium 87's codebase.

--- a/src/3rdparty/chromium/build/config/compiler/BUILD.gn
+++ b/src/3rdparty/chromium/build/config/compiler/BUILD.gn
@@ -566,7 +566,7 @@ config("compiler") {
       # Override Chromium's default for projects that wish to stay on C++11.
       cflags_cc += [ "-std=${standard_prefix}++11" ]
     } else {
-      cflags_cc += [ "-std=${standard_prefix}++14" ]
+      cflags_cc += [ "-std=${standard_prefix}++17" ]
     }
   } else if (!is_win && !is_nacl) {
     if (target_os == "android") {
--- a/src/3rdparty/chromium/base/allocator/partition_allocator/partition_alloc_constants.h
+++ b/src/3rdparty/chromium/base/allocator/partition_allocator/partition_alloc_constants.h
@@ -195,7 +195,7 @@ NumPartitionPagesPerSuperPage() {
 //
 // __STDCPP_DEFAULT_NEW_ALIGNMENT__ is C++17. As such, it is not defined on all
 // platforms, as Chrome's requirement is C++14 as of 2020.
-#if defined(__STDCPP_DEFAULT_NEW_ALIGNMENT__)
+#if 0
 static constexpr size_t kAlignment =
     std::max(alignof(std::max_align_t), __STDCPP_DEFAULT_NEW_ALIGNMENT__);
 #else
--- a/src/3rdparty/chromium/third_party/webrtc/common_video/h264/sps_parser.h
+++ b/src/3rdparty/chromium/third_party/webrtc/common_video/h264/sps_parser.h
@@ -12,6 +12,7 @@
 #define COMMON_VIDEO_H264_SPS_PARSER_H_

 #include "absl/types/optional.h"
+#include <cstdint>

 namespace rtc {
 class BitBuffer;
--- a/src/3rdparty/chromium/third_party/webrtc/common_video/h264/pps_parser.h
+++ b/src/3rdparty/chromium/third_party/webrtc/common_video/h264/pps_parser.h
@@ -12,6 +12,7 @@
 #define COMMON_VIDEO_H264_PPS_PARSER_H_

 #include "absl/types/optional.h"
+#include <cstdint>

 namespace rtc {
 class BitBuffer;
--- a/src/3rdparty/chromium/third_party/webrtc/modules/include/module_common_types_public.h
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/include/module_common_types_public.h
@@ -14,6 +14,7 @@
 #include <limits>

 #include "absl/types/optional.h"
+#include <cstdint>

 namespace webrtc {

--- a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/reverb_model_estimator.h
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/reverb_model_estimator.h
@@ -13,6 +13,7 @@

 #include <array>
 #include <vector>
+#include <memory>

 #include "absl/types/optional.h"
 #include "api/array_view.h"
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/page/scrolling/text_fragment_selector_generator.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/page/scrolling/text_fragment_selector_generator.cc
@@ -15,6 +15,7 @@
 #include "third_party/blink/renderer/core/page/scrolling/text_fragment_anchor_metrics.h"
 #include "third_party/blink/renderer/core/page/scrolling/text_fragment_finder.h"
 #include "third_party/blink/renderer/platform/text/text_boundaries.h"
+#include "absl/base/attributes.h"

 namespace blink {

--- a/src/3rdparty/chromium/third_party/abseil-cpp/absl/base/options.h
+++ b/src/3rdparty/chromium/third_party/abseil-cpp/absl/base/options.h
@@ -180,7 +180,7 @@
 // absl::variant is a typedef of std::variant, use the feature macro
 // ABSL_USES_STD_VARIANT.

-#define ABSL_OPTION_USE_STD_VARIANT 2
+#define ABSL_OPTION_USE_STD_VARIANT 0


 // ABSL_OPTION_USE_INLINE_NAMESPACE
