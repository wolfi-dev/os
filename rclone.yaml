package:
  name: rclone
  version: "1.69.1"
  epoch: 5
  description: rsync for cloud storage - Google Drive, S3, Dropbox, Backblaze B2, One Drive, Swift, Hubic, Wasabi, Google Cloud Storage, Yandex Files
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ca-certificates
      - fuse3
      - tzdata

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 4e77a4ff73645f45873188de2683067d6756038e
      repository: https://github.com/rclone/rclone
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        golang.org/x/crypto@v0.35.0
        golang.org/x/oauth2@v0.27.0
        golang.org/x/net@v0.36.0
        github.com/golang-jwt/jwt/v4@v4.5.2
        github.com/golang-jwt/jwt/v5@v5.2.2

  - uses: go/build
    with:
      ldflags: -X github.com/rclone/rclone/fs.Version=${{package.version}}
      packages: .
      output: rclone

  - runs: |
      mkdir -p ${{targets.destdir}}/etc
      echo "user_allow_other" >> ${{targets.destdir}}/etc/fuse.conf

subpackages:
  - name: "${{package.name}}-compat"
    description: "Compatibility package to place binaries in the same location used by the upstream image"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/local/bin
          ln -sf /usr/bin/rclone ${{targets.subpkgdir}}/usr/local/bin/rclone
    test:
      environment:
        contents:
          packages:
            - ${{package.name}}
      pipeline:
        - runs: |
            /usr/local/bin/rclone --version | grep -E "rclone ${{package.version}}$"
            /usr/local/bin/rclone --help

update:
  enabled: true
  github:
    identifier: rclone/rclone
    strip-prefix: v

test:
  pipeline:
    # AUTOGENERATED
    - runs: |
        rclone --version | grep -E "rclone ${{package.version}}$"
        rclone --help
    - name: Basic local operations test
      runs: |
        # Create test directories
        mkdir -p /tmp/rclone-test-source
        mkdir -p /tmp/rclone-test-dest

        # Create test files
        echo "test content 1" > /tmp/rclone-test-source/file1.txt
        echo "test content 2" > /tmp/rclone-test-source/file2.txt

        # Test copy operation
        rclone copy /tmp/rclone-test-source /tmp/rclone-test-dest

        # Verify files exist in destination
        if [ ! -f /tmp/rclone-test-dest/file1.txt ] || [ ! -f /tmp/rclone-test-dest/file2.txt ]; then
          echo "Copy operation failed - files missing"
          exit 1
        fi

        # Verify content
        if ! diff /tmp/rclone-test-source/file1.txt /tmp/rclone-test-dest/file1.txt; then
          echo "Content verification failed for file1.txt"
          exit 1
        fi
    - name: Config parsing test
      runs: |
        # Create a minimal test config
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf <<EOF
        [local]
        type = local
        EOF

        # Verify config is readable
        rclone config show | grep -v "empty config"
