package:
  name: repmgr-17
  version: 5.5.0
  epoch: 40
  description: "A lightweight replication manager for PostgreSQL"
  copyright:
    - license: GPL-3.0-only
  dependencies:
    provides:
      - repmgr=${{package.full-version}}
    runtime:
      - libpq-17
      - merged-usrsbin
      - pgaudit-17
      - postgresql-17
      - postgresql-17-client
      - wolfi-baselayout

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - ca-certificates-bundle
      - curl-dev
      - docbook-xml
      - flex
      - git
      - json-c-dev
      - krb5-dev
      - libedit-dev
      - libpq-17
      - libssl3
      - libxml2-dev
      - libxslt-dev
      - linux-pam-dev
      - openssl-dev
      - postgresql-17-dev
      - readline-dev
      - wolfi-base

var-transforms:
  - from: ${{package.name}}
    match: "repmgr-(.+)"
    replace: "$1"
    to: major-postgresql-version

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/EnterpriseDB/repmgr
      tag: v${{package.version}}
      expected-commit: c0d9dc6dac34c4cb60c3d8805842eed18cca4e85

  - uses: autoconf/configure
    with:
      opts: --sbindir=/usr/bin

  - uses: autoconf/make

  - uses: autoconf/make-install

  - name: Symlink repmgr binaries
    runs: |
      mkdir -p "${{targets.destdir}}/usr/bin"
      ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgr ${{targets.destdir}}/usr/bin/repmgr
      ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgrd ${{targets.destdir}}/usr/bin/repmgrd

subpackages:
  - name: ${{package.name}}-bitnami-compat
    description: "compat package with bitnami/repmgr image"
    dependencies:
      runtime:
        - busybox
        - posix-libc-utils
        - glibc-locale-en
        - curl
        - coreutils
        - bash
        - brotli
        - libcom_err
        - libcurl-openssl4
        - libedit
        - libffi
        - libgcc
        - gnutls
        - nettle
        - net-tools
        - icu-libs
        - libidn
        - krb5
        - keyutils-libs
        - libldap
        - liblz4-1
        - xz
        - libmd
        - libnghttp2-14
        - p11-kit-trust
        - pcre2
        - libpsl
        - readline
        - librtmp
        - sqlite-libs
        - sed
        - grep
        - libssh
        - libssl3
        - libstdc++-6
        - libtasn1
        - ncurses
        - libunistring
        - libuuid
        - libxml2
        - libxslt
        - libzstd1
        - glibc-locales
        - procps
        - zlib
        - samba-libs
        - krb5-libs
        - cyrus-sasl
        - gmp
        - merged-usrsbin
    pipeline:
      - uses: bitnami/compat
        with:
          image: postgresql-repmgr
          version-path: ${{vars.major-postgresql-version}}/debian-12
      - runs: |
          mkdir -p ${{targets.contextdir}}/opt/bitnami/repmgr/bin
          mkdir -p ${{targets.contextdir}}/opt/bitnami/repmgr/conf
          mkdir -p ${{targets.contextdir}}/opt/bitnami/repmgr/tmp
          mv ${{targets.contextdir}}/events ${{targets.contextdir}}/opt/bitnami/repmgr/events
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgr ${{targets.contextdir}}/opt/bitnami/repmgr/bin/repmgr
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgrd ${{targets.contextdir}}/opt/bitnami/repmgr/bin/repmgrd
          chmod -R u+rwX,g+rwX,o+rw ${{targets.contextdir}}/opt/bitnami/
          find / -perm /6000 -type f -exec chmod a-s {} \; || true
      - name: PostgreSQL Bitnami compat
        runs: |
          # Copy-paste from postgresql-bitnami-compat package.
          # Having the postgresql-bitnami-compat package in the runtime dependencies would be ideal, but it
          # conflicts with nearly all other bitnami/scripts directories due to `bitnami/compat` pipeline
          # in the postgresql-bitnami-compat package. So, let's just hardcode for now.
          mkdir -p ${{targets.contextdir}}/bitnami/postgresql
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/conf
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/conf/conf.d
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/conf.default
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/conf.default/conf.d
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/share
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/tmp
          mkdir -p ${{targets.contextdir}}/opt/bitnami/postgresql/logs

          chmod -R u+rwX,g+rwX,o+rw ${{targets.contextdir}}/bitnami/postgresql
          chmod -R u+rwX,g+rwX,o+rw ${{targets.contextdir}}/opt/bitnami/postgresql

          # Copy sample configs used to generate Bitnami config
          cp /usr/share/postgresql${{vars.major-postgresql-version}}/pg_hba.conf.sample ${{targets.contextdir}}/opt/bitnami/postgresql/share/pg_hba.conf.sample
          cp /usr/share/postgresql${{vars.major-postgresql-version}}/postgresql.conf.sample ${{targets.contextdir}}/opt/bitnami/postgresql/share/postgresql.conf.sample

          # Use package path while unpacking
          find . -iname "*.sh" -exec sed 's#/opt/bitnami#${{targets.contextdir}}/opt/bitnami#g' -i {} \;
            ${{targets.contextdir}}/opt/bitnami/scripts/postgresql/postunpack.sh || true
          # Restore path
          find ${{targets.contextdir}}/opt/bitnami -type f -exec sed 's#${{targets.contextdir}}##g' -i {} \;

          # Link binaries used by Bitnami config
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}} ${{targets.contextdir}}/opt/bitnami/postgresql/bin
          ln -sf /usr/lib/postgresql${{vars.major-postgresql-version}} ${{targets.contextdir}}/opt/bitnami/postgresql/lib

          # Image is readonly, so we can't write anything to filesytem.
          ln -sf /dev/stdout ${{targets.contextdir}}/opt/bitnami/postgresql/logs/postgresql.log
    test:
      environment:
        environment:
          PATH: "/opt/bitnami/postgresql/bin:/opt/bitnami/repmgr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          BITNAMI_APP_NAME: "postgresql-repmgr"
          NSS_WRAPPER_LIB: "/opt/bitnami/common/lib/libnss_wrapper.so"
        accounts:
          groups:
            - groupname: postgres
              gid: 1001
          users:
            - username: postgres
              gid: 1001
              uid: 1001
          run-as: 1001
      pipeline:
        - working-directory: /tmp # Workaround for "can't cd to /home/build: Permission denied" error
          pipeline:
            - name: "Launch the postgresql-repmgr"
              uses: test/daemon-check-output
              with:
                start: |
                  env REPMGR_PASSWORD=repmgrpass \
                      REPMGR_NODE_NETWORK_NAME=pg-0 \
                      REPMGR_NODE_NAME=pg-0 \
                      REPMGR_PARTNER_NODES=pg-0 \
                      REPMGR_PRIMARY_HOST=pg-0 \
                      POSTGRESQL_PASSWORD=secretpass \
                      /opt/bitnami/scripts/postgresql-repmgr/entrypoint.sh /opt/bitnami/scripts/postgresql-repmgr/run.sh
                timeout: 60
                expected_output: |
                  Initializing Repmgr
                  Initializing PostgreSQL
                  Starting PostgreSQL

update:
  enabled: true
  ignore-regex-patterns:
    - rc*
  github:
    identifier: EnterpriseDB/repmgr
    use-tag: true
    strip-prefix: v
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: repmgruser
      PGPASS: repmgrpassword
      PGDB: repmgr_test
  pipeline:
    - name: Create a non-root PostgreSQL user
      runs: |
        useradd repmgruser
        echo "${PGUSER}:${PGPASS}" | chpasswd
    - name: Initialize PostgreSQL as non-root user
      runs: |
        sudo -u ${PGUSER} initdb -D ${PGDATA}
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} -l /tmp/logfile start
        sudo -u ${PGUSER} createdb ${PGDB}
        sudo -u ${PGUSER} psql -d ${PGDB} -c "GRANT ALL PRIVILEGES ON SCHEMA public TO ${PGUSER};"
    - name: Configure primary for replication
      runs: |
        echo "host replication ${PGUSER} 127.0.0.1/32 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "host replication ${PGUSER} ::1/128 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "wal_level = replica" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "archive_mode = on" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "max_wal_senders = 5" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "hot_standby = on" | sudo tee -a ${PGDATA}/postgresql.conf
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} restart
    - name: Create repmgr configuration for primary
      runs: |
        cat <<EOF | sudo tee /etc/repmgr.conf
        node_id=1
        node_name=primary_node
        conninfo='host=localhost port=5432 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='${PGDATA}'
        log_file='/tmp/repmgr_primary.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr.conf
    - name: Register primary node
      runs: |
        sudo -u ${PGUSER} repmgr -f /etc/repmgr.conf primary register
    - name: Initialize standby PostgreSQL node
      runs: |
        sudo -u ${PGUSER} pg_basebackup -D /tmp/test_db_standby -R -X stream -c fast -U ${PGUSER} -h localhost
        echo "primary_conninfo = 'host=localhost port=5432 user=${PGUSER} password=${PGPASS} application_name=standby_node'" \
        | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        echo "port = 5433" | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        sudo chown -R ${PGUSER}:${PGUSER} /tmp/test_db_standby
    - name: Start standby PostgreSQL server
      runs: |
        sudo -u ${PGUSER} pg_ctl -D /tmp/test_db_standby -l /tmp/logfile_standby start
    - name: Wait for standby to be ready
      runs: |
        until PGPASSWORD=${PGPASS} psql -p 5433 -U ${PGUSER} -d ${PGDB} -c "SELECT 1" >/dev/null 2>&1; do
          echo "Waiting for standby to be ready..."
          sleep 2
        done
    - name: Create repmgr configuration for standby
      runs: |
        cat <<EOF | sudo tee /etc/repmgr_standby.conf
        node_id=2
        node_name=standby_node
        conninfo='host=localhost port=5433 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='/tmp/test_db_standby'
        log_file='/tmp/repmgr_standby.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr_standby.conf
    - name: Start and register standby node
      runs: |
        sudo -u ${PGUSER} repmgr -f /etc/repmgr_standby.conf standby register --upstream-node-id=1
    - name: Verify cluster configuration
      runs: |
        sudo -u ${PGUSER} repmgr cluster show
