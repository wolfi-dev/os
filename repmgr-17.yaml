package:
  name: repmgr-17
  version: 5.5.0
  epoch: 45
  description: "A lightweight replication manager for PostgreSQL"
  copyright:
    - license: GPL-3.0-only
  dependencies:
    provides:
      - repmgr=${{package.full-version}}
    runtime:
      - libpq-17
      - merged-usrsbin
      - pgaudit-17
      - postgresql-17
      - postgresql-17-client
      - wolfi-baselayout
  resources:
    cpu: 16
    memory: 16Gi

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - ca-certificates-bundle
      - clang-19
      - curl-dev
      - docbook-xml
      - flex
      - git
      - json-c-dev
      - krb5-dev
      - libedit-dev
      - libpq-17
      - libssl3
      - libxml2-dev
      - libxslt-dev
      - linux-pam-dev
      - lz4-dev
      - openssl-dev
      - postgresql-17-dev
      - readline-dev
      - wolfi-base
      - zstd-dev

var-transforms:
  - from: ${{package.name}}
    match: "repmgr-(.+)"
    replace: "$1"
    to: major-postgresql-version

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/EnterpriseDB/repmgr
      tag: v${{package.version}}
      expected-commit: c0d9dc6dac34c4cb60c3d8805842eed18cca4e85

  - uses: autoconf/configure
    with:
      opts: --sbindir=/usr/bin

  - uses: autoconf/make

  - uses: autoconf/make-install

  - name: Symlink repmgr binaries
    runs: |
      mkdir -p "${{targets.destdir}}/usr/bin"
      ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgr ${{targets.destdir}}/usr/bin/repmgr
      ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgrd ${{targets.destdir}}/usr/bin/repmgrd

subpackages:
  - name: ${{package.name}}-iamguarded-compat
    description: "compat package with iamguarded/repmgr image"
    dependencies:
      runtime:
        - busybox
        - posix-libc-utils
        - glibc-locale-en
        - curl
        - coreutils
        - bash
        - brotli
        - libcom_err
        - libcurl-openssl4
        - libedit
        - libffi
        - libgcc
        - gnutls
        - nettle
        - net-tools
        - icu-libs
        - libidn
        - krb5
        - keyutils-libs
        - libldap
        - liblz4-1
        - xz
        - libmd
        - libnghttp2-14
        - p11-kit-trust
        - pcre2
        - libpsl
        - readline
        - librtmp
        - sqlite-libs
        - sed
        - grep
        - libssh
        - libssl3
        - libstdc++-6
        - libtasn1
        - ncurses
        - libunistring
        - libuuid
        - libxml2
        - libxslt
        - libzstd1
        - glibc-locales
        - procps
        - zlib
        - samba-libs
        - krb5-libs
        - cyrus-sasl
        - gmp
        - sudo
    pipeline:
      - uses: iamguarded/build-compat
        with:
          package: repmgr
          version: ${{vars.major-postgresql-version}}
      - runs: |
          mkdir -p /opt/iamguarded/repmgr/bin
          mkdir -p /opt/iamguarded/repmgr/conf
          mkdir -p /opt/iamguarded/repmgr/tmp
          mv ${{targets.contextdir}}/events /events
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgr /opt/iamguarded/repmgr/bin/repmgr
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}}/repmgrd /opt/iamguarded/repmgr/bin/repmgrd
          chmod -R g+rwX /opt/iamguarded/
          find / -perm /6000 -type f -exec chmod a-s {} \; || true
      - name: PostgreSQL compat
        runs: |
          mkdir -p /iamguarded/postgresql
          mkdir -p /opt/iamguarded/postgresql/conf
          mkdir -p /opt/iamguarded/postgresql/conf/conf.d
          mkdir -p /opt/iamguarded/postgresql/conf.default
          mkdir -p /opt/iamguarded/postgresql/conf.default/conf.d
          mkdir -p /opt/iamguarded/postgresql/share
          mkdir -p /opt/iamguarded/postgresql/tmp
          mkdir -p /opt/iamguarded/postgresql/logs

          chmod -R g+rwX /iamguarded/postgresql
          chmod -R g+rwX /opt/iamguarded/postgresql

          # Copy sample configs used to generate config
          cp /usr/share/postgresql${{vars.major-postgresql-version}}/pg_hba.conf.sample /opt/iamguarded/postgresql/share/pg_hba.conf.sample
          cp /usr/share/postgresql${{vars.major-postgresql-version}}/postgresql.conf.sample /opt/iamguarded/postgresql/share/postgresql.conf.sample

          /opt/iamguarded/scripts/postgresql-repmgr/postunpack.sh

          # Link binaries used by config
          ln -sf /usr/libexec/postgresql${{vars.major-postgresql-version}} /opt/iamguarded/postgresql/bin
          ln -sf /usr/lib/postgresql${{vars.major-postgresql-version}} /opt/iamguarded/postgresql/lib

          # Image is readonly, so we can't write anything to filesytem.
          ln -sf /dev/stdout /opt/iamguarded/postgresql/logs/postgresql.log
      - uses: iamguarded/finalize-compat
        with:
          package: repmgr
          version: ${{vars.major-postgresql-version}}
    test:
      environment:
        environment:
          PATH: "/opt/iamguarded/postgresql/bin:/opt/iamguarded/repmgr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          NSS_WRAPPER_LIB: "/opt/iamguarded/common/lib/libnss_wrapper.so"
        accounts:
          groups:
            - groupname: postgres
              gid: 1001
          users:
            - username: postgres
              gid: 1001
              uid: 1001
          run-as: 0
      pipeline:
        - uses: iamguarded/test-compat
          with:
            package: repmgr
            version: ${{vars.major-postgresql-version}}
        - pipeline:
            - name: "Launch the postgresql-repmgr"
              uses: test/daemon-check-output
              with:
                setup: |
                  chown postgres: -fR /iamguarded/postgresql
                  chown postgres: -fR /opt/iamguarded
                start: |
                  sudo -upostgres env \
                    REPMGR_PASSWORD=repmgrpass \
                    REPMGR_NODE_NETWORK_NAME=pg-0 \
                    REPMGR_NODE_NAME=pg-0 \
                    REPMGR_PARTNER_NODES=pg-0 \
                    REPMGR_PRIMARY_HOST=pg-0 \
                    POSTGRESQL_PASSWORD=secretpass \
                    /opt/iamguarded/scripts/postgresql-repmgr/entrypoint.sh /opt/iamguarded/scripts/postgresql-repmgr/run.sh
                timeout: 60
                expected_output: |
                  Initializing Repmgr
                  Initializing PostgreSQL
                  Starting PostgreSQL

update:
  enabled: true
  ignore-regex-patterns:
    - rc*
  github:
    identifier: EnterpriseDB/repmgr
    use-tag: true
    strip-prefix: v
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: repmgruser
      PGPASS: repmgrpassword
      PGDB: repmgr_test
  pipeline:
    - name: Test repmgr
      runs: |
        useradd repmgruser
        echo "${PGUSER}:${PGPASS}" | chpasswd
        sudo -u ${PGUSER} initdb -D ${PGDATA}
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} -l /tmp/logfile start >/dev/null 2>&1
        sudo -u ${PGUSER} createdb ${PGDB}
        sudo -u ${PGUSER} psql -d ${PGDB} -c "GRANT ALL PRIVILEGES ON SCHEMA public TO ${PGUSER};"
        echo "host replication ${PGUSER} 127.0.0.1/32 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "host replication ${PGUSER} ::1/128 md5" | sudo tee -a ${PGDATA}/pg_hba.conf
        echo "wal_level = replica" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "archive_mode = on" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "max_wal_senders = 5" | sudo tee -a ${PGDATA}/postgresql.conf
        echo "hot_standby = on" | sudo tee -a ${PGDATA}/postgresql.conf
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} restart
        cat <<EOF | sudo tee /etc/repmgr.conf
        node_id=1
        node_name=primary_node
        conninfo='host=localhost port=5432 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='${PGDATA}'
        log_file='/tmp/repmgr_primary.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr.conf
        sudo -u ${PGUSER} repmgr -f /etc/repmgr.conf primary register
        sudo -u ${PGUSER} pg_basebackup -D /tmp/test_db_standby -R -X stream -c fast -U ${PGUSER} -h localhost
        echo "primary_conninfo = 'host=localhost port=5432 user=${PGUSER} password=${PGPASS} application_name=standby_node'" \
        | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        echo "port = 5433" | sudo tee -a /tmp/test_db_standby/postgresql.auto.conf
        sudo chown -R ${PGUSER}:${PGUSER} /tmp/test_db_standby
        sudo -u ${PGUSER} pg_ctl -D /tmp/test_db_standby -l /tmp/logfile_standby start
        until PGPASSWORD=${PGPASS} psql -p 5433 -U ${PGUSER} -d ${PGDB} -c "SELECT 1" >/dev/null 2>&1; do
          echo "Waiting for standby to be ready..."
          sleep 2
        done
        cat <<EOF | sudo tee /etc/repmgr_standby.conf
        node_id=2
        node_name=standby_node
        conninfo='host=localhost port=5433 user=${PGUSER} dbname=${PGDB} password=${PGPASS}'
        data_directory='/tmp/test_db_standby'
        log_file='/tmp/repmgr_standby.log'
        EOF
        sudo chown ${PGUSER}:${PGUSER} /etc/repmgr_standby.conf
        sudo -u ${PGUSER} repmgr -f /etc/repmgr_standby.conf standby register --upstream-node-id=1
        sudo -u ${PGUSER} repmgr cluster show
        sudo -u ${PGUSER} pg_ctl -D ${PGDATA} stop
