package:
  name: rqlite
  version: "8.36.11"
  epoch: 0
  description: The lightweight, distributed relational database built on SQLite
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/rqlite/rqlite
      tag: v${{package.version}}
      expected-commit: 56ebe087df229a806030e1eeb82899787800db98

  - runs: |
      # docker-entrypoint.sh: update hardcoded docker entrypoint
      sed -i "s|RQLITED=/bin/rqlited|RQLITED=/usr/bin/rqlited|g" docker-entrypoint.sh

  - uses: go/build
    with:
      packages: ./cmd/rqlite
      tags: osusergo,netgo,sqlite_omit_load_extension
      ldflags: -extldflags=-static
      output: rqlite

  - uses: go/build
    with:
      packages: ./cmd/rqlited
      tags: osusergo,netgo,sqlite_omit_load_extension
      ldflags: -extldflags=-static
      output: rqlited

subpackages:
  - name: rqlite-oci-entrypoint
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/bin
          install -Dm755 docker-entrypoint.sh ${{targets.contextdir}}/usr/bin
    dependencies:
      runtime:
        - busybox # The entrypoint script uses a shell

test:
  environment:
    contents:
      packages:
        - curl
  pipeline:
    - runs: |
        rqlited ~/node.1 &
        sleep 5 # wait for rqlited to start

        RQLITE_URL="http://127.0.0.1:4001"

        # Check the status using the HTTP API
        output=$(curl -s "$RQLITE_URL/status")

        # Check if the output contains expected status information
        if echo "$output" | grep -q '"store":'; then
          echo "rqlite server is running."
          exit 0
        else
          echo "Failed to connect to rqlite server."
          exit 1
        fi
        rqlite --version
        rqlite --help
        rqlited --version
        rqlited --help

update:
  enabled: true
  github:
    identifier: rqlite/rqlite
    strip-prefix: v
