package:
  name: ruby3.2-aes_key_wrap
  version: 1.1.0
  epoch: 5
  description: A Ruby implementation of AES Key Wrap, a.k.a RFC 3394, a.k.a NIST Key Wrap.
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 7749c8d6dbc80a1544aea5d0da09b0380cbd9e57
      repository: https://github.com/tomdalling/aes_key_wrap
      tag: v${{package.version}}

  - uses: ruby/unlock-spec

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: aes_key_wrap

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
  pipeline:
    - runs: |
        ruby <<-EOF
        require 'aes_key_wrap'
        require 'test/unit'
        include Test::Unit::Assertions

        # Define KEK, plaintext key, and IV as per documentation
        plaintext_key = ['00112233445566778899AABBCCDDEEFF'].pack('H*') # 16-byte binary string
        kek = ['000102030405060708090A0B0C0D0E0F'].pack('H*')        # 16-byte binary string
        iv = ['DEADBEEFC0FFEEEE'].pack("H*")                         # 8-byte binary string

        # Test wrapping with IV
        wrapped_key = AESKeyWrap.wrap(plaintext_key, kek, iv)
        assert wrapped_key && wrapped_key.bytesize > 0, "Wrapped key should not be empty"
        puts "Wrap test passed"

        # Test unwrapping with IV
        unwrapped_key = AESKeyWrap.unwrap(wrapped_key, kek, iv)
        assert_equal plaintext_key, unwrapped_key, "Unwrapped key should match the original plaintext key"
        puts "Unwrap test passed"

        puts "Basic wrap/unwrap test with explicit IV passed"
        EOF
    - uses: test/tw/gem-check

update:
  enabled: true
  github:
    identifier: tomdalling/aes_key_wrap
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
