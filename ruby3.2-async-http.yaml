package:
  name: ruby3.2-async-http
  version: "0.87.0"
  epoch: 0
  description: A HTTP client and server library.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-async
      - ruby${{vars.rubyMM}}-async-io
      - ruby${{vars.rubyMM}}-async-pool
      - ruby${{vars.rubyMM}}-protocol-http
      - ruby${{vars.rubyMM}}-protocol-http1
      - ruby${{vars.rubyMM}}-protocol-http2
      - ruby${{vars.rubyMM}}-traces
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

vars:
  gem: async-http

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 5bded8ae9eb16b2d9547dcd330c78e81f9bedd35
      repository: https://github.com/socketry/async-http
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: 001-remove-signing-key.patch

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
        - ruby${{vars.rubyMM}}-io-endpoint
        - ruby${{vars.rubyMM}}-io-stream
  pipeline:
    - runs: |
        ruby <<-EOF
        require 'async'
        require 'async/http/server'
        require 'async/http/client'
        require 'async/http/endpoint'
        require 'protocol/http/response'
        require 'test/unit'
        include Test::Unit::Assertions

        # Define the HTTP server endpoint
        server_endpoint = Async::HTTP::Endpoint.parse("http://127.0.0.1:9292")

        # Define the server app that responds to GET requests only
        app = proc do |request|
          case request.method
          when "GET"
            Protocol::HTTP::Response[200, {}, ["Hello, World!"]]
          else
            Protocol::HTTP::Response[405, {}, ["Method Not Allowed"]]
          end
        end

        # Run the server and client tasks within a timeout block
        Async::Reactor.run do |task|
          begin
            # Server task: Start the server with the endpoint
            server = Async::HTTP::Server.new(app, server_endpoint)

            # Run server in a child task
            server_task = task.async do
              server.run
            end

            # Delay to ensure server is ready
            task.sleep(0.5)

            # Client task: Perform a single GET request
            client_task = task.async do
              client = Async::HTTP::Client.new(server_endpoint)

              # Test GET request
              response = client.get("/")
              assert_equal 200, response.status, "Expected 200 OK for GET request"
              assert_equal "Hello, World!", response.read, "Expected 'Hello, World!' in response body for GET request"
              puts "GET request test passed"

              client.close
            end

            # Wait for the client task to finish, then stop the server
            client_task.wait
            server_task.stop
          rescue => e
            puts "Error encountered: #{e.class} - #{e.message}"
            puts e.backtrace
          end
        end

        puts "Minimal async-http test completed."
        EOF

update:
  enabled: true
  github:
    identifier: socketry/async-http
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
