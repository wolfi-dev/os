#nolint:valid-pipeline-git-checkout-tag
package:
  name: ruby3.2-aws-sdk-kms
  version: 1.95.0
  epoch: 1
  description: Official AWS Ruby gem for AWS Key Management Service (KMS). This gem is part of the AWS SDK for Ruby.
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-aws-sdk-core
      - ruby${{vars.rubyMM}}-aws-sigv4

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 86cccb96ed7a0ee71cd33847151b4219d30b1571
      repository: https://github.com/aws/aws-sdk-ruby
      branch: version-3
      depth: -1

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}
      dir: gems/${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}
      dir: gems/${{vars.gem}}

  - uses: ruby/clean

vars:
  gem: aws-sdk-kms

update:
  enabled: false
  manual: true # the library we fetch uses a different version then the package version
  release-monitor:
    identifier: 174496

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
        - ruby${{vars.rubyMM}}-aws-sdk-core
        - ruby${{vars.rubyMM}}-aws-sigv4
  pipeline:
    - runs: |
        ruby <<-EOF
        require 'aws-sdk-kms'
        require 'test/unit'
        include Test::Unit::Assertions

        class TestAWSKMSSDK < Test::Unit::TestCase
          def setup
            # Mocking AWS KMS client
            @kms = Aws::KMS::Client.new(stub_responses: true)
          end

          def test_encrypt_decrypt
            # Mock encrypt and decrypt responses
            @kms.stub_responses(:encrypt, { ciphertext_blob: "mocked_ciphertext" })
            @kms.stub_responses(:decrypt, { plaintext: "decrypted_data" })

            # Encrypt mock data
            encrypt_resp = @kms.encrypt(key_id: "mocked-key-id", plaintext: "test_data")
            assert_equal "mocked_ciphertext", encrypt_resp.ciphertext_blob, "Encryption failed"

            # Decrypt mock data
            decrypt_resp = @kms.decrypt(ciphertext_blob: encrypt_resp.ciphertext_blob)
            assert_equal "decrypted_data", decrypt_resp.plaintext, "Decryption failed"

            puts "KMS encrypt/decrypt test passed!"
          end
        end
        EOF

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
