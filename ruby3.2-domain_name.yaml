# Generated from https://github.com/knu/ruby-domain_name
package:
  name: ruby3.2-domain_name
  version: 0.6.20240107
  epoch: 1
  description: This is a Domain Name manipulation library for Ruby.
  copyright:
    - license: BSD-2-Clause
    - license: BSD-3-Clause
    - license: MPL-2.0
  dependencies:
    runtime:
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/knu/ruby-domain_name.git
      tag: v${{package.version}}
      expected-commit: e955d9533e792b3293c560277c15515bfeeb65c9

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: domain_name

test:
  pipeline:
    - runs: ruby -e "require 'domain_name'; puts 'DomainName library loaded successfully!'"
    - runs: |
        ruby <<-EOF
        require 'domain_name'

        # Test creating and validating a domain name
        domain = DomainName.new("example.com")
        puts "Parsed domain: \#{domain}"
        raise "Domain parsing failed!" unless domain.to_s == "example.com"

        # Test domain with subdomains
        subdomain = DomainName.new("sub.example.com")
        puts "Parsed subdomain: \#{subdomain}"
        raise "Subdomain parsing failed!" unless subdomain.to_s == "sub.example.com"

        # Test invalid domain handling (if validation exists)
        invalid_domain = DomainName.new("invalid_domain")
        if invalid_domain.to_s == "invalid_domain"
          puts "Warning: Domain validation may not be enforced!"
        else
          raise "Unexpected behavior for invalid domain!"
        end

        # Test equality of domain names
        domain1 = DomainName.new("example.com")
        domain2 = DomainName.new("example.com")
        puts "Domain equality verified for \#{domain1} and \#{domain2}"
        raise "Domain equality test failed!" unless domain1 == domain2

        # Test canonicalization
        canonical_domain = DomainName.new("EXAMPLE.com").to_s
        puts "Canonicalized domain: \#{canonical_domain}"
        raise "Canonicalization failed!" unless canonical_domain == "example.com"

        puts "DomainName functionality fully verified!"
        EOF
    - uses: test/tw/gem-check

update:
  enabled: true
  github:
    identifier: knu/ruby-domain_name
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
