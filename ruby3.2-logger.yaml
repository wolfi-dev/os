# Generated from https://github.com/ruby/logger
package:
  name: ruby3.2-logger
  version: "1.6.6"
  epoch: 0
  description: Provides a simple logging utility for outputting messages.
  copyright:
    - license: Ruby
    - license: BSD-2-Clause
  dependencies:
    runtime:
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ruby/logger
      tag: v${{package.version}}
      expected-commit: 0eb10f2d278435899ce9055c98eb5b53caa0092a

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: logger

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
  pipeline:
    - runs: ruby -e "require 'logger'"
    - name: Test basic logging functionality
      runs: |
        ruby <<-EOF
        require 'logger'
        require 'stringio'

        # Use StringIO to capture log output
        log_output = StringIO.new
        logger = Logger.new(log_output)

        # Test different log levels
        logger.level = Logger::INFO
        logger.info('Info message')
        logger.error('Error message')
        logger.debug('Debug message') # Shouldn't appear due to log level

        log_content = log_output.string

        # Verify log level filtering works
        raise 'Info message not found' unless log_content.include?('Info message')
        raise 'Error message not found' unless log_content.include?('Error message')
        raise 'Debug message should not appear' if log_content.include?('Debug message')

        # Test log formatting
        raise 'Log entry missing severity' unless log_content.include?('INFO') && log_content.include?('ERROR')
        raise 'Log entries should be on separate lines' unless log_content.split("\n").length >= 2

        puts "Logger functionality tests passed!"
        EOF
    - name: Test advanced logger features
      runs: |
        ruby <<-EOF
        require 'logger'
        require 'stringio'
        require 'time'

        # Test custom formatter
        log_output = StringIO.new
        logger = Logger.new(log_output)
        logger.formatter = proc do |severity, datetime, progname, msg|
          "#{severity}|#{msg}\n"
        end

        logger.info('Custom format test')
        raise 'Custom formatter failed' unless log_output.string.include?('INFO|Custom format test')

        # Test progname
        logger.progname = 'TestApp'
        log_output.truncate(0)
        log_output.rewind

        logger.formatter = Logger::Formatter.new
        logger.info('Program name test')
        raise 'Progname not included' unless log_output.string.include?('TestApp')

        # Test datetime format
        logger.datetime_format = '%Y-%m-%d'
        log_output.truncate(0)
        log_output.rewind

        logger.info('Date format test')
        today = Time.now.strftime('%Y-%m-%d')
        raise 'Custom datetime format failed' unless log_output.string.include?(today)

        # Test log levels conversion
        logger.level = :info
        raise 'Symbol log level failed' unless logger.level == Logger::INFO

        logger.level = 'WARN'
        raise 'String log level failed' unless logger.level == Logger::WARN

        # Test adding custom levels (supported in newer versions)
        begin
          Logger.define_singleton_method(:success) { 25 }
          Logger.define_method(:success) { |progname, &block| add(Logger.success, nil, progname, &block) }
          logger.success('Custom level test')
        rescue => e
          # Skip if custom levels not supported in this version
        end

        puts "Advanced logger features tests passed!"
        EOF

update:
  enabled: true
  github:
    identifier: ruby/logger
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
