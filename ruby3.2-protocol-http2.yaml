package:
  name: ruby3.2-protocol-http2
  version: "0.22.1"
  epoch: 0
  description: A low level implementation of the HTTP/2 protocol.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-protocol-hpack
      - ruby${{vars.rubyMM}}-protocol-http
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

vars:
  gem: protocol-http2

pipeline:
  - uses: git-checkout
    with:
      expected-commit: df1f1e85c63b73d9d026727fa9d13a97ab365b8c
      repository: https://github.com/socketry/protocol-http2
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: 001-remove-signing-key.patch

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

update:
  enabled: true
  github:
    identifier: socketry/protocol-http2
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby${{vars.rubyMM}}-protocol-hpack
        - ruby${{vars.rubyMM}}-protocol-http
  pipeline:
    - name: Basic require test
      runs: |
        ruby -e "require 'protocol/http2'; puts 'HTTP/2 protocol library loaded successfully!'"
    - name: Test frame handling
      runs: |
        ruby <<-EOF
        require 'protocol/http2'
        require 'stringio'

        # Create a data frame with actual payload
        payload = "Hello, HTTP/2"
        frame = Protocol::HTTP2::DataFrame.new
        frame.pack(payload)

        # Create buffer for writing
        buffer = StringIO.new
        frame.write(buffer)

        raise "Frame encoding failed" if buffer.string.empty?
        raise "Invalid frame length" unless frame.length == payload.length

        puts "Frame handling test passed!"
        EOF
