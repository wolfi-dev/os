package:
  name: ruby3.3-fiber-annotation
  version: 0.2.0
  epoch: 1
  description: A mechanism for annotating fibers.
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ioquatix/fiber-annotation.git
      tag: v${{package.version}}
      expected-commit: 6e6ffb3d37dad74577e08e9800790f236b3302b2

  - runs: |
      sed -i '/signing_key/d' ${{vars.gem}}.gemspec

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: fiber-annotation

test:
  pipeline:
    - runs: ruby -e "require 'fiber/annotation'"
    - name: Simple test
      runs: |
        gem install rspec
        cat <<EOF > /tmp/test.rb
        require 'fiber/annotation'
        require 'rspec'
        require 'rspec/expectations'
        include RSpec::Matchers

        describe Fiber do
          context 'with .new' do
            it "should be able to annotate a fiber" do
              fiber = Fiber.new(annotation: "foo") do
                expect(Fiber.current.annotation).to be == "foo"
              end

              expect(fiber.annotation).to be == "foo"
              expect(Fiber.current.annotation).to be == nil
            end
          end

          context 'with .annotate' do
            it "should annotate the current fiber" do
              Fiber.annotate("foo")
              expect(Fiber.current.annotation).to be == "foo"
            end

            it "should annotate the current fiber with a block" do
              Fiber.annotate("foo") do
                expect(Fiber.current.annotation).to be == "foo"
              end
            end

            it "should annotate the current fiber with a block and restore the previous annotation" do
              Fiber.annotate("foo") do
                Fiber.annotate("bar") do
                  expect(Fiber.current.annotation).to be == "bar"
                end
                expect(Fiber.current.annotation).to be == "foo"
              end
            end

            it "should annotate the current fiber with a block and restore the previous annotation even if an exception is raised" do
              Fiber.annotate("foo") do
                expect do
                  Fiber.annotate("bar") do
                    raise "baz"
                  end
                end.to raise_exception(RuntimeError)
                expect(Fiber.current.annotation).to be == "foo"
              end
            end
          end
        end
        EOF
        ruby /tmp/test.rb

update:
  enabled: true
  github:
    identifier: ioquatix/fiber-annotation
    use-tag: true
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
