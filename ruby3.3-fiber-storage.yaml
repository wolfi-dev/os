package:
  name: ruby3.3-fiber-storage
  version: "1.0.1"
  epoch: 0
  description: Provides a compatibility shim for fiber storage.
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ioquatix/fiber-storage.git
      tag: v${{package.version}}
      expected-commit: 7071c47ded58b88bb1d202bac886d9d029aba23b

  - runs: sed -i '/signing_key/d' ${{vars.gem}}.gemspec

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: fiber-storage

test:
  pipeline:
    - runs: ruby -e "require 'fiber/storage'"
    - name: Simple test
      runs: |
        gem install rspec
        cat <<EOF > /tmp/test.rb
        require 'fiber/storage'
        require 'rspec'
        require 'rspec/expectations'
        include RSpec::Matchers

        describe Fiber do
          it "should be able to store data" do
            Fiber.new(storage: {foo: :bar}) do
              expect(Fiber[:foo]).to be == :bar
            end.resume
          end

          it "can inherit storage into child fibers" do
            Fiber.new(storage: {foo: :bar}) do
              Fiber.new do
                expect(Fiber[:foo]).to be == :bar
              end.resume
            end.resume
          end

          it "can override storage in child fibers" do
            Fiber.new(storage: {foo: :bar}) do
              Fiber.new(storage: {foo: :baz}) do
                expect(Fiber[:foo]).to be == :baz
              end.resume
            end.resume
          end

          it "can inherit storage by copy" do
            storage = {foo: :bar}

            Fiber.new(storage: storage) do
              Fiber.new(storage: true) do
                expect(Fiber[:foo]).to be == :bar
                Fiber[:foo] = :baz
              end.resume
              expect(Fiber[:foo]).to be == :bar
            end.resume
          end

          it "can assign to storage" do
            Fiber.new do
              Fiber.current.storage = {foo: :bar}
              expect(Fiber[:foo]).to be == :bar
            end.resume
          end

          it "can set fiber storage" do
            value = Fiber.new do
              Fiber[:key] = :value
              Fiber[:key]
            end.resume

            expect(value).to be == :value
          end

          it "can't use non-symbol keys" do
            expect do
              Fiber["key"] = :value
            end.to raise_exception(TypeError)
          end

          it "can use dynamic keys" do
            key = :"#{self.object_id}.key"
            value = Fiber.new do
              Fiber[key] = :value
              Fiber[key]
            end.resume

            expect(value).to be == :value
          end
        end
        EOF
        ruby /tmp/test.rb

update:
  enabled: true
  github:
    identifier: ioquatix/fiber-storage
    use-tag: true
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
