package:
  name: ruby3.3-net-protocol
  version: 0.2.2
  epoch: 2
  description: The abstract interface for net-* client.
  copyright:
    - license: Ruby
    - license: BSD-2-Clause
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-timeout

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 2d3c4b43a837a616e5853f807cde63aaffbcd280
      repository: https://github.com/ruby/net-protocol
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: net-protocol

update:
  enabled: true
  github:
    identifier: ruby/net-protocol
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
  pipeline:
    - uses: test/tw/gem-check
    - name: Verify library loading and classes
      runs: |
        ruby <<-EOF
        require 'net/protocol'

        # Verify basic classes and constants
        expected_classes = [
          Net::Protocol,
          Net::BufferedIO,
          Net::WriteTimeout,
          Net::ReadTimeout,
          Net::ProtocolError
        ]

        present_classes = expected_classes.select { |cls| Object.const_defined?(cls.to_s) }

        puts "Found #{present_classes.size}/#{expected_classes.size} expected classes:"
        present_classes.each { |cls| puts "- #{cls}" }

        # Verify we can instantiate a Protocol object
        proto = Net::Protocol.new
        puts "Successfully created Net::Protocol instance"

        # Check class constants and methods
        if Net::Protocol.const_defined?(:VERSION)
          puts "VERSION: #{Net::Protocol::VERSION}"
        end

        # Verify BufferedIO which is the main functional class in this gem
        if Net::BufferedIO.method_defined?(:read_timeout) &&
           Net::BufferedIO.method_defined?(:read_timeout=) &&
           Net::BufferedIO.method_defined?(:write_timeout) &&
           Net::BufferedIO.method_defined?(:write_timeout=)
          puts "BufferedIO timeout methods are properly defined"
        else
          puts "Expected timeout methods are missing from BufferedIO"
          methods = Net::BufferedIO.instance_methods(false).sort
          puts "Available methods: #{methods.join(', ')}"
          exit 1
        end

        puts "All net/protocol class verification completed successfully"
        EOF
