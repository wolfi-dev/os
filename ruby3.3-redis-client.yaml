# Generated from https://github.com/redis-rb/redis-client
package:
  name: ruby3.3-redis-client
  version: "0.25.0"
  epoch: 0
  description: Simple low-level client for Redis 6+
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-connection_pool

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 2621cc2e9fd890d97206dc2beb7131dbe2e35498
      repository: https://github.com/redis-rb/redis-client
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: redis-client

update:
  enabled: true
  github:
    identifier: redis-rb/redis-client
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby${{vars.rubyMM}}-connection_pool
  pipeline:
    - name: Basic require test
      runs: ruby -e "require 'redis-client'; puts 'Redis client loaded successfully!'"
    - name: Test configuration and url parsing
      runs: |
        ruby <<-EOF
        require 'redis-client'

        # Test basic configuration
        begin
          config = RedisClient.config(
            host: "localhost",
            port: 6379,
            connect_timeout: 0.5
          )
          puts "Basic configuration successful"

          # Verify config attributes
          raise "Invalid host" unless config.host == "localhost"
          raise "Invalid port" unless config.port == 6379
          raise "Invalid connect_timeout" unless config.connect_timeout == 0.5
          puts "Configuration attributes verified"
        rescue => e
          raise "Configuration test failed: #{e.message}"
        end

        # Test URL parsing
        begin
          url_config = RedisClient.config(url: "redis://127.0.0.1:6380/1")
          raise "Invalid host from URL" unless url_config.host == "127.0.0.1"
          raise "Invalid port from URL" unless url_config.port == 6380
          raise "Invalid db from URL" unless url_config.db == 1
          puts "URL parsing successful"
        rescue => e
          raise "URL parsing test failed: #{e.message}"
        end

        puts "Configuration tests passed!"
        EOF
    - name: Test connection pool integration
      runs: |
        ruby <<-EOF
        require 'redis-client'
        require 'connection_pool'

        begin
          # Create a connection pool
          pool = ConnectionPool.new(size: 2, timeout: 1) do
            RedisClient.new(
              host: "localhost",
              port: 6379,
              connect_timeout: 0.1,
              reconnect_attempts: 0
            )
          end

          puts "Connection pool creation successful"
        rescue => e
          # Only fail if it's not a connection error
          unless e.message.include?("connect")
            raise "Connection pool test failed: #{e.message}"
          end
          puts "Expected connection error caught, pool creation verified"
        end

        puts "Pool tests completed!"
        EOF
    - name: Test client interface
      runs: |
        ruby <<-EOF
        require 'redis-client'

        begin
          client = RedisClient.new(
            host: "localhost",
            port: 6379,
            connect_timeout: 0.1
          )

          # Verify basic interface methods
          raise "Missing call method" unless client.respond_to?(:call)
          raise "Missing call_once method" unless client.respond_to?(:call_once)
          raise "Missing connect method" unless client.respond_to?(:connect)

          puts "Client interface verification successful"
        rescue => e
          if e.message.include?("connect")
            puts "Expected connection error, interface verified"
          else
            raise "Client interface test failed: #{e.message}"
          end
        end

        puts "Interface tests passed!"
        EOF
