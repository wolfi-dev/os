package:
  name: ruby3.4-activerecord
  version: "8.0.2.1"
  epoch: 0
  description: Databases on Rails. Build a persistent domain model by mapping database tables to Ruby classes. Strong conventions for associations, validations, aggregations, migrations, and testing come baked-in.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-activemodel
      - ruby${{vars.rubyMM}}-activesupport
      - ruby${{vars.rubyMM}}-timeout
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/rails/rails
      tag: v${{package.version}}
      expected-commit: b0c813bc7b61c71dd21ee3a6c6210f6d14030f71

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}
      dir: activerecord

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}
      dir: activerecord

  - uses: ruby/clean

vars:
  gem: activerecord

test:
  pipeline:
    - name: Validate import
      runs: ruby -e "require 'active_record'"
    - name: Basic example
      runs: |
        gem install sqlite3

        cat > example.rb <<EOF
        # Test db CRUD operations

        require 'active_record'

        ActiveRecord::Base.establish_connection(
          :adapter => "sqlite3",
          :database => ":memory:"
        )

        ActiveRecord::Schema.define do
          create_table :tests do |table|
              table.column :name, :string
              table.column :foo, :string
          end
        end

        class Test < ActiveRecord::Base
        end

        # Test record creation / reading
        test_thing = Test.new(name: "Linky", foo: "bar")
        id = test_thing.save

        test_thing = Test.find(id)
        raise 'ActiveRecord#new failed' unless test_thing.name == "Linky"

        # Test record updating
        test_thing.foo = "baz"
        id = test_thing.save

        test_thing = Test.find(id)
        raise 'ActiveRecord#exec_update failed' unless test_thing.foo == "baz"

        # Test record deletion
        test_thing.destroy

        begin
          test_thing = Test.find(id)
        rescue ActiveRecord::RecordNotFound
          test_thing = nil
        end

        raise 'ActiveRecord#destroy failed' unless test_thing.nil?

        puts 'ActiveRecord tests passed.'
        EOF

        ruby example.rb

update:
  enabled: true
  github:
    identifier: rails/rails
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
