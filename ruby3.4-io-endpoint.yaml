package:
  name: ruby3.4-io-endpoint
  version: "0.15.1"
  epoch: 0
  description: A Ruby gem providing endpoint abstractions for network clients and servers.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby-${{vars.rubyMM}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 670f148d99959321f0e3a18ca90433199c1c99ed
      repository: https://github.com/socketry/io-endpoint
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: io-endpoint

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
        - ruby${{vars.rubyMM}}-async
        - ruby${{vars.rubyMM}}-async-io
        - ruby${{vars.rubyMM}}-io-stream
  pipeline:
    - runs: |
        ruby <<-EOF
        require 'io/endpoint'
        require 'async'
        require 'async/io'
        require 'test/unit'
        include Test::Unit::Assertions
        class TestIOEndpoint < Test::Unit::TestCase
          def test_tcp_endpoint
            host = "127.0.0.1"
            port = 9292
            # Define a simple TCP endpoint
            server_endpoint = Async::IO::Endpoint.tcp(host, port)
            # Start Async reactor
            Async do |task|
              # Server task: listens and responds to connections
              server_task = task.async do
                server_endpoint.accept do |socket|
                  socket.write("Hello from TCP server!")
                  socket.close
                end
              end
              # Delay to ensure server is ready
              task.sleep(0.5)
              # Client task: connects to the server and reads the response
              client_task = task.async do
                client_endpoint = Async::IO::Endpoint.tcp(host, port)
                client_endpoint.connect do |socket|
                  message = socket.read
                  assert_equal "Hello from TCP server!", message, "Expected server greeting message"
                  puts "Client received correct message"
                end
              end
              # Wait for client task to finish and stop server
              client_task.wait
              server_task.stop
            end
            puts "TCP endpoint test passed."
          end
        end
        EOF

update:
  enabled: true
  github:
    identifier: socketry/io-endpoint
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM
