package:
  name: ruby3.4-lru_redux
  version: 1.1.0
  epoch: 2
  description: An efficient, thread safe LRU cache.
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/SamSaffron/lru_redux.git
      tag: v${{package.version}}
      expected-commit: 47e0c92f494390955ee828e11a357cf682f1ce9f

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: lru_redux

update:
  enabled: true
  github:
    identifier: SamSaffron/lru_redux
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  pipeline:
    - name: Verify library import
      runs: ruby -e "require 'lru_redux'"
    - name: Basic functionality test (adapted from project README)
      runs: |
        ruby -e '
          require "lru_redux"

          # non thread safe
          cache = LruRedux::Cache.new(100)
          cache[:a] = "1"
          cache[:b] = "2"

          raise "Access failed" unless cache.to_a == [[:b, "2"], [:a, "1"]]

          # note the order matters here, last accessed is first
          cache[:a] # a pushed to front
          # "1"
          raise "Access failed" unless cache.to_a == [[:a, "1"], [:b, "2"]]

          cache.delete(:a)
          raise "Delete failed" unless cache.to_a == [[:b, "2"]]

          cache.max_size = 200 # cache now stores 200 items
          cache.clear # cache has no items

          cache.getset(:a) { 1 }
          raise "Getset failed" unless cache.to_a == [[:a, 1]]

          # already set so don"t call block
          cache.getset(:a) { 99 }
          raise "Getset unexpectedly updated" unless cache.to_a == [[:a, 1]]
        '
    - name: Basic threadsafe functionality test (adapted from project README)
      runs: |
        ruby -e '
          require "lru_redux"

          cache = LruRedux::ThreadSafeCache.new(100)
          cache[:a] = "1"
          cache[:b] = "2"

          raise "Access failed" unless cache.to_a == [[:b, "2"], [:a, "1"]]

          # note the order matters here, last accessed is first
          cache[:a] # a pushed to front
          # "1"
          raise "Access failed" unless cache.to_a == [[:a, "1"], [:b, "2"]]

          cache.delete(:a)
          raise "Delete failed" unless cache.to_a == [[:b, "2"]]

          cache.max_size = 200 # cache now stores 200 items
          cache.clear # cache has no items

          cache.getset(:a) { 1 }
          raise "Getset failed" unless cache.to_a == [[:a, 1]]

          # already set so don"t call block
          cache.getset(:a) { 99 }
          raise "Getset unexpectedly updated" unless cache.to_a == [[:a, 1]]
        '
