# Generated from http://github.com/jduff/numerizer
package:
  name: ruby3.4-numerizer
  version: 0.2.0
  epoch: 3
  description: Numerizer is a gem to help with parsing numbers in natural language from strings (ex forty two). It was extracted from the awesome Chronic gem http://github.com/evaryont/chronic.
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/jduff/numerizer
      tag: v${{package.version}}
      expected-commit: 83c0eedb5b49053b3e36434c3d640a8291587fd3

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: numerizer

update:
  enabled: true
  github:
    identifier: jduff/numerizer
    strip-prefix: v
    use-tag: true

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
  pipeline:
    - uses: test/tw/gem-check
    - name: Verify library loading
      runs: |
        ruby -e "require 'numerizer'; puts 'Successfully loaded numerizer gem'"
    - name: Test number parsing functionality
      runs: |
        ruby <<-EOF
        require 'numerizer'

        begin
          # Test basic number words
          tests = {
            'one' => '1',
            'two' => '2',
            'three' => '3',
            'four' => '4',
            'five' => '5',
            'six' => '6',
            'seven' => '7',
            'eight' => '8',
            'nine' => '9',
            'ten' => '10',
            'eleven' => '11',
            'twelve' => '12',
            'thirteen' => '13',
            'fourteen' => '14',
            'fifteen' => '15',
            'sixteen' => '16',
            'seventeen' => '17',
            'eighteen' => '18',
            'nineteen' => '19',
            'twenty' => '20'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Basic test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Basic number word tests passed!"

          # Test tens
          tests = {
            'twenty' => '20',
            'thirty' => '30',
            'forty' => '40',
            'fifty' => '50',
            'sixty' => '60',
            'seventy' => '70',
            'eighty' => '80',
            'ninety' => '90'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Tens test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Tens number tests passed!"

          # Test compound numbers
          tests = {
            'twenty-three' => '23',
            'thirty-seven' => '37',
            'forty-five' => '45',
            'fifty-nine' => '59',
            'seventy-six' => '76',
            'eighty-eight' => '88',
            'ninety-nine' => '99'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Compound test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Compound number tests passed!"

          # Test larger numbers
          tests = {
            'one hundred' => '100',
            'two hundred and five' => '205',
            'five hundred and sixty-seven' => '567',
            'one thousand' => '1000',
            'two thousand and one' => '2001',
            'five thousand three hundred and forty-two' => '5342',
            'one million' => '1000000',
            'two million five hundred thousand' => '2500000'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Large number test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Large number tests passed!"

          # Test fractions
          tests = {
            'a half' => '1/2',
            'one half' => '1/2',
            'a quarter' => '1/4',
            'one quarter' => '1/4',
            'three quarters' => '3/4',
            'two thirds' => '2/3',
            'five eighths' => '5/8'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Fraction test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Fraction tests passed!"

          # Test mixed numbers
          tests = {
            'one and a half' => '1.5',
            'two and a quarter' => '2.25',
            'three and three quarters' => '3.75'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Mixed number test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Mixed number tests passed!"

          # Test numbers in context
          tests = {
            'I have five apples' => 'I have 5 apples',
            'There are twenty-five people here' => 'There are 25 people here',
            'One hundred and twenty-five dolls in the shop' => '125 dolls in the shop'
          }

          tests.each do |input, expected|
            result = Numerizer.numerize(input)
            raise "Context test failed for '\#{input}': expected '\#{expected}', got '\#{result}'" unless result == expected
          end
          puts "Numbers in context tests passed!"

          # Test bias parameter
          begin
            ambiguous_input = 'quarter'
            fractional = Numerizer.numerize(ambiguous_input, bias: :fractional)
            ordinal = Numerizer.numerize(ambiguous_input, bias: :ordinal)

            raise "Bias test failed for fractional" unless fractional == '1/4'
            raise "Bias test failed for ordinal" unless ordinal == '4th'
            puts "Bias parameter tests passed!"
          rescue => e
            puts "Bias parameter tests skipped: #{e.message}"
          end

          # Test ignore parameter
          begin
            input = 'five horses and six sheep'
            ignored = Numerizer.numerize(input, ignore: ['five'])

            raise "Ignore test failed" unless ignored == 'five horses and 6 sheep'
            puts "Ignore parameter test passed!"
          rescue => e
            puts "Ignore parameter test skipped: #{e.message}"
          end

          puts "All numerizer tests passed successfully!"
        rescue => e
          puts "Test failed: \#{e.message}"
          exit 1
        end
        EOF
