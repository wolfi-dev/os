package:
  name: ruby3.4-openid_connect
  version: 2.3.0
  epoch: 2
  description: OpenID Connect Server & Client Library
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby${{vars.rubyMM}}-activemodel
      - ruby${{vars.rubyMM}}-attr_required
      - ruby${{vars.rubyMM}}-faraday
      - ruby${{vars.rubyMM}}-faraday-follow_redirects
      - ruby${{vars.rubyMM}}-json-jwt
      - ruby${{vars.rubyMM}}-rack-oauth2
      - ruby${{vars.rubyMM}}-swd
      - ruby${{vars.rubyMM}}-tzinfo
      - ruby${{vars.rubyMM}}-validate_email
      - ruby${{vars.rubyMM}}-validate_url
      - ruby${{vars.rubyMM}}-webfinger

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-${{vars.rubyMM}}
      - ruby-${{vars.rubyMM}}-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: e1eb8ea962af43752b1aed2c1063a3e24f96c5bc
      repository: https://github.com/nov/openid_connect
      tag: v${{package.version}}

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

vars:
  gem: openid_connect

update:
  enabled: true
  github:
    identifier: nov/openid_connect
    strip-prefix: v

var-transforms:
  - from: ${{package.name}}
    match: ^ruby(\d\.\d+)-.*
    replace: $1
    to: rubyMM

test:
  environment:
    contents:
      packages:
        - ruby-${{vars.rubyMM}}
        - ruby3.4-tzinfo-data
  pipeline:
    - name: Verify OpenID Connect library loading
      runs: |
        ruby -e "require 'openid_connect'; puts 'Successfully loaded OpenID Connect gem version ' + OpenIDConnect::VERSION"
    - name: Test OpenID Connect functionality
      runs: |
        ruby <<-EOF
        require 'openid_connect'

        begin
          puts "Testing OpenID Connect functionality..."

          # Test Client class - core functionality of OpenID Connect
          puts "Testing Client class..."
          client = OpenIDConnect::Client.new(
            identifier: 'client_id',
            secret: 'client_secret',
            redirect_uri: 'https://example.com/callback',
            authorization_endpoint: 'https://provider.example.com/auth',
            token_endpoint: 'https://provider.example.com/token',
            userinfo_endpoint: 'https://provider.example.com/userinfo'
          )

          # Verify client configuration
          unless client.identifier == 'client_id' &&
                 client.secret == 'client_secret' &&
                 client.redirect_uri == 'https://example.com/callback'
            raise "Client configuration failed"
          end
          puts "Client configured successfully"

          # Generate an authorization URL - this is a key function of the OpenID Connect client
          auth_url = client.authorization_uri(
            response_type: :code,
            scope: [:openid, :email, :profile],
            state: 'random_state',
            nonce: 'random_nonce'
          )

          # Verify URL contains expected parameters according to the OpenID Connect spec
          %w(client_id redirect_uri response_type scope state nonce).each do |param|
            unless auth_url.include?(param)
              raise "Authorization URL missing parameter: \#{param}"
            end
          end
          puts "Authorization URL generated successfully: \#{auth_url}"

          # Check available scopes - another important aspect of OpenID Connect
          puts "Available scopes: \#{OpenIDConnect::ResponseObject::IdToken::ACCESSIBLE_ATTRIBUTES.join(', ')}"

          # Verify discovery endpoint class - used for OpenID Connect Discovery
          unless defined?(OpenIDConnect::Discovery::Provider::Config)
            raise "Missing Discovery Provider Config class"
          end
          puts "Discovery Provider Config class available"

          puts "All OpenID Connect tests passed successfully!"
        rescue => e
          puts "Test failed: \#{e.message}"
          puts e.backtrace
          exit 1
        end
        EOF
