package:
  name: rust-1.73
  version: 1.73.0
  epoch: 1
  description: "Empowering everyone to build reliable and efficient software. (version 1.73.0)"
  copyright:
    - license: Apache-2.0 AND MIT
  resources:
    cpu: 16
    memory: 16Gi
  dependencies:
    provides:
      - rust=${{package.full-version}}
    runtime:
      - libLLVM-17

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - coreutils
      - curl-dev
      - file
      - libgit2-dev
      - libssh2-dev
      - llvm17
      - llvm17-dev
      - ninja
      - openssl-dev
      - patch
      - perl
      - python3
      - rust~1.72
      - wasi-libc
      - xz-dev
      - zlib-dev

pipeline:
  - uses: fetch
    working-directory: rustc-${{package.version}}
    with:
      uri: https://static.rust-lang.org/dist/rustc-${{package.version}}-src.tar.xz
      expected-sha256: 6eaf672dbea2e6596af8c999f5e6924b9af4bb8b02166bfe0b928e68aa75ae62

  - name: Configure rustc
    working-directory: rustc-${{package.version}}
    runs: |
      export OPENSSL_NO_VENDOR=1
      export RUST_BACKTRACE=1
      export ARCH=${{host.triplet.rust}}

      export PKG_CONFIG_LIBDIR="${{vars.PKG_CONFIG_LIBDIR}}"
      export LIBSSH2_SYS_USE_PKG_CONFIG=1
      export CFLAGS="${{vars.CFLAGS}}"
      export CPPFLAGS="${{vars.CPPFLAGS}}"
      export CXXFLAGS="${{vars.CXXFLAGS}}"

      ./configure \
        --host="${ARCH}" \
        --target="${ARCH}" \
        --prefix="/usr" \
        --local-rust-root="/usr" \
        --release-channel="stable" \
        --llvm-root="/usr/lib/llvm17" \
        --llvm-config="/usr/lib/llvm17/bin/llvm-config" \
        --enable-llvm-link-shared \
        --enable-local-rust \
        --disable-docs \
        --enable-extended \
        --tools="cargo,src" \
        --enable-option-checking \
        --enable-locked-deps \
        --enable-vendor \
        --python="python3" \
        --set="rust.codegen-units=1" \
        --set="rust.codegen-units-std=1" \
        --set="rust.parallel-compiler=false" \
        --set="rust.codegen-units-std=1" \
        --set="rust.parallel-compiler=false" \
        --set="rust.parallel-compiler=false" \
        --set="target.${ARCH}.crt-static=false"

  - name: Build rustc
    working-directory: rustc-${{package.version}}
    runs: |
      sed 's/#deny-warnings = .*/deny-warnings = false/' -i config.toml
      sed 's|deny(warnings,|deny(|' -i src/bootstrap/lib.rs
      mkdir -p "${{targets.destdir}}/usr"

      unset CARGO_PROFILE_RELEASE_LTO
      unset CARGO_PROFILE_RELEASE_OPT_LEVEL
      unset CARGO_PROFILE_RELEASE_PANIC
      unset CARGO_PROFILE_RELEASE_CODEGEN_UNITS

      export PKG_CONFIG_LIBDIR="${{vars.PKG_CONFIG_LIBDIR}}"
      export LIBSSH2_SYS_USE_PKG_CONFIG=1
      export CFLAGS="${{vars.CFLAGS}}"
      export CPPFLAGS="${{vars.CPPFLAGS}}"
      export CXXFLAGS="${{vars.CXXFLAGS}}"

      export OPENSSL_NO_VENDOR=1
      export RUST_BACKTRACE=1
      DESTDIR=${{targets.destdir}} python3 ./x.py install --jobs $(nproc)

  - uses: strip

  # delete uneeded files such as uninstallation scripts
  - runs: |
      rm ${{targets.destdir}}/usr/lib/rustlib/components
      rm ${{targets.destdir}}/usr/lib/rustlib/install.log
      rm ${{targets.destdir}}/usr/lib/rustlib/rust-installer-version
      rm ${{targets.destdir}}/usr/lib/rustlib/uninstall.sh
      rm ${{targets.destdir}}/usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  - if: ${{build.arch}} == 'x86_64'
    runs: |
      cd ${{targets.destdir}}
      mkdir -p ${{targets.destdir}}/usr/lib32
      ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so

  - runs: |
      cd ${{targets.destdir}}
      ln -srft usr/lib usr/lib/rustlib/${{build.arch}}-unknown-linux-gnu/lib/*.so

vars:
  openssl-version: 1.1.1w
  libssh2-version: 1.11.0
  sysroot: /home/build/sysroot
  PKG_CONFIG_LIBDIR: "/home/build/sysroot/lib/pkgconfig:/home/build/sysroot/share/pkgconfig:/usr/lib/pkgconfig"
  CFLAGS: "$CFLAGS -I/home/build/sysroot/include"
  CPPFLAGS: "$CPPFLAGS -I/home/build/sysroot/include"
  CXXFLAGS: "$CXXFLAGS -I/home/build/sysroot/include"

update:
  enabled: false
  exclude-reason: This version is only built to enable bootstrapping

test:
  pipeline:
    # AUTOGENERATED
    - runs: |
        cargo --version
        rust-gdbgui --help
        rustc --version
        cargo --help
        rustc --help
    - uses: test/tw/ldd-check
