package:
  name: rust-1.77
  version: 1.77.2
  epoch: 1
  description: "Empowering everyone to build reliable and efficient software."
  copyright:
    - license: Apache-2.0 AND MIT
  resources:
    cpu: 16
    memory: 16Gi
  dependencies:
    runtime:
      - libLLVM-17
    provides:
      - rust=${{package.full-version}}

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-17
      - coreutils
      - curl-dev
      - file
      - libLLVM-17
      - libgit2-dev
      - libssh2-dev
      - llvm17
      - llvm17-dev
      - openssl-dev
      - patch
      - python3
      - rust~1.76
      - wasi-libc
      - xz-dev
      - zlib-dev

pipeline:
  - uses: fetch
    with:
      uri: https://static.rust-lang.org/dist/rustc-${{package.version}}-src.tar.xz
      expected-sha256: 4d214c4189e4dd934d47e869fa5721b2c33dbbbdea21f2fc7fa6df3f38c1dea2
      extract: false

  - runs: |
      tar -xJf rustc-${{package.version}}-src.tar.xz
      rm rustc-${{package.version}}-src.tar.xz

  - runs: |
      export CFLAGS="$CFLAGS -O2 -I/usr/lib/llvm-17/include"
      export CXXFLAGS="$CXXFLAGS -O2 -I/usr/lib/llvm-17/include"
      export OPENSSL_NO_VENDOR=1
      export RUST_BACKTRACE=1
      export ARCH=${{host.triplet.rust}}
      cd rustc-${{package.version}}-src

      ./configure \
        --host="${ARCH}" \
        --target="${ARCH}" \
        --prefix="/usr" \
        --release-channel="stable" \
        --enable-local-rust \
        --local-rust-root="/usr" \
        --llvm-root="/usr/lib/llvm17" \
        --llvm-config="/usr/lib/llvm17/bin/llvm-config" \
        --disable-docs \
        --enable-extended \
        --tools="cargo,src" \
        --enable-llvm-link-shared \
        --enable-option-checking \
        --enable-locked-deps \
        --enable-profiler \
        --enable-vendor \
        --dist-compression-formats=gz \
        --python="python3" \
        --set="rust.musl-root=/usr" \
        --set="rust.codegen-units=1" \
        --set="rust.codegen-units-std=1" \
        --set="rust.parallel-compiler=false" \
        --set="target.${ARCH}.musl-root=/usr" \
        --set="target.${ARCH}.crt-static=false" \
        --set="target.${ARCH}.musl-root=/usr" \
        --set="target.${ARCH}.crt-static=false"

  - runs: |
      cd rustc-${{package.version}}-src
      sed 's/#deny-warnings = .*/deny-warnings = false/' -i config.toml
      sed 's|deny(warnings,|deny(|' -i src/bootstrap/src/lib.rs
      mkdir -p "${{targets.destdir}}/usr"
      unset CARGO_PROFILE_RELEASE_LTO
      unset CARGO_PROFILE_RELEASE_OPT_LEVEL
      unset CARGO_PROFILE_RELEASE_PANIC
      unset CARGO_PROFILE_RELEASE_CODEGEN_UNITS
      export CFLAGS="$CFLAGS -O2 -Iusr/include/llvm17"
      export CXXFLAGS="$CXXFLAGS -O2 -I/usr/include/llvm17"
      export OPENSSL_NO_VENDOR=1
      export RUST_BACKTRACE=1
      DESTDIR=${{targets.destdir}} python3 ./x.py install --jobs $(nproc)

  - uses: strip

  # delete uneeded files eg uninstalltion
  - runs: |
      rm ${{targets.destdir}}/usr/lib/rustlib/components
      rm ${{targets.destdir}}/usr/lib/rustlib/install.log
      rm ${{targets.destdir}}/usr/lib/rustlib/rust-installer-version
      rm ${{targets.destdir}}/usr/lib/rustlib/uninstall.sh
      rm ${{targets.destdir}}/usr/lib/rustlib/manifest-*

  # rustbuild always installs copies of the shared libraries to /usr/lib,
  # overwrite them with symlinks to the per-architecture versions
  - runs: |
      mkdir -p ${{targets.destdir}}/usr/lib32
      cd ${{targets.destdir}}
      ln -srft usr/lib   usr/lib/rustlib/x86_64-unknown-linux-gnu/lib/*.so
      ln -srft usr/lib32 usr/lib/rustlib/i686-unknown-linux-gnu/lib/*.so

update:
  enabled: true
  github:
    identifier: rust-lang/rust
    use-tag: true
    tag-filter: 1.77.
  exclude-reason: This version is only built to enable bootstrapping

test:
  environment:
    contents:
      packages:
        - gcc
        - glibc-dev
  pipeline:
    - name: Verify rustc installation
      runs: |
        rustc --version || exit 1
        cargo --help
        rust-gdbgui --help
        rustc --help
    - name: Verify cargo installation
      runs: |
        cargo --version || exit 1
    - name: Compile and run Hello World
      runs: |
        cat <<'EOF' > hello.rs
        fn main() {
          println!("Hello, World!");
        }
        EOF
        rustc hello.rs
        ./hello | grep -q "Hello, World!" || exit 1
    - name: Cargo project creation and run
      runs: |
        cargo new hello_cargo --bin
        cd hello_cargo
        cargo run | grep -q "Hello, world!" || exit 1
    - uses: test/tw/ldd-check
