package:
  name: rust-bindgen
  version: "0.72.0"
  epoch: 0
  description: Automatically generates Rust FFI bindings to C (and some C++) libraries
  copyright:
    - license: BSD-3-Clause

pipeline:
  - name: Checkout bindgen
    uses: git-checkout
    with:
      expected-commit: d0e7d6b5b763e93dd38f9ece05230979ede95a0a
      repository: https://github.com/rust-lang/rust-bindgen
      tag: v${{package.version}}

  - name: Bump bindgen deps
    runs: cargo update --package rustix --precise 0.37.25

  - name: Build bindgen
    uses: cargo/build
    with:
      output: bindgen

  - name: Strip bindgen
    uses: strip

update:
  enabled: true
  github:
    identifier: rust-lang/rust-bindgen
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - clang
        - build-base
        - rust
  pipeline:
    - name: Test bindgen basic commands
      runs: |
        # Create a dummy header just to satisfy the required argument
        touch dummy.h
        bindgen --help
        bindgen dummy.h --version
    - name: Test bindgen code generation
      runs: |
        # Create a test header with various C constructs
        cat <<-EOF > test.h
        #define MAX_ITEMS 100

        typedef struct Point {
            int x;
            int y;
        } Point;

        enum Color {
            RED,
            GREEN,
            BLUE
        };
        EOF

        # Generate Rust bindings with various options
        bindgen test.h \
          --no-layout-tests \
          --generate-block \
          --rust-target 1.40 \
          -o test.rs

        # Verify the output contains expected elements
        if ! grep -q "pub const MAX_ITEMS" test.rs; then
          echo "Constant not found in output"
          exit 1
        fi

        if ! grep -q "pub struct Point" test.rs; then
          echo "Struct not found in output"
          exit 1
        fi

        # Check for the actual enum pattern bindgen generates
        if ! grep -q "pub type Color = .*c_uint" test.rs; then
          echo "Color type definition not found"
          exit 1
        fi

        if ! grep -q "pub const Color_RED: Color = 0" test.rs; then
          echo "Color enum variants not found"
          exit 1
        fi

        echo "Bindgen code generation test passed!"
