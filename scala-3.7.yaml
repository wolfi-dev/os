package:
  name: scala-3.7
  version: "3.7.1"
  epoch: 1
  description: The Scala 3 compiler, also known as Dotty.
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - bash
    provides:
      - dotty=${{package.full-version}}
      - scala=${{package.full-version}}

vars:
  java-version: "8"
  runtime-java-version: "24"

environment:
  contents:
    packages:
      - busybox
      - openjdk-${{vars.java-version}}-default-jdk
      - sbt
  environment:
    RELEASEBUILD: "yes"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/scala/scala3
      tag: ${{package.version}}
      expected-commit: 92a8f3c53f18f27eb73ea305325aab87a6fa8cd2

  - name: Build Scala
    runs: ./project/scripts/sbt dist-linux-${{build.arch}}/Universal/stage

  - name: Install Scala
    runs: |
      # Create the directories with the correct permissions
      mkdir -p ${{targets.contextdir}}/usr/bin
      install -dm755 "${{targets.contextdir}}"/usr/share/scala/

      # Cleaning and removing windows batch files
      find dist/linux-${{build.arch}}/target/universal/stage -name '*.bat' -type f -delete

      mv dist/linux-${{build.arch}}/target/universal/stage/* ${{targets.contextdir}}/usr/share/scala/

      ln -sf /usr/share/scala/bin/scala ${{targets.contextdir}}/usr/bin/scala
      ln -sf /usr/share/scala/bin/scalac ${{targets.contextdir}}/usr/bin/scalac
      ln -sf /usr/share/scala/bin/scaladoc ${{targets.contextdir}}/usr/bin/scaladoc

test:
  environment:
    contents:
      packages:
        - openjdk-${{vars.runtime-java-version}}-default-jvm
  pipeline:
    - name: Verify that the binaries are installed and executable
      runs: |
        for bin in scala scalac scaladoc; do
          if [ ! -x "/usr/bin/$bin" ]; then
            echo "$bin is not installed or not executable"
            exit 1
          fi
          # Run the --version command for each binary
          $bin --version | grep ${{package.version}}
        done
    - name: "Test Scala compiler"
      runs: |
        # Create a simple HelloWorld.scala file
        echo 'object HelloWorld extends App { println("Hello, World!") }' > HelloWorld.scala

        # Compile the HelloWorld.scala file
        scalac HelloWorld.scala

        # Run the compiled HelloWorld program
        scala run -cp . -M HelloWorld

        # Clean up
        rm -f HelloWorld.scala HelloWorld*.class HelloWorld.tasty
    - name: "Test Scala compiler with multiple files"
      runs: |
        cat > Person.scala << 'EOF'
        case class Person(name: String) {
          override def toString = s"Person($name)"
        }
        EOF
        cat > Main.scala << 'EOF'
        object Main extends App {
          val person = Person("Test")
          println(person)
        }
        EOF
        scalac Person.scala Main.scala
        scala run -cp . -M Main | grep "Person(Test)"

        # clean up
        rm -f Person.scala Main.scala Person*.class Main*.class Person.tasty Main.tasty
    - name: "Test Scaladoc generation"
      runs: |
        cat > DocTest.scala << 'EOF'
        /** Documentation test class */
        class DocTest {
          /** Test method */
          def test(): Unit = ()
        }
        EOF
        scalac DocTest.scala
        mkdir -p doc
        scaladoc -d doc DocTest.tasty
        test -d doc && test -f doc/index.html

        # clean up
        rm -f DocTest.scala DocTest*.class DocTest.tasty

update:
  enabled: true
  github:
    identifier: scala/scala3
    tag-filter: 3.7.
