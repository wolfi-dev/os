package:
  name: scons
  version: "4.9.1"
  epoch: 1
  description: Software construction system
  copyright:
    - license: MIT
  dependencies:
    runtime:
      # needs setuptools for distuils use
      - py${{vars.py-version}}-setuptools

vars:
  py-version: 3.13

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - py${{vars.py-version}}-build-base
      - py${{vars.py-version}}-gpep517

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/SCons/scons
      expected-commit: dfd6b7e45985eb73462d2efa878651c92745099c
      tag: ${{package.version}}

  - uses: fetch
    with:
      uri: https://downloads.sourceforge.net/project/scons/scons/${{package.version}}/SCons-${{package.version}}.tar.gz
      expected-sha256: e2d78aa56e4646e5dbaf50c0758c6d1e4b0418464d8d6d07a09beb6cf257538f
      strip-components: 0
      extract: false

  - runs: |
      python3=python${{vars.py-version}}
      tar -xzf SCons-${{package.version}}.tar.gz

      $python3 -m gpep517 build-wheel --wheel-dir .dist --output-fd 3 3>&1 >&2
      install -vDm 644 ./scons-${{package.version}}/*.1 -t "${{targets.destdir}}/usr/share/man/man1/"

      $python3 -m installer -d "${{targets.destdir}}" .dist/*.whl
      # remove docbook dirs
      find "${{targets.destdir}}" -name 'docbook' -type d -exec rm -rf {} +

  - uses: strip

subpackages:
  - name: scons-doc
    pipeline:
      - uses: split/manpages
    description: scons manpages
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  github:
    identifier: SCons/scons

test:
  environment:
    contents:
      packages:
        - build-base
        - man-db
        - python3
        - scons-doc
  pipeline:
    - runs: |
        scons --version
        sconsign --h
        scons-configure-cache --h

        man scons | grep -q "software construction tool"
        man sconsign | grep -q "Displays the contents of one or more sconsign files"

        # Create a simple SConstruct file for testing
        printf 'env = Environment()\nenv.Program("hello", "hello.c")\n' > SConstruct
        printf '#include <stdio.h>\nint main() { printf("Hello, World!\\n"); return 0; }\n' > hello.c

        # Run SCons to build the program
        scons

        # Verify that the program was built
        ./hello
