package:
  name: serve
  version: "14.2.4"
  epoch: 0
  description: "Static file serving and directory listing"
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - nodejs
      - posix-libc-utils

environment:
  contents:
    packages:
      - build-base
      - nodejs
      - npm
      - wolfi-base

pipeline:
  - uses: npm/install
    with:
      package: serve
      prefix: ${{targets.contextdir}}/usr
      version: ${{package.version}}

  - if: ${{build.arch}} == 'aarch64'
    runs: |
      # Remove x86_64 clipboard binaries (xsel/xclip) from clipboardy package that cause
      # "so:ld-linux-x86-64.so.2" dependency errors on aarch64.
      find ${{targets.contextdir}}/usr/lib/node_modules/serve/node_modules -name "xsel" -delete || true
      find ${{targets.contextdir}}/usr/lib/node_modules/serve/node_modules -name "xclip" -delete || true

  - uses: strip

update:
  enabled: true
  github:
    identifier: vercel/serve
    use-tag: true

test:
  environment:
    contents:
      packages:
        - curl
        - wait-for-it
        - jq
  pipeline:
    - name: Check serve version and help
      runs: |
        serve --version | grep ${{package.version}}
        serve --help | grep "serve - Static file serving and directory listing"
    - name: Test serve with static content
      runs: |
        set -o pipefail
        SERVE_CFG_DIR=$(mktemp -d)
        mkdir -p "${SERVE_CFG_DIR}/build"
        echo '<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Serve Test Page</h1></body></html>' > "${SERVE_CFG_DIR}/build/index.html"
        echo '{"name": "test-app"}' > "${SERVE_CFG_DIR}/build/manifest.json"

        cd "${SERVE_CFG_DIR}"
        SERVE_PORT=3001
        serve -s build -p 3001 > /dev/null 2>&1 &
        SERVE_PID=$!
        trap 'kill -9 "${SERVE_PID}"' EXIT

        wait-for-it "127.0.0.1:${SERVE_PORT}" -t 30

        curl -fsSL "http://localhost:${SERVE_PORT}/" | grep -F -e "Serve Test Page"
        curl -fsSL "http://localhost:${SERVE_PORT}/manifest.json" | jq -e '.name == "test-app"'

        # Test SPA fallback (non-existent route should return index.html)
        curl -fsSL "http://localhost:${SERVE_PORT}/nonexistent-route" | grep -F -e "Serve Test Page"
    - name: Test serve without SPA mode
      runs: |
        set -euo pipefail

        SERVE_DIR=$(mktemp -d)
        mkdir -p "${SERVE_DIR}"
        echo '<h1>Basic Test</h1>' > "${SERVE_DIR}/test.html"

        cd "${SERVE_DIR}"
        SERVE_PORT=3002
        serve -p 3002 > /dev/null 2>&1 &
        SERVE_PID=$!
        trap 'kill -9 "${SERVE_PID}"' EXIT

        wait-for-it "127.0.0.1:${SERVE_PORT}" -t 30

        curl -fsSL "http://localhost:${SERVE_PORT}/test.html" | grep -F -e "Basic Test"
