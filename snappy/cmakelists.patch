diff --git a/CMakeLists.txt b/CMakeLists.txt
index cd71a47..4c1b623 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -91,6 +91,8 @@ endif(MSVC)
 # it prominent in the GUI.
 option(BUILD_SHARED_LIBS "Build shared libraries(DLLs)." OFF)
 
+option(BUILD_STATIC_LIBS "Build static libraries." ON)
+
 option(SNAPPY_BUILD_TESTS "Build Snappy's own tests." ON)
 
 option(SNAPPY_BUILD_BENCHMARKS "Build Snappy's benchmarks" ON)
@@ -103,6 +105,10 @@ option(SNAPPY_REQUIRE_AVX2 "Target processors with AVX2 support." OFF)
 
 option(SNAPPY_INSTALL "Install Snappy's header and library" ON)
 
+if(NOT BUILD_SHARED_LIBS AND BUILD_STATIC_LIBS)
+  set(BUILD_STATIC_LIBS OFF)
+endif ()
+
 include(TestBigEndian)
 test_big_endian(SNAPPY_IS_BIG_ENDIAN)
 
@@ -251,17 +257,28 @@ configure_file(
   "snappy-stubs-public.h.in"
   "${PROJECT_BINARY_DIR}/snappy-stubs-public.h")
 
+# When BUILD_SHARED_LIBS is:
+# ON it will generate a SHARED library
+# OFF it will generate a STATIC library
 add_library(snappy "")
-target_sources(snappy
-  PRIVATE
+
+# Used to generate both lib types
+if (BUILD_SHARED_LIBS AND BUILD_STATIC_LIBS)
+  add_library(snappy_static STATIC "")
+  set_target_properties(snappy_static PROPERTIES OUTPUT_NAME snappy)
+  install(TARGETS snappy_static DESTINATION ${CMAKE_INSTALL_LIBDIR})
+endif ()
+
+set(SNAPPY_SOURCE_PRIVATE
     "snappy-internal.h"
     "snappy-stubs-internal.h"
     "snappy-c.cc"
     "snappy-sinksource.cc"
     "snappy-stubs-internal.cc"
     "snappy.cc"
-    "${PROJECT_BINARY_DIR}/config.h"
-  PUBLIC
+    "${PROJECT_BINARY_DIR}/config.h")
+
+set(SNAPPY_SOURCE_PUBLIC
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-c.h>
     $<INSTALL_INTERFACE:include/snappy-c.h>
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-sinksource.h>
@@ -269,18 +286,32 @@ target_sources(snappy
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy.h>
     $<INSTALL_INTERFACE:include/snappy.h>
     $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/snappy-stubs-public.h>
-    $<INSTALL_INTERFACE:include/snappy-stubs-public.h>
-)
-target_include_directories(snappy
-  PUBLIC
+    $<INSTALL_INTERFACE:include/snappy-stubs-public.h>)
+
+set(SNAPPY_INCLUDE_DIRS
     $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
-    $<INSTALL_INTERFACE:include>
-)
+    $<INSTALL_INTERFACE:include>)
+
+# Only CMake 3.3+ supports PUBLIC sources in targets exported by "install".
+target_sources(snappy PRIVATE ${SNAPPY_SOURCE_PRIVATE}  
+  $<$<VERSION_GREATER:CMAKE_VERSION,3.2>:PUBLIC> ${SNAPPY_SOURCE_PUBLIC})
+
+target_include_directories(snappy PUBLIC ${SNAPPY_INCLUDE_DIRS})
+
+target_compile_definitions(snappy PRIVATE -DHAVE_CONFIG_H)
+
+# Only CMake 3.3+ supports PUBLIC sources in targets exported by "install".
+target_sources(snappy_static PRIVATE ${SNAPPY_SOURCE_PRIVATE}  
+  $<$<VERSION_GREATER:CMAKE_VERSION,3.2>:PUBLIC> ${SNAPPY_SOURCE_PUBLIC})
+
+target_include_directories(snappy_static PUBLIC ${SNAPPY_INCLUDE_DIRS})
+
+target_compile_definitions(snappy_static PRIVATE -DHAVE_CONFIG_H)
+
 set_target_properties(snappy
   PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})
 
-target_compile_definitions(snappy PRIVATE -DHAVE_CONFIG_H)
 if(BUILD_SHARED_LIBS)
   set_target_properties(snappy PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
 endif(BUILD_SHARED_LIBS)
