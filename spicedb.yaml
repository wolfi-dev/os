package:
  name: spicedb
  version: "1.45.2"
  epoch: 0
  description: Open Source, Google Zanzibar-inspired fine-grained permissions database
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/authzed/spicedb
      tag: v${{package.version}}
      expected-commit: 449c43d3c8dbb72defa98dfd097392c2fa137870

  - uses: go/build
    with:
      packages: ./cmd/spicedb
      output: spicedb
      ldflags: -X github.com/jzelinskie/cobrautil/v2.Version=v${{package.version}}

subpackages:
  - name: ${{package.name}}-compat
    description: Compatibility package for SpiceDB
    dependencies:
      runtime:
        - ${{package.name}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/local/bin
          ln -sf /usr/bin/spicedb ${{targets.subpkgdir}}/usr/local/bin/spicedb
    test:
      pipeline:
        - runs: |
            test "$(readlink /usr/local/bin/spicedb)" = "/usr/bin/spicedb"

update:
  enabled: true
  github:
    identifier: authzed/spicedb
    strip-prefix: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - curl
        - wait-for-it
        - postgresql
        - postgresql-client
        - grpcurl
        - shadow
        - sudo-rs
    environment:
      SPICEDB_GRPC_PRESHARED_KEY: "test-preshared-key-do-not-use-in-production"
      PGUSER: spicedb
      GRPC_PORT: "50051"
      HTTP_PORT: "8443"
      METRICS_PORT: "9090"
  pipeline:
    - name: Check spicedb version and help
      runs: |
        set -o pipefail
        spicedb version | grep -F "v${{package.version}}"
        spicedb --help | grep -F "database that stores"
        spicedb serve --help 2>&1 | grep -F "serve"
        spicedb migrate --help 2>&1 | grep -F "migrate"
    - name: Test in-memory datastore without TLS
      uses: test/daemon-check-output
      with:
        setup: |
          # Create a simple schema file for testing
          cat > schema.zed <<EOF
          definition user {}

          definition document {
            relation viewer: user
            relation editor: user
            relation owner: user

            permission view = viewer + editor + owner
            permission edit = editor + owner
            permission delete = owner
          }
          EOF
        start: |
          spicedb serve --grpc-preshared-key "$SPICEDB_GRPC_PRESHARED_KEY" \
            --datastore-engine memory
        timeout: 30
        expected_output: |
          grpc server started serving
          configured dispatcher
          using memory datastore engine
        post: |
          wait-for-it "localhost:${METRICS_PORT}" -t 30
          curl -fsSL "http://localhost:${METRICS_PORT}/metrics" | grep -F -q "go_gc_duration_seconds"

          wait-for-it "localhost:${GRPC_PORT}" -t 15
          grpcurl -plaintext "localhost:${GRPC_PORT}" list 2>&1 | grep -F -q "authzed.api.v1.PermissionsService"
    - name: Test with PostgreSQL datastore
      runs: |
        set -o pipefail

        # Create temporary directory for PostgreSQL data
        PGDATA_DIR=$(mktemp -d)

        useradd $PGUSER
        chown $PGUSER:$PGUSER "${PGDATA_DIR}"
        sudo -u $PGUSER initdb -D "${PGDATA_DIR}"
        sudo -u $PGUSER pg_ctl -D "${PGDATA_DIR}" -o "-c unix_socket_directories='/tmp'" -l /tmp/pg.log start

        # Ensure PostgreSQL cleanup on exit
        trap 'sudo -u $PGUSER pg_ctl -D "${PGDATA_DIR}" stop' EXIT

        createdb -h /tmp spicedb_test

        spicedb migrate head \
          --datastore-engine postgres \
          --datastore-conn-uri "postgres://$PGUSER@localhost/spicedb_test?host=/tmp&sslmode=disable"

        psql -h /tmp -U $PGUSER -d spicedb_test -c "\dt" | grep -F "relation_tuple"
    - name: Test with HTTP enabled
      uses: test/daemon-check-output
      with:
        start: |
          spicedb serve \
            --grpc-preshared-key "$SPICEDB_GRPC_PRESHARED_KEY" \
            --datastore-engine memory \
            --http-enabled \
            --http-addr ":${HTTP_PORT}"
        timeout: 30
        expected_output: |
          grpc server started serving
          http server started serving
        post: |
          wait-for-it "localhost:${HTTP_PORT}" -t 30
          curl -fsSL "http://localhost:${HTTP_PORT}/health"

          wait-for-it "localhost:${METRICS_PORT}" -t 30
          curl -fsSL "http://localhost:${METRICS_PORT}/metrics" | grep -F -q "go_gc_duration_seconds"
