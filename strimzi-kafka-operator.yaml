package:
  name: strimzi-kafka-operator
  version: 0.45.0
  epoch: 1
  description: Apache KafkaÂ® running on Kubernetes
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - strimzi-kafka-operator-cluster-operator
      - strimzi-kafka-operator-kafka-init
      - strimzi-kafka-operator-topic-operator
      - strimzi-kafka-operator-user-operator

environment:
  contents:
    packages:
      - bash
      - busybox
      - ca-certificates-bundle
      - coreutils
      - curl
      - docker
      - findutils
      - helm
      - make
      - maven
      - openjdk-17-default-jdk
      - perl-utils
      - tini
      - tini-compat
      - unzip
      - wget
      - yq
      - zip
  environment:
    KAFKA_HOME: /opt/kafka
    KAFKA_EXPORTER_HOME: /opt/kafka-exporter
    CRUISE_CONTROL_HOME: /opt/cruise-control
    SRC_DIR: ./docker-images/artifacts/binaries
    DEST_DIR: opt/strimzi

vars:
  shellcheck_version: 0.10.0
  shellcheck_aarch64_shasum512: 77abeaa8bee293264ebfd94a2021bd490695ed5518f2da7c0f9ec4b402cd1e5da6642a0e9f953961510cef7351cc9afae7c7a528a597d1befd1867b8c69e15b1
  shellcheck_x86_64_shasum512: 31006830087c2b9ffe9fa36c1ab4a8b11c85078cac8203265d0cfd630c70a4a506e66dd9d7ccde964360ad95045894149de457db34f10cad76708c7a4aa544ca

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/strimzi/strimzi-kafka-operator
      tag: ${{package.version}}
      expected-commit: b5060222ffc07b67b7efe003bd326e48b2896fc8

  - uses: patch
    with:
      patches: 0001-patch-thirdpaty-deps.patch

  - uses: maven/pombump
    with:
      patch-file: ""
      properties-file: pombump-deps.yaml
      pom: docker-images/artifacts/kafka-thirdparty-libs/cc/pom.xml

  - uses: maven/pombump
    with:
      properties-file: pombump-properties.yaml

  - runs: |
      export JAVA_HOME="/usr/lib/jvm/java-17-openjdk"
      # Download the shellcheck tarball
      wget -qO- "https://github.com/koalaman/shellcheck/releases/download/v${{vars.shellcheck_version}}/shellcheck-v${{vars.shellcheck_version}}.linux.${{build.arch}}.tar.xz" -O shellcheck.tar.xz

      # Perform shasum check based on architecture
      if [[ "${{build.arch}}" == "aarch64" ]]; then
          echo "${{vars.shellcheck_aarch64_shasum512}}  shellcheck.tar.xz" | shasum -a 512 -c
      elif [[ "${{build.arch}}" == "x86_64" ]]; then
          echo "${{vars.shellcheck_x86_64_shasum512}}  shellcheck.tar.xz" | shasum -a 512 -c
      else
          echo "Unsupported architecture: ${{build.arch}}"
          exit 1
      fi

      # Extract the tarball
      tar -xJf shellcheck.tar.xz

      # Copy shellcheck binary to /usr/bin/
      cp "shellcheck-v${{vars.shellcheck_version}}/shellcheck" /usr/bin/

      for i in mockkube config-model certificate-manager operator-common; do
        make -C $i MVN_ARGS="-B -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress" java_build
        make -C $i MVN_ARGS="-DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -e -V -B" java_install
      done

      mvn clean
      mvn install -B -DskipTests -Dmaven.javadoc.skip=true
      make MVN_ARGS="-B -DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress" java_build
      make MVN_ARGS="-DskipTests -Dmaven.javadoc.skip=true --no-transfer-progress -e -V -B" java_install

      # Set the source and destination directories
      mkdir -p "${{targets.contextdir}}"/$DEST_DIR/bin
      mkdir -p "${{targets.contextdir}}"/$DEST_DIR/lib
      install -Dm755 ./docker-images/operator/scripts/launch_java.sh ${{targets.contextdir}}/$DEST_DIR/bin/launch_java.sh

data:
  - name: binaries
    items:
      cluster-operator: cluster-operator
      kafka-init: kafka-init
      kafka-agent: kafka-agent
      mirror-maker-agent: mirror-maker-agent
      topic-operator: topic-operator
      tracing-agent: tracing-agent
      user-operator: user-operator

subpackages:
  - range: binaries
    name: ${{package.name}}-${{range.key}}
    description: ${{range.value}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.contextdir}}"/$DEST_DIR/bin
          mkdir -p "${{targets.contextdir}}"/$DEST_DIR/lib
          mkdir -p "${{targets.contextdir}}"/usr/lib/kafka/libs/
          unzip -o "$SRC_DIR/${{range.key}}-*-dist.zip" -d tmp
          cp -r tmp/lib/* "${{targets.contextdir}}"/$DEST_DIR/lib/
          cp -r tmp/bin/* "${{targets.contextdir}}"/$DEST_DIR/bin/
          ln -sf /$DEST_DIR/lib/io.strimzi.${{range.key}}-$(cat release.version).jar ${{targets.contextdir}}/usr/lib/kafka/libs/
          # They omit `io.strimzi` on upstream Makefile
          ln -sf /$DEST_DIR/lib/io.strimzi.${{range.key}}-$(cat release.version).jar ${{targets.contextdir}}/usr/lib/kafka/libs/${{range.key}}-$(cat release.version).jar

  - name: "${{package.name}}-kafka-thirdparty-libs"
    description: "Required libraries for the Strimzi/Kafka"
    dependencies:
      replaces:
        - kafka
    pipeline:
      - working-directory: docker-images/artifacts/kafka-thirdparty-libs/3.8.x/target/dependency
        pipeline:
          - runs: |
              mkdir -p "${{targets.contextdir}}"/usr/lib/kafka/libs/
              cp -r ./* "${{targets.contextdir}}"/usr/lib/kafka/libs/

  - name: "${{package.name}}-kafka-thirdparty-libs-cc"
    description: "Required 3rd party libraries for the Cruise Control"
    pipeline:
      - working-directory: docker-images/artifacts/kafka-thirdparty-libs/cc/target/dependency
        pipeline:
          - runs: |
              mkdir -p "${{targets.contextdir}}"/$CRUISE_CONTROL_HOME/libs
              cp -r ./* "${{targets.contextdir}}"/$CRUISE_CONTROL_HOME/libs/

  - name: "${{package.name}}-kafka-base"
    description: "Required files for the Strimzi/Kafka container image"
    dependencies:
      runtime:
        - bash
        - coreutils
        - curl
        - gawk
        - gettext
        - grep
        - kafka
        - kafka_exporter
        - kafka_exporter-strimzi-compat
        - kafka-strimzi-compat
        - net-tools
        - nmap
        - openjdk-17-default-jvm
        - openssl
        - sed
        - strimzi-kafka-operator-kafka-agent
        - strimzi-kafka-operator-mirror-maker-agent
        - strimzi-kafka-operator-topic-operator
        - strimzi-kafka-operator-kafka-thirdparty-libs
        - strimzi-kafka-operator-kafka-thirdparty-libs-cc
        - tini
        - tini-compat
      provides:
        - strimzi-kafka=${{package.full-version}}
    pipeline:
      - working-directory: docker-images/kafka-based/kafka
        pipeline:
          - runs: |
              mkdir -p "${{targets.contextdir}}"/$KAFKA_HOME
              mkdir -p "${{targets.contextdir}}"/$KAFKA_EXPORTER_HOME
              mkdir -p "${{targets.contextdir}}"/$CRUISE_CONTROL_HOME
              cp -avR ./scripts/* "${{targets.contextdir}}/$KAFKA_HOME/"
              cp -avR ./exporter-scripts/* "${{targets.contextdir}}/$KAFKA_EXPORTER_HOME/"
              cp -avR ./cruise-control-scripts/* "${{targets.contextdir}}/$CRUISE_CONTROL_HOME/"

  - name: kafka-strimzi-compat
    description: "compat package with strimzi/kafka image"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/opt/kafka
          for dir in bin config libs logs; do
            ln -s /usr/lib/kafka/$dir ${{targets.contextdir}}/opt/kafka/$dir
          done

  - name: kafka_exporter-strimzi-compat
    description: "Compatibility package to place binaries in the location expected by upstream Dockerfile"
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/opt/kafka-exporter
          # https://github.com/strimzi/strimzi-kafka-operator/blob/23c0fb0726e1f212c6182eb251ff23697e72a353/docker-images/kafka-based/kafka/Dockerfile#L33
          ln -sf /usr/bin/kafka_exporter ${{targets.contextdir}}/opt/kafka-exporter/kafka_exporter

update:
  enabled: true
  github:
    identifier: strimzi/strimzi-kafka-operator

test:
  pipeline:
    - name: check folders are not empty
      runs: |
        # Check if /opt/strimzi/lib is not empty
        if [ -d "/opt/strimzi/lib" ] && [ "$(ls -A /opt/strimzi/lib)" ]; then
          echo "/opt/strimzi/lib is not empty."
        else
          echo "Error: /opt/strimzi/lib is empty or does not exist."
          exit 1
        fi

        # Check if /opt/strimzi/bin is not empty
        if [ -d "/opt/strimzi/bin" ] && [ "$(ls -A /opt/strimzi/bin)" ]; then
          echo "/opt/strimzi/bin is not empty."
        else
          echo "Error: /opt/strimzi/bin is empty or does not exist."
          exit 1
        fi

        echo "Both directories are not empty."
    - name: check files are there
      runs: |
        # Directory to check
        dir="/opt/strimzi/bin"

        # Check if each file exists in the directory
        for file in cluster_operator_run.sh kafka_init_run.sh launch_java.sh tls_prepare_certificates.sh topic_operator_run.sh user_operator_run.sh; do
          if [ -f "$dir/$file" ]; then
            echo "$file exists in $dir."
          else
            echo "Error: $file does not exist in $dir."
            exit 1
          fi
        done

        echo "All required files exist in $dir."
