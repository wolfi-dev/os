diff --git a/lib/proxy/peer/quic/client.go b/lib/proxy/peer/quic/client.go
index b230f111c2..8e0e5d074a 100644
--- a/lib/proxy/peer/quic/client.go
+++ b/lib/proxy/peer/quic/client.go
@@ -278,7 +278,7 @@ func (c *ClientConn) Dial(nodeID string, src net.Addr, dst net.Addr, tunnelType
 		return nil, trace.Wrap(err)
 	}
 
-	var conn quic.Connection = earlyConn
+	conn := earlyConn
 	defer func() {
 		if err == nil {
 			return
@@ -466,7 +466,7 @@ func (c *ClientConn) Ping(ctx context.Context) error {
 // response buffer. Request and response are length-prefixed by a 32 bit little
 // endian integer, but the buffer size is also limited by [quicMaxMessageSize].
 // The given request buffer should already be length-prefixed.
-func sendUnary(deadline time.Time, sizedReqBuf []byte, conn quic.Connection) (_ []byte, _ quic.Stream, err error) {
+func sendUnary(deadline time.Time, sizedReqBuf []byte, conn *quic.Conn) (_ []byte, _ *quic.Stream, err error) {
 	stream, err := conn.OpenStream()
 	if err != nil {
 		return nil, nil, trace.Wrap(err)
@@ -501,8 +501,8 @@ func sendUnary(deadline time.Time, sizedReqBuf []byte, conn quic.Connection) (_
 // streamConn is a [net.Conn] using a single [quic.Stream] in a dedicated
 // [quic.Connection].
 type streamConn struct {
-	st   quic.Stream
-	conn quic.Connection
+	st   *quic.Stream
+	conn *quic.Conn
 
 	src net.Addr
 	dst net.Addr
diff --git a/lib/proxy/peer/quic/server.go b/lib/proxy/peer/quic/server.go
index 2931837907..2fe87f7551 100644
--- a/lib/proxy/peer/quic/server.go
+++ b/lib/proxy/peer/quic/server.go
@@ -209,7 +209,7 @@ func (s *Server) Serve(transport *quic.Transport) error {
 	}
 }
 
-func (s *Server) handleConn(conn quic.EarlyConnection) {
+func (s *Server) handleConn(conn *quic.Conn) {
 	log := s.log.With(
 		"remote_addr", conn.RemoteAddr().String(),
 		"internal_id", uuid.NewString(),
@@ -250,7 +250,7 @@ func (s *Server) handleConn(conn quic.EarlyConnection) {
 	}
 }
 
-func (s *Server) handleStream(stream quic.Stream, conn quic.EarlyConnection, log *slog.Logger) {
+func (s *Server) handleStream(stream *quic.Stream, conn *quic.Conn, log *slog.Logger) {
 	log = log.With("stream_id", stream.StreamID())
 	log.DebugContext(conn.Context(), "handling stream")
 	defer log.DebugContext(conn.Context(), "done handling stream")
-- 
2.51.0

