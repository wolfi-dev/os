package:
  name: teleport
  version: "17.3.4"
  epoch: 0
  description: The easiest, and most secure way to access and protect all of your infrastructure.
  copyright:
    - license: AGPL-3.0-only
  dependencies:
    runtime:
      - posix-libc-utils # getent

environment:
  contents:
    packages:
      - autoconf
      - automake
      - binaryen
      - build-base
      - busybox
      - ca-certificates-bundle
      - cargo-auditable
      - corepack
      - go
      - node-gyp
      - nodejs
      - openssl-dev
      - pnpm
      - python3
      - rust
      - rustup
      - wasm-pack
      - yarn
      - zstd-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/gravitational/teleport
      expected-commit: 29c19ac9db6987f7c5d021a77c7b57a05e72c911
      tag: v${{package.version}}

  - uses: go/bump
    with:
      deps: |-
        github.com/golang-jwt/jwt/v4@v4.5.1

  # Fixes build failure introduced with 17.0.5 version:
  # "([wasm-validator error in function fastpathprocessor_process\20externref\20shim]
  # unexpected false: table.fill requires bulk-memory [--enable-bulk-memory])"
  # Should be able to remove this patch once the following issue is resolved:
  # https://github.com/gravitational/teleport/issues/50194
  - uses: patch
    with:
      patches: bulk-memory.patch

  - runs: |
      mkdir -p "${{targets.contextdir}}"/var/lib/teleport
      mkdir -p "${{targets.contextdir}}"/usr/local/bin

      rustup install stable
      rustup default stable
      ARCH=$(uname -m)
      export PATH="$HOME/.rustup/toolchains/stable-${ARCH}-unknown-linux-gnu/bin:$PATH"
      rustup target add wasm32-unknown-unknown

      corepack enable
      pnpm config set package-import-method copy

      # Install dependencies and build web assets
      make ensure-js-deps
      make ensure-webassets

  - uses: go/build
    with:
      packages: ./tool/teleport
      prefix: usr/local
      output: ./
      tags: webassets_embed,kustomize_disable_go_plugin_support

  - uses: go/build
    with:
      packages: ./tool/tctl ./tool/tsh ./tool/tbot ./tool/teleport-update
      prefix: usr/local
      output: ./
      tags: kustomize_disable_go_plugin_support

  - runs: |
      cd tool/fdpass-teleport && cargo auditable build --release --locked
      install -Dm755 target/release/fdpass-teleport "${{targets.contextdir}}"/usr/local/bin/

  - uses: strip

update:
  enabled: true
  github:
    identifier: gravitational/teleport
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - wait-for-it
        - curl
  pipeline:
    - name: Check binary versions
      runs: |
        tbot version
        tbot --help
        tctl version
        tctl --help
        teleport version
        teleport --help
        tsh version
        tsh --help
    - name: Test auth service and tctl
      runs: |
        #!/bin/bash
        set -e

        # Create required directories
        mkdir -p /tmp/teleport
        mkdir -p /var/lib/teleport

        # Create minimal config file for auth server
        cat <<-EOF > /tmp/teleport-auth.yaml
        version: v3
        teleport:
          data_dir: /tmp/teleport
          log:
            output: stderr
            severity: DEBUG
        auth_service:
          enabled: "yes"
          cluster_name: "test-cluster"
          listen_addr: 127.0.0.1:3025
          tokens:
            - "proxy,node:test123"
        proxy_service:
          enabled: "no"
        ssh_service:
          enabled: "no"
        EOF

        # Initialize auth server with static UUID for tctl
        echo "00000000-0000-0000-0000-000000000000" > /var/lib/teleport/host_uuid
        chmod 644 /var/lib/teleport/host_uuid

        # Start auth server
        teleport start --config=/tmp/teleport-auth.yaml --roles=auth &
        AUTH_PID=$!

        # Wait for auth server
        wait-for-it 127.0.0.1:3025 -t 30 || (kill $AUTH_PID; exit 1)

        # Give auth server time to initialize
        sleep 5

        # Test tctl
        TCTL_CONFIG=$(base64 /tmp/teleport-auth.yaml)
        TELEPORT_CONFIG="$TCTL_CONFIG" tctl get roles --format=text

        echo "Auth service test successful!"
        kill $AUTH_PID
    - name: Test proxy service
      runs: |
        #!/bin/bash
        set -e

        # Create required directories
        mkdir -p /tmp/teleport-auth /tmp/teleport-proxy

        # Create auth server config
        cat <<-EOF > /tmp/teleport-auth.yaml
        version: v3
        teleport:
          data_dir: /tmp/teleport-auth
          log:
            output: stderr
            severity: DEBUG
        auth_service:
          enabled: "yes"
          cluster_name: "test-cluster"
          listen_addr: 127.0.0.1:3025
          tokens:
            - "proxy,node:test123"
        proxy_service:
          enabled: "no"
        ssh_service:
          enabled: "no"
        EOF

        # Create proxy config
        cat <<-EOF > /tmp/teleport-proxy.yaml
        version: v3
        teleport:
          data_dir: /tmp/teleport-proxy
          auth_token: "test123"
          auth_server: "127.0.0.1:3025"
        proxy_service:
          enabled: "yes"
          web_listen_addr: "127.0.0.1:3080"
          listen_addr: "127.0.0.1:3023"
        auth_service:
          enabled: "no"
        ssh_service:
          enabled: "no"
        EOF

        # Start auth server
        teleport start --config=/tmp/teleport-auth.yaml --roles=auth &
        AUTH_PID=$!

        # Wait for auth server
        wait-for-it 127.0.0.1:3025 -t 30 || (kill $AUTH_PID; exit 1)

        # Start proxy
        teleport start --config=/tmp/teleport-proxy.yaml --roles=proxy &
        PROXY_PID=$!

        # Wait for proxy
        wait-for-it 127.0.0.1:3080 -t 30 || (kill $AUTH_PID $PROXY_PID; exit 1)

        # Test proxy web interface with HTTPS
        HTTP_CODE=$(curl -k -s -o /dev/null -w "%{http_code}" https://127.0.0.1:3080/webapi/ping)
        if [ "$HTTP_CODE" != "200" ]; then
          echo "Proxy web interface test failed with HTTP code: $HTTP_CODE"
          kill $AUTH_PID $PROXY_PID
          exit 1
        fi

        echo "Proxy test successful!"
        kill $AUTH_PID $PROXY_PID
