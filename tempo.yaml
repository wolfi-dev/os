package:
  name: tempo
  version: "2.7.1"
  epoch: 0
  description: Grafana Tempo is a high volume, minimal dependency distributed tracing backend.
  copyright:
    - license: AGPL-3.0-or-later

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - go

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 35cf980665e12eb736f1fd3acacfca9b0ad33873
      repository: https://github.com/grafana/tempo
      tag: v${{package.version}}

  - runs: |
      go mod vendor
      make ${{package.name}}
      install -Dm755 bin/linux/${{package.name}}-$(go env GOARCH) ${{targets.destdir}}/usr/bin/${{package.name}}

  - uses: strip

data:
  - name: components
    items:
      query: query
      vulture: vulture
      cli: cli

subpackages:
  - range: components
    name: "${{package.name}}-${{range.key}}"
    pipeline:
      - runs: |
          make ${{package.name}}-${{range.key}}
          install -Dm755 bin/linux/${{package.name}}-${{range.key}}-$(go env GOARCH) ${{targets.subpkgdir}}/usr/bin/${{package.name}}-${{range.key}}
      - uses: strip

update:
  enabled: true
  github:
    identifier: grafana/tempo
    strip-prefix: v
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - curl
  pipeline:
    - name: Smoke test for Tempo binary
      runs: |
        tempo --version
        tempo --help
    - name: Test Tempo server start
      runs: |
        # Create a simple tempo.yaml config file
        cat <<EOF > tempo.yaml
        auth_enabled: false
        server:
          http_listen_port: 3200
        distributor:
          receivers:
            jaeger:
              protocols:
                thrift_compact:
        ingester:
          trace_idle_period: 10s
          max_block_bytes: 1048576
        storage:
          trace:
            backend: local
            local:
              path: /tmp/tempo/traces
        EOF

        tempo start -config.file=tempo.yaml &

        attempts=0
        until curl -f http://localhost:3200/ready || [ $attempts -eq 5 ]; do
          sleep 10
          attempts=$((attempts+1))
        done
        if [ $attempts -eq 5 ]; then exit 1; fi
