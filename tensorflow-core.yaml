package:
  name: tensorflow-core
  description: Framework for data-graph oriented computing (core libraries, oneDNN build)
  version: "2.19.0"
  epoch: 4
  copyright:
    - license: Apache-2.0
  resources:
    cpu: 65
    memory: 64Gi

vars:
  # Axion has BTI which causes SIGILL errors; use PAC for now
  bazel-common-opts-aarch64: --bazelrc=.tf_configure.bazelrc build --config=mkl_threadpool --config=opt --config=opt --copt="-mbranch-protection=pac-ret+leaf+b-key"
  bazel-common-opts-x86: --bazelrc=.tf_configure.bazelrc build --config=mkl_threadpool --config=opt --config=opt
  import: tensorflow
  pypi-package: tensorflow-core

data:
  - name: py-versions
    items:
      # this upstream release did not provide lockfiles for > 3.12
      3.10: "310"
      3.11: "311"
      3.12: "312"

environment:
  contents:
    packages:
      - bash
      - bazelisk
      - bazelisk-default
      - build-base
      - c-ares-dev
      - clang-16
      - coreutils
      - curl-dev
      - gcc-12-default
      - giflib-dev
      - hdf5
      - hdf5-dev
      - icu-dev
      - isl-dev
      - libjpeg-turbo-dev
      - libpng-dev
      - libstdc++-12
      - libstdc++-12-dev
      - lld-16-dev
      - llvm-16-dev
      - mpc-dev
      - openjdk-11-default-jdk
      - openssl-dev
      - patchelf
      - perl
      - py3-astunparse
      - py3-pip
      - py3-supported-gpep517
      - py3-supported-installer
      - py3-supported-keras-applications
      - py3-supported-keras-preprocessing
      - py3-supported-packaging
      - py3-supported-pip
      - py3-supported-pybind11
      - py3-supported-requests
      - py3-supported-setuptools
      - py3-wheel
      - python-3-dev
      - wolfi-base
      - zlib-dev
  environment:
    USE_DEFAULT_PYTHON_LIB_PATH: 1
    TF_NEED_JEMALLOC: 1
    TF_NEED_KAFKA: 1
    TF_NEED_OPENCL_SYCL: 0
    TF_NEED_AWS: 1
    TF_NEED_GCP: 1
    TF_NEED_HDFS: 1
    TF_NEED_S3: 1
    TF_ENABLE_XLA: 1
    TF_NEED_GDR: 0
    TF_NEED_VERBS: 0
    TF_NEED_OPENCL: 0
    TF_NEED_MPI: 0
    TF_NEED_TENSORRT: 0
    TF_NEED_NGRAPH: 0
    TF_NEED_IGNITE: 0
    TF_NEED_ROCM: 0
    TF_SYSTEM_LIBS: "boringssl,curl,gif,icu,libjpeg_turbo,nasm,png,zlib"
    TF_SET_ANDROID_WORKSPACE: 0
    TF_DOWNLOAD_CLANG: 0
    TF_NEED_CUDA: 0
    TF_CUDA_CLANG: 0
    CLANG_COMPILER_PATH: /usr/bin/clang
    CC_OPT_FLAGS: "-O3"

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/tensorflow/tensorflow
      expected-commit: e36baa302922ea3c7131b302c2996bd2051ee5c4
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: h5py-3.13.patch

  - environment:
      # It otherwise defaults to the latest while the upstream does not provide lockfiles for > 3.12.
      HERMETIC_PYTHON_VERSION: "3.12"
    runs: |
      ./configure

      if [ "${{build.arch}}" = "aarch64" ]; then
        bazel ${{vars.bazel-common-opts-aarch64}} //tensorflow:libtensorflow.so //tensorflow:libtensorflow_cc.so //tensorflow:install_headers //tensorflow:libtensorflow_framework.so
      else
        bazel ${{vars.bazel-common-opts-x86}} //tensorflow:libtensorflow.so //tensorflow:libtensorflow_cc.so //tensorflow:install_headers //tensorflow:libtensorflow_framework.so
      fi

  - runs: |
      install -d "${{targets.destdir}}"/usr/include/tensorflow
      cp -r bazel-bin/tensorflow/include/* "${{targets.destdir}}"/usr/include/tensorflow/

      _pkgver=${{package.version}}

      tensorflow/c/generate-pc.sh --prefix=/usr --version=${_pkgver}
      sed -e 's@/include$@/include/tensorflow@' -i tensorflow.pc -i tensorflow_cc.pc
      install -Dm644 tensorflow.pc "${{targets.destdir}}"/usr/lib/pkgconfig/tensorflow.pc
      install -Dm644 tensorflow_cc.pc "${{targets.destdir}}"/usr/lib/pkgconfig/tensorflow_cc.pc

      install -Dm755 bazel-bin/tensorflow/libtensorflow.so "${{targets.destdir}}"/usr/lib/libtensorflow.so.${_pkgver}
      ln -s libtensorflow.so.${_pkgver} "${{targets.destdir}}"/usr/lib/libtensorflow.so.${_pkgver:0:1}
      ln -s libtensorflow.so.${_pkgver:0:1} "${{targets.destdir}}"/usr/lib/libtensorflow.so

      install -Dm755 bazel-bin/tensorflow/libtensorflow_cc.so "${{targets.destdir}}"/usr/lib/libtensorflow_cc.so.${_pkgver}
      ln -s libtensorflow_cc.so.${_pkgver} "${{targets.destdir}}"/usr/lib/libtensorflow_cc.so.${_pkgver:0:1}
      ln -s libtensorflow_cc.so.${_pkgver:0:1} "${{targets.destdir}}"/usr/lib/libtensorflow_cc.so

      install -Dm755 bazel-bin/tensorflow/libtensorflow_framework.so "${{targets.destdir}}"/usr/lib/libtensorflow_framework.so.${_pkgver}
      ln -s libtensorflow_framework.so.${_pkgver} "${{targets.destdir}}"/usr/lib/libtensorflow_framework.so.${_pkgver:0:1}
      ln -s libtensorflow_framework.so.${_pkgver:0:1} "${{targets.destdir}}"/usr/lib/libtensorflow_framework.so

      install -Dm644 tensorflow/c/c_api.h "${{targets.destdir}}"/usr/include/tensorflow/tensorflow/c/c_api.h
      install -Dm644 LICENSE "${{targets.destdir}}"/usr/share/licenses/${pkgname}/LICENSE

  - uses: strip

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: Tensorflow Python API
    dependencies:
      runtime:
        - py${{range.key}}-absl-py
        - py${{range.key}}-astunparse
        - py${{range.key}}-flatbuffers
        - py${{range.key}}-gast
        - py${{range.key}}-google-pasta # needed by tf_upgrade_v2
        - py${{range.key}}-keras # needed by toco, tflite_convert
        - py${{range.key}}-ml-dtypes
        - py${{range.key}}-numpy
        - py${{range.key}}-opt-einsum
        - py${{range.key}}-pip
        - py${{range.key}}-protobuf
        - py${{range.key}}-pybind11
        - py${{range.key}}-requests
        - py${{range.key}}-setuptools
        - py${{range.key}}-six
        - py${{range.key}}-termcolor
        - py${{range.key}}-wrapt
        - tensorflow-core
      provider-priority: ${{range.value}}
    pipeline:
      - environment:
          PYTHON_BIN_PATH: /usr/bin/python${{range.key}}
          TF_PYTHON_VERSION: ${{range.key}}
        runs: |
          if [ "${{build.arch}}" = "aarch64" ]; then
            bazel ${{vars.bazel-common-opts-aarch64}} //tensorflow/tools/pip_package:wheel
          else
            bazel ${{vars.bazel-common-opts-x86}} //tensorflow/tools/pip_package:wheel
          fi
          mkdir -p pip${{range.key}}-pkg-tmp
          chmod 755 bazel-bin/tensorflow/tools/pip_package/wheel_house
          mv bazel-bin/tensorflow/tools/pip_package/wheel_house/* pip${{range.key}}-pkg-tmp
      - runs: |
          python${{range.key}} -m installer --destdir="${{targets.contextdir}}" pip${{range.key}}-pkg-tmp/*.whl
      - name: "move usr/bin executables for -bin"
        runs: |
          mkdir -p ./cleanup/${{range.key}}/
          mv ${{targets.contextdir}}/usr/bin ./cleanup/${{range.key}}/
      - runs: |
          _pyver=${{range.key}}
          _pypath="/usr/lib/python${_pyver}"
          find "${{targets.contextdir}}"${_pypath} -name "libtensorflow*.so*" -exec rm -rf '{}' +
    test:
      pipeline:
        - uses: python/import
          with:
            python: python${{range.key}}
            import: ${{vars.import}}

  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}-bin
    description: Executable binaries for ${{vars.pypi-package}} installed for python${{range.key}}
    dependencies:
      runtime:
        - py${{range.key}}-${{vars.pypi-package}}
      provides:
        - py3-${{vars.pypi-package}}-bin
        - py3-${{vars.pypi-package}}
      provider-priority: ${{range.value}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/
          mv ./cleanup/${{range.key}}/bin ${{targets.contextdir}}/usr/
    test:
      pipeline:
        - runs: |
            tf_upgrade_v2 --help
            tflite_convert --help
            toco --help

  - name: tensorflow-dev
    description: Tensorflow development headers
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - uses: test/pkgconf

update:
  enabled: true
  github:
    identifier: tensorflow/tensorflow
    strip-prefix: v
    tag-filter: v

test:
  pipeline:
    - uses: test/tw/ldd-check
