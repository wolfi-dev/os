From 6347511b0cbf9b06e372a2008371d5efdf5ad6a3 Mon Sep 17 00:00:00 2001
From: Penporn Koanantakool <penporn@google.com>
Date: Thu, 20 Mar 2025 00:23:01 -0700
Subject: [PATCH] [xla:cpu] Disable SVE LLVM codegen by default on AArch64
 CPUs.

There are many missing SVE lowerings in LLVM, especially for bf16 type. This causes program termination on SVE-available machines such as Google Axion. Example error:
```
LLVM ERROR: Cannot select: 0xf7eb74164950: nxv4bf16 = AArch64ISD::UINT_TO_FP_MERGE_PASSTHRU 0xf7eb74186d60, 0xf7eb74186200, undef:nxv4bf16
  0xf7eb74186d60: nxv4i1 = AArch64ISD::PTRUE TargetConstant:i32<31>
    0xf7eb74191580: i32 = TargetConstant<31>
  0xf7eb74186200: nxv4i32,ch = load<(invariant load (<vscale x 1 x s32>) from %ir.scevgep16, !noalias !5), zext from nxv4i8> 0xf7eb740d8830, 0xf7eb74194070, undef:i64
    0xf7eb74194070: i64 = add 0xf7eb741922f0, 0xf7eb74193c10
      0xf7eb741922f0: i64,ch = CopyFromReg 0xf7eb740d8830, Register:i64 %7
        0xf7eb74191e90: i64 = Register %7
      0xf7eb74193c10: i64,ch = CopyFromReg 0xf7eb740d8830, Register:i64 %11
        0xf7eb74192750: i64 = Register %11
    0xf7eb74186350: i64 = undef
  0xf7eb74164a30: nxv4bf16 = undef
In function: convert.2_kernel
Fatal Python error: Aborted
```

Since most AArch64 machines still use 128-bit registers, SVE and NEON shouldn't have significant performance difference, so we disable SVE codegen in public builds for the time being.

After JAX uses an XLA commit that has changes from this PR, the following JAX tests will pass on Axion:
```
bazel test //tests:shape_poly_test_cpu --test_filter=*test_harness_vmap_convert_element_type_dtypes_to_dtypes_shape_bool_100_100_olddtype_bool_newdtype_bfloat16*

bazel test //tests:export_harnesses_multi_platform_test_cpu --test_filter=*test_prim_convert_element_type_dtypes_to_dtypes_shape_uint8_100_100_olddtype_uint8_newdtype_bfloat16*
```

Add `--test_env=XLA_FLAGS=--xla_cpu_max_isa=""` to the options to get the errors back.

PiperOrigin-RevId: 738695223
---
 third_party/xla/xla/BUILD                        |  2 ++
 third_party/xla/xla/debug_options_flags.cc       | 16 +++++++++++++++-
 third_party/xla/xla/service/cpu/tests/BUILD      |  1 +
 .../service/cpu/tests/cpu_vectorization_test.cc  | 15 +++++++++++++++
 4 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/third_party/xla/xla/BUILD b/third_party/xla/xla/BUILD
index 30497e68e4e..ba9e3294ae7 100644
--- a/third_party/xla/xla/BUILD
+++ b/third_party/xla/xla/BUILD
@@ -1184,6 +1184,8 @@ cc_library(
             "@com_google_absl//absl/strings",
             "@com_google_absl//absl/strings:str_format",
             "@local_tsl//tsl/platform:logging",
+            "@local_tsl//tsl/platform",
+            "@local_tsl//tsl/platform:platform_port",
             "@local_tsl//tsl/platform:protobuf",
         ],
 )
diff --git a/third_party/xla/xla/debug_options_flags.cc b/third_party/xla/xla/debug_options_flags.cc
index 6cc594433cd..7d48cb035ae 100644
--- a/third_party/xla/xla/debug_options_flags.cc
+++ b/third_party/xla/xla/debug_options_flags.cc
@@ -44,10 +44,24 @@ limitations under the License.
 #include "xla/stream_executor/cuda/ptx_compiler_support.h"
 #include "xla/tsl/util/command_line_flags.h"
 #include "xla/xla.pb.h"
+#include "tsl/platform/cpu_info.h"  // NOLINT
+#include "tsl/platform/platform.h"
 #include "tsl/platform/protobuf.h"  // IWYU pragma: keep
 
 namespace xla {
 
+inline std::string DefaultMaxIsa() {
+#ifdef PLATFORM_GOOGLE
+  return "";
+#else
+  // There are many missing SVE lowerings in LLVM. Limit features to NEON for
+  // now. There shouldn't be significant performance impact as most AAarch64
+  // CPUs still use 128-bit registers.
+  // TODO(penporn): Remove this once SVE is fully supported.
+  return tsl::port::IsAarch64CPU() ? "NEON" : "";
+#endif  // PLATFORM_GOOGLE
+}
+
 DebugOptions DefaultDebugOptionsIgnoringFlags() {
   DebugOptions opts;
   opts.set_xla_llvm_enable_alias_scope_metadata(true);
@@ -95,7 +109,7 @@ DebugOptions DefaultDebugOptionsIgnoringFlags() {
   opts.set_xla_cpu_copy_insertion_use_region_analysis(false);
   opts.set_xla_cpu_enable_concurrency_optimized_scheduler(true);
   opts.set_xla_cpu_prefer_vector_width(256);
-  opts.set_xla_cpu_max_isa("");
+  opts.set_xla_cpu_max_isa(DefaultMaxIsa());
 
   opts.set_xla_cpu_enable_fast_math(false);
   // Disable forms of fast math that have caused users problems in the past.
diff --git a/third_party/xla/xla/service/cpu/tests/BUILD b/third_party/xla/xla/service/cpu/tests/BUILD
index fa663a8b241..fcfc71aa49f 100644
--- a/third_party/xla/xla/service/cpu/tests/BUILD
+++ b/third_party/xla/xla/service/cpu/tests/BUILD
@@ -331,6 +331,7 @@ xla_cc_test(
         "@llvm-project//llvm:ARMCodeGen",  # fixdeps: keep
         "@llvm-project//llvm:Target",
         "@llvm-project//llvm:X86CodeGen",  # fixdeps: keep
+        "@local_tsl//tsl/platform",
         "@local_tsl//tsl/platform:platform_port",
         "@local_tsl//tsl/platform:test",
     ],
diff --git a/third_party/xla/xla/service/cpu/tests/cpu_vectorization_test.cc b/third_party/xla/xla/service/cpu/tests/cpu_vectorization_test.cc
index 2088c7c16fa..9c3ccb66ab2 100644
--- a/third_party/xla/xla/service/cpu/tests/cpu_vectorization_test.cc
+++ b/third_party/xla/xla/service/cpu/tests/cpu_vectorization_test.cc
@@ -36,6 +36,7 @@ limitations under the License.
 #include "xla/xla.pb.h"
 #include "xla/xla_data.pb.h"
 #include "tsl/platform/cpu_info.h"
+#include "tsl/platform/platform.h"
 #include "tsl/platform/test.h"
 
 namespace xla {
@@ -192,6 +193,20 @@ INSTANTIATE_TEST_SUITE_P(MaxIsaTestInstantiation, MaxIsaTest,
                          ::testing::ValuesIn(GetMaxIsaTestCases()),
                          MaxIsaTest::Name);
 
+class DefaultMaxIsaTest : public CpuCodegenTest {};
+
+TEST_F(DefaultMaxIsaTest, NeonForOssAArch64) {
+  if (!tsl::port::IsAarch64CPU()) {
+    GTEST_SKIP() << "This test is for AArch64 CPUs.";
+  }
+  DebugOptions debug_options = HloTestBase::GetDebugOptionsForTest();
+#ifdef PLATFORM_GOOGLE
+  EXPECT_EQ(debug_options.xla_cpu_max_isa(), "");
+#else
+  EXPECT_EQ(debug_options.xla_cpu_max_isa(), "NEON");
+#endif  // PLATFORM_GOOGLE
+}
+
 struct JitVectorizationTestSpec {
   HloOpcode opcode;
   std::string max_isa;
-- 
2.50.1

