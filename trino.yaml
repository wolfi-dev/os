package:
  name: trino
  version: "477"
  epoch: 2 # GHSA-jq43-27x9-3v86
  description: The distributed SQL query engine for big data, formerly known as PrestoSQL
  copyright:
    - license: Apache-2.0
  resources:
    cpu: 32
    memory: 64Gi
  dependencies:
    runtime:
      - openjdk-25-default-jvm
      - trino-config

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - diffutils
      - git
      - go
      - jvmkill
      - maven
      - nodejs
      - npm
      - openjdk-25-default-jdk
      - upx
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/trinodb/trino.git
      tag: ${{package.version}}
      expected-commit: aec2d2a4f0f57a0a0c9d4aee3a1dd59fcb513438

  - uses: git-checkout
    working-directory: ./airlift/launcher
    with:
      repository: https://github.com/airlift/launcher.git
      tag: 306
      expected-commit: dfa2a68977d45a8e57a48b8f60642699f4332e7b

  - working-directory: ./airlift/launcher
    runs: |
      export JAVA_HOME=/usr/lib/jvm/java-25-openjdk
      ./mvnw package

  - uses: maven/pombump

  - name: "remove upstream artificial requirement for Oracle or Temurin JDKs"
    runs: |
      sed -i '/<requireJavaVendor>/,/<\/requireJavaVendor>/d' pom.xml
      # Re-sort the pom.xml
      ./mvnw sortpom:sort -q

  - runs: |
      set -x

      export JAVA_HOME=/usr/lib/jvm/java-25-openjdk
      export NPM_CONFIG_CACHE=/home/build/.node
      export NPM_CONFIG_PREFIX=/home/build/.node

      ./mvnw package -q -DskipTests -Dair.check.skip-all -Dmaven.enforcer.skip=true -Dmaven.test.failure.ignore=true \
        -pl '!:trino-docs'

      mkdir -p ${{targets.destdir}}/usr/lib/trino
      cp ./core/trino-server/target/trino-server-${{package.version}}/NOTICE ${{targets.destdir}}/usr/lib/trino/
      cp ./core/trino-server/target/trino-server-${{package.version}}/README.txt ${{targets.destdir}}/usr/lib/trino/
      cp -r ./core/trino-server/target/trino-server-${{package.version}}/bin ${{targets.destdir}}/usr/lib/trino/bin/

      # copying rebuilt golang airlift/launcher ontop of current lancher
      cp -raf /home/build/airlift/launcher/target/binaries/** ${{targets.destdir}}/usr/lib/trino/bin/

      cp -r ./core/trino-server/target/trino-server-${{package.version}}/lib ${{targets.destdir}}/usr/lib/trino/lib/
      mkdir ${{targets.destdir}}/usr/lib/trino/plugin

      mkdir -p ${{targets.destdir}}/usr/bin/
      cp ./client/trino-cli/target/trino-cli-*-executable.jar ${{targets.destdir}}/usr/bin/trino
      chmod 0755 ${{targets.destdir}}/usr/bin/trino

data:
  - name: plugins
    items:
      ai-functions: ai-functions
      bigquery: bigquery
      blackhole: blackhole
      cassandra: cassandra
      clickhouse: clickhouse
      delta-lake: delta-lake
      druid: druid
      duckdb: duckdb
      elasticsearch: elasticsearch
      exasol: exasol
      exchange-filesystem: exchange-filesystem
      exchange-hdfs: exchange-hdfs
      faker: faker
      functions-python: functions-python
      geospatial: geospatial
      google-sheets: google-sheets
      hive: hive
      http-event-listener: http-event-listener
      hudi: hudi
      iceberg: iceberg
      ignite: ignite
      jmx: jmx
      kafka-event-listener: kafka-event-listener
      kafka: kafka
      lakehouse: lakehouse
      ldap-group-provider: ldap-group-provider
      loki: loki
      mariadb: mariadb
      memory: memory
      ml: ml
      mongodb: mongodb
      mysql-event-listener: mysql-event-listener
      mysql: mysql
      opa: opa
      openlineage: openlineage
      opensearch: opensearch
      oracle: oracle
      password-authenticators: password-authenticators
      pinot: pinot
      postgresql: postgresql
      prometheus: prometheus
      ranger: ranger
      redis: redis
      redshift: redshift
      resource-group-managers: resource-group-managers
      session-property-managers: session-property-managers
      singlestore: singlestore
      snowflake: snowflake
      spooling-filesystem: spooling-filesystem
      sqlserver: sqlserver
      teradata-functions: teradata-functions
      thrift: thrift
      tpcds: tpcds
      tpch: tpch
      vertica: vertica

subpackages:
  - name: ${{package.name}}-config
    description: Creates trino config step that can then be overridden.
    dependencies:
      runtime:
        - trino
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/etc
          cp -r core/docker/default/etc ${{targets.subpkgdir}}/etc/trino
    test:
      pipeline:
        - name: "verify the package has at least one file in the directory tree"
          runs: |
            dir="/etc/trino"
            if ! find "$dir" -type f -print -quit | grep -q . ; then
              echo "FAIL: No files found in [$dir] directory." >&2
              exit 1
            fi

  - name: ${{package.name}}-oci-entrypoint
    dependencies:
      runtime:
        - trino
        - bash # run-trino script needs bash
        - curl # health-check needs curl
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/trino/bin
          cp ./core/docker/bin/* ${{targets.subpkgdir}}/usr/lib/trino/bin/
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -s /usr/lib/trino/bin/run-trino ${{targets.subpkgdir}}/usr/bin/
          cp /usr/lib/libjvmkill.so ${{targets.subpkgdir}}/usr/lib/trino/bin/

          mkdir -p ${{targets.subpkgdir}}/etc/security/
          touch ${{targets.subpkgdir}}/etc/security/limits.conf
          cat << EOF >> ${{targets.subpkgdir}}/etc/security/limits.conf
          trino soft nofile 131072
          trino hard nofile 131072
          trino soft nproc 128000
          trino hard nproc 128000
          EOF
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - name: "verify main binary link is present and correctly configured"
          runs: |
            link="/usr/bin/run-trino"
            if [ "$(readlink $link)" != "/usr/lib/trino/bin/run-trino" ] ; then
              echo "FAIL: main binary link [$link] not correctly configured." >&2
              exit 1
            fi

  - range: plugins
    name: trino-plugin-${{range.key}}
    description: Trino Plugin ${{range.key}}
    dependencies:
      runtime:
        - trino
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/trino/lib
          cp -r ./core/trino-server/target/trino-server-${{package.version}}/plugin/${{range.value}}/* ${{targets.subpkgdir}}/usr/lib/trino/lib/

          mkdir -p ${{targets.subpkgdir}}/usr/lib/trino/plugin/${{range.value}}
          for path in ./core/trino-server/target/trino-server-${{package.version}}/plugin/${{range.value}}/*; do
            filename=$(basename $path)
            ln -s "../../lib/${filename}" "${{targets.subpkgdir}}/usr/lib/trino/plugin/${{range.value}}/${filename}"
          done
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - name: "verify plugin JARs are correctly configured"
          runs: |
            dir="/usr/lib/trino/plugin/${{range.key}}/"
            if ! find "$dir" -name "*.jar" -print -quit | grep -q . ; then
              echo "FAIL: No .jar files found in [$dir] directory." >&2
              exit 1
            fi

            find "$dir" -type l -name "*.jar" | while read -r link; do
              target=$(readlink -f "$link")
              if [ ! -e "$target" ]; then
                echo "FAIL: Broken symlink [$link -> $target]." >&2
                exit 1
              fi
            done

update:
  enabled: true
  ignore-regex-patterns:
    - "-test*"
  github:
    identifier: trinodb/trino
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-oci-entrypoint # need to setup basic
        - bash
    environment:
      JAVA_HOME: /usr/lib/jvm/default-jvm
  pipeline:
    - name: "test trino version"
    - runs: |
        trino --version
        trino --help
    - uses: test/tw/ldd-check
    - name: "test trino server"
      runs: |
        mkdir -p /usr/lib/trino/etc

        export TRINO_ETC=/usr/lib/trino/etc
        # https://trino.io/docs/current/installation/deployment.html#node-properties
        cat << EOF >> "${TRINO_ETC}/node.properties"
        node.environment=production
        node.id=ffffffff-ffff-ffff-ffff-ffffffffffff
        node.data-dir=/var/trino/data
        EOF

        # https://trino.io/docs/current/installation/deployment.html#jvm-config
        cat << EOF >> "${TRINO_ETC}/jvm.config"
        -server
        -Xmx16G
        -XX:InitialRAMPercentage=80
        -XX:MaxRAMPercentage=80
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:-OmitStackTraceInFastThrow
        -XX:ReservedCodeCacheSize=512M
        -XX:PerMethodRecompilationCutoff=10000
        -XX:PerBytecodeRecompilationCutoff=10000
        -Djdk.attach.allowAttachSelf=true
        -Djdk.nio.maxCachedBufferSize=2000000
        -Dfile.encoding=UTF-8
        # Allow loading dynamic agent used by JOL
        -XX:+EnableDynamicAgentLoading
        EOF

        #https://trino.io/docs/current/installation/deployment.html#config-properties
        cat << EOF >> "${TRINO_ETC}/config.properties"
        coordinator=true
        node-scheduler.include-coordinator=true
        http-server.http.port=8080
        discovery.uri=http://example.net:8080
        EOF

        cat << EOF >> "${TRINO_ETC}/log.properties"
        io.trino=DEBUG
        EOF

        /usr/lib/trino/bin/launcher run & export PID=$! && sleep 10 && kill -9 $PID
