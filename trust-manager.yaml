package:
  name: trust-manager
  version: "0.18.0"
  epoch: 1
  description: trust-manager is an operator for distributing trust bundles across a Kubernetes cluster.
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - docker
      - go
      - rsync
      - wolfi-baselayout

pipeline:
  # We can't use go/install because this requires specific ldflags to set the version
  - uses: git-checkout
    with:
      repository: https://github.com/cert-manager/trust-manager
      tag: v${{package.version}}
      expected-commit: 7a6205ce727853edb34c89ec4e9c5c2edf347d52
      destination: trust-manager

  - runs: |
      cd trust-manager
      mkdir ./bin

      # In the cert bundle that current version of trust-manager used, there
      # is a cert that will produce a negative serial number, which is disallowed
      # on Go 1.23. According to https://pkg.go.dev/crypto/x509#ParseCertificate,
      # the Go 1.22 behavior can be restored using GODEBUG=x509negativeserial=1.
      #
      # See https://github.com/cert-manager/trust-manager/pull/515/files
      # and https://kubernetes.slack.com/archives/CDEQJ0Q8M/p1734105432142589
      #
      # We should revert this change when upstream fixes their cert bundle.
      echo "godebug x509negativeserial=1" >> go.mod

      go build -ldflags="-w" -o ./bin/trust-manager ./cmd/trust-manager
      mkdir -p ${{targets.destdir}}/usr/bin
      install -Dm755 ./bin/trust-manager ${{targets.destdir}}/usr/bin/trust-manager

update:
  enabled: true
  github:
    identifier: cert-manager/trust-manager
    strip-prefix: v
    use-tag: true
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - go
        - openssl
        - git
        - curl
  pipeline:
    # AUTOGENERATED
    - runs: |
        trust-manager --help
    - runs: |
        go version -m /usr/bin/trust-manager | grep GODEBUG=x509negativeserial=1
    - uses: test/kwok/cluster
    - name: "Check Core functionality"
      uses: test/daemon-check-output
      with:
        setup: |
          # Clone trust-manager repo and install CRDs
          git clone --depth=1 https://github.com/cert-manager/trust-manager.git
          kubectl apply -f trust-manager/deploy/crds/
          kubectl config view --minify --raw > /tmp/kubeconfig.yaml

          # Verify CRDs are installed
          kubectl get crds | grep trust.cert-manager.io

          # Create webhook certificates
          mkdir -p /tmp/trust-manager-certs
          openssl req -x509 -newkey rsa:2048 -keyout /tmp/trust-manager-certs/tls.key \
            -out /tmp/trust-manager-certs/tls.crt -days 365 -nodes \
            -subj "/CN=trust-manager-webhook" \
            -addext "subjectAltName=DNS:trust-manager-webhook,DNS:localhost,IP:127.0.0.1"

          chmod 644 /tmp/trust-manager-certs/tls.crt
          chmod 600 /tmp/trust-manager-certs/tls.key
        start: |
          trust-manager \
            --kubeconfig /tmp/kubeconfig.yaml \
            --leader-elect=false \
            --log-level=5 \
            --webhook-certificate-dir=/tmp/trust-manager-certs \
            --webhook-host=127.0.0.1 \
            --webhook-port=9443 \
            --metrics-port=9402 \
            --readiness-probe-port=6060
        expected_output: |
          Starting Controller
          Starting workers
        timeout: 30
        post: |
          curl -f http://localhost:6060/readyz | grep -q "ok"
          curl -s http://localhost:9402/metrics | grep -q trust_manager

          kubectl create namespace cert-manager

          # Create test CA certificate
          openssl req -x509 -newkey rsa:2048 -keyout /tmp/test-ca.key \
            -out /tmp/test-ca.crt -days 365 -nodes \
            -subj "/CN=Test-CA/O=Trust-Manager-Test"

          kubectl create configmap test-ca-bundle --from-file=ca.crt=/tmp/test-ca.crt -n cert-manager
          kubectl get configmap test-ca-bundle -n cert-manager -o yaml
          kubectl label namespace cert-manager trust-manager=enabled

          # Create Bundle resource
          cat > /tmp/test-bundle.yaml << 'EOF'
          apiVersion: trust.cert-manager.io/v1alpha1
          kind: Bundle
          metadata:
            name: test-bundle
            namespace: cert-manager
          spec:
            sources:
            - configMap:
                name: test-ca-bundle
                key: ca.crt
            target:
              configMap:
                key: ca-bundle.crt
              namespaceSelector:
                matchLabels:
                  trust-manager: enabled
          EOF

          kubectl apply -f /tmp/test-bundle.yaml
          sleep 15

          # Verify Bundle was created
          kubectl get bundles -n cert-manager | grep -q "test-bundle"
