package:
  name: tshark-4.4
  version: "4.4.7"
  epoch: 1
  description: "TShark is a network protocol analyzer to dump and analyze network traffic"
  copyright:
    - license: GPL-2.0-only
  dependencies:
    provides:
      - tshark=${{package.full-version}}

environment:
  contents:
    packages:
      - brotli-dev
      - build-base
      - busybox
      - c-ares-dev
      - cmake
      - flex
      - gcc-13 # gcc-14 fails with strange pointer clobbering errors
      - glib-dev
      - libcap-utils
      - libgcrypt-dev
      - libpcap-dev
      - speexdsp-dev
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://gitlab.com/wireshark/wireshark
      tag: v${{package.version}}
      expected-commit: 7980339b16307b07ff84f7878e68fde07d71fc8b

  - uses: cmake/configure
    with:
      opts: -DBUILD_wireshark=off

  - uses: cmake/build

  - uses: cmake/install

  - uses: strip

subpackages:
  - name: tshark-4.4-privileged
    description: tshark with cap_net_raw and cap_net_admin capabilities set for running as nonroot user
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/
          cp -r ${{targets.destdir}}/* ${{targets.contextdir}}/
          # Allow tshark to run as nonroot user
          setcap cap_net_raw,cap_net_admin=eip "${{targets.contextdir}}/usr/bin/tshark"
          setcap cap_net_raw,cap_net_admin=eip "${{targets.contextdir}}/usr/bin/dumpcap"
    test:
      environment:
        contents:
          packages:
            - libcap-utils
      pipeline:
        - runs: |
            getcap /usr/bin/tshark | cut -d ' ' -f2 | grep -q -E '^cap_net_admin,cap_net_raw=eip$'
            getcap /usr/bin/dumpcap | cut -d ' ' -f2 | grep -q -E '^cap_net_admin,cap_net_raw=eip$'
        - uses: test/tw/ldd-check

update:
  enabled: true
  git:
    strip-prefix: v
    tag-filter-prefix: v4.4.

test:
  environment:
    contents:
      packages:
        - curl
  pipeline:
    - name: dump some packets
      runs: |
        tshark -w /tmp/out.pcap -c 10 host example.com&
        sleep 1; curl -sI http://example.com; sleep 1
        tshark -r /tmp/out.pcap -Y "http" |grep '200 OK'
    - uses: test/tw/ldd-check
