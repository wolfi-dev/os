package:
  name: wasi-sdk
  version: "27"
  epoch: 1
  description: "WASI-enabled WebAssembly C/C++ toolchain"
  copyright:
    - license: Apache-2.0
  # Ships custom clang
  options:
    no-commands: true
  resources:
    # https://go/wolfi-rsc/wasi-sdk
    cpu: 30
    memory: 40Gi

vars:
  llvm-vers: 20

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - clang-${{vars.llvm-vers}}
      - cmake
      - llvm-${{vars.llvm-vers}}
      - perl
      - python3
      - rust
      - samurai
      - wolfi-baselayout

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/WebAssembly/wasi-sdk
      tag: wasi-sdk-${{package.version}}
      expected-commit: fbdec30656d4099da5c7fd7e8275e4af777ca97e
      recurse-submodules: true

  - name: Build toolchain
    runs: |
      cmake -G Ninja -B build/toolchain -S . -DWASI_SDK_BUILD_TOOLCHAIN=ON -DCMAKE_INSTALL_PREFIX=build/install
      cmake --build build/toolchain --target install

  - name: Build sysroot
    runs: |
      export CFLAGS="-O2 -Wall -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer"
      export CXXFLAGS="$CFLAGS"
      export LDFLAGS="-Wl,-z,stack-size=8192"

      cmake -G Ninja -B build/sysroot -S . \
          -DCMAKE_INSTALL_PREFIX=build/install \
          -DCMAKE_TOOLCHAIN_FILE=build/install/share/cmake/wasi-sdk.cmake \
          -DCMAKE_C_COMPILER_WORKS=ON \
          -DCMAKE_CXX_COMPILER_WORKS=ON
      cmake --build build/toolchain --target dist
      cmake --build build/sysroot --target dist

  - name: Merge artifacts to buiild SDK
    runs: |
      mkdir dist-wolfi
      cp build/toolchain/dist/* build/sysroot/dist/* dist-wolfi
      ./ci/merge-artifacts.sh

  - name: Install SDK
    runs: |
      mkdir -p ${{targets.destdir}}/usr
      tar -xvf dist/wasi-sdk-*.tar.gz
      mv wasi-sdk-*/* ${{targets.destdir}}/usr/

  - uses: strip

subpackages:
  # This has to come before the split/dev step
  - name: wasi-sdk-libclang-rt-builtins
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib/clang/lib
          # Copy instead of move because these also need to be in the -dev package
          cp -r ${{targets.destdir}}/usr/lib/clang/${{vars.llvm-vers}}/lib/wasm32-unknown-* ${{targets.subpkgdir}}/usr/lib/clang/lib/

  - name: wasi-sdk-sysroot
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/share
          mv ${{targets.destdir}}/usr/share/wasi-sysroot/ ${{targets.subpkgdir}}/usr/share/
    test:
      pipeline:
        - uses: test/tw/ldd-check

  - name: wasi-sdk-dev
    # Ships custom clang
    options:
      no-commands: true
    pipeline:
      - uses: split/dev
    test:
      pipeline:
        - runs: |
            llvm-config --version
            llvm-config --help
        - uses: test/tw/ldd-check

update:
  enabled: true
  # Upstream tags before manually approving a GitHub release (and we've seen
  # changes after the tag was cut in the past), so `git` (or `use-tag`) aren't
  # appropriate
  github:
    identifier: WebAssembly/wasi-sdk
    strip-prefix: wasi-sdk-

test:
  pipeline:
    - uses: test/tw/ver-check
      with:
        bins: c++filt llvm-strip clang-apply-replacements wasm32-wasi-clang wasm32-wasi-threads-clang++ ld64.lld llvm-objcopy objcopy size clang-${{vars.llvm-vers}} wasm32-wasip1-clang wasm32-wasip1-threads-clang++ wasm32-wasi-clang++ clang-cl wasm-ld wasm32-wasi-threads-clang llvm-strings objdump llvm-size llvm-nm strings llvm-cxxfilt llvm-dwarfdump ranlib nm ld.lld wasm32-wasip2-clang++ clang-cpp wasm32-wasip2-clang strip wasm32-wasip1-threads-clang ar llvm-mc llvm-ar llvm-ranlib clang wasm32-wasip1-clang++ llvm-objdump clang-format clang-tidy lld-link clang++
        version: 20.1.8
    - name: Test help commands
      runs: |
        ar --help
        c++filt --help
        clang --help
        clang++ --help
        clang-${{vars.llvm-vers}} --help
        clang-apply-replacements --help
        clang-cpp --help
        clang-format --help
        clang-tidy --help
        ld.lld --help
        ld64.lld --help
        llvm-ar --help
        llvm-cxxfilt --help
        llvm-dwarfdump --help
        llvm-mc --help
        llvm-nm --help
        llvm-objcopy --help
        llvm-objdump --help
        llvm-ranlib --help
        llvm-size --help
        llvm-strings --help
        llvm-strip --help
        nm --help
        objcopy --help
        objdump --help
        ranlib --help
        size --help
        strings --help
        strip --help
        wasm-component-ld --help
        wasm-ld --help
        wasm32-wasi-clang --help
        wasm32-wasi-clang++ --help
        wasm32-wasi-threads-clang --help
        wasm32-wasi-threads-clang++ --help
        wasm32-wasip1-clang --help
        wasm32-wasip1-clang++ --help
        wasm32-wasip1-threads-clang --help
        wasm32-wasip1-threads-clang++ --help
        wasm32-wasip2-clang --help
        wasm32-wasip2-clang++ --help
