package:
  name: wasm-pack
  version: 0.13.1
  epoch: 3
  description: rust to wasm build tool
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - autoconf
      - automake
      - build-base
      - busybox
      - bzip2-dev
      - ca-certificates-bundle
      - cargo-auditable
      - cmake
      - curl-dev
      - openssl-dev
      - rust
      - zstd-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/rustwasm/wasm-pack
      expected-commit: 24bdca457abad34e444912e6165eb71422a51046
      tag: v${{package.version}}

  - uses: rust/cargobump

  - runs: |
      # prepare
      rm -rf Cargo.lock
      cargo fetch --target="${{host.triplet.rust}}"

      cargo auditable build --release --frozen
      install -Dm755 target/release/wasm-pack \
      -t "${{targets.contextdir}}"/usr/bin

  - uses: strip

update:
  enabled: true
  github:
    identifier: rustwasm/wasm-pack
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - nodejs
        - npm
        - rustup
        - yarn
        - build-base
        - binaryen
    environment:
      HOME: /home/build
  pipeline:
    - runs: |
        # Function to display messages
        function print_info {
            echo -e "\033[1;34m[INFO]\033[0m $1"
        }

        function print_error {
            echo -e "\033[1;31m[ERROR]\033[0m $1"
            exit 1
        }

        print_info "Installing default Rust toolchain via Rustup..."
        rustup install stable || print_error "Failed to install Rust via Rustup"
        rustup default stable || print_error "Failed to set default Rust toolchain"
        ARCH=$(uname -m)
        export PATH="$HOME/.rustup/toolchains/stable-${ARCH}-unknown-linux-gnu/bin:$PATH"

        rustup target add wasm32-unknown-unknown || print_error "Failed to install wasm32-unknown-unknown target."

        # Build the project with wasm-pack
        print_info "Building the project with wasm-pack"
        wasm-pack build --target nodejs || { print_error "Build failed. Running diagnostics..."; }

        # Verify the build output
        print_info "Verifying the build output"
        if [ -f "pkg/wasm_pack_test_bg.wasm" ] && [ -f "pkg/wasm_pack_test.js" ] && [ -f "pkg/package.json" ]; then
            print_info "Build output verified successfully"
        else
            print_error "Build output verification failed"
        fi

        # Run the Node.js script to test the WebAssembly module
        print_info "Running the Node.js script to test the WebAssembly module"
        node test.js || print_error "Test failed: unable to run the Node.js script"

        print_info "wasm-pack is working correctly"
        wasm-pack --version
        wasm-pack --help
