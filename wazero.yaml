package:
  name: wazero
  version: "1.9.0"
  epoch: 2
  description: The zero dependency WebAssembly runtime for Go developers
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/tetratelabs/wazero
      tag: v${{package.version}}
      expected-commit: 96f2052f6d12cccc29193f5452c635b76d8a036d

  - uses: go/build
    with:
      packages: ./cmd/wazero
      output: wazero
      ldflags: -X github.com/tetratelabs/wazero/internal/version.version=${{package.version}}

update:
  enabled: true
  github:
    identifier: tetratelabs/wazero
    strip-prefix: v
    use-tag: true

test:
  environment:
    contents:
      packages:
        - wabt
  pipeline:
    - runs: |
        wazero --help
        wazero version | grep ${{package.version}}
    - name: Test basic Wasm execution with WASI
      runs: |
        cat <<EOF > test.wat
        (module
          (import "wasi_snapshot_preview1" "fd_write"
            (func \$fd_write (param i32 i32 i32 i32) (result i32)))
          (memory 1)
          (export "memory" (memory 0))
          (data (i32.const 0) "Hello, Wazero!\\n")
          (func \$main (export "_start")
            (i32.store (i32.const 16) (i32.const 0))    ;; iov_base
            (i32.store (i32.const 20) (i32.const 14))   ;; iov_len
            (call \$fd_write
              (i32.const 1)      ;; stdout fd
              (i32.const 16)     ;; iovs start
              (i32.const 1)      ;; iovs count
              (i32.const 24))    ;; nwritten ptr
            drop))
        EOF

        wat2wasm test.wat -o test.wasm

        wazero run test.wasm | grep "Hello, Wazero!"

        rm test.wat test.wasm
    - name: Test function export and execution
      runs: |
        # WebAssembly module that outputs "42"
        cat <<EOF > math.wat
        (module
          (import "wasi_snapshot_preview1" "fd_write"
            (func \$fd_write (param i32 i32 i32 i32) (result i32)))
          (memory 1)
          (export "memory" (memory 0))
          (data (i32.const 0) "42\\n")
          (func \$main (export "_start")
            ;; Set up iov for fd_write
            (i32.store (i32.const 16) (i32.const 0))  ;; iov_base
            (i32.store (i32.const 20) (i32.const 3))  ;; iov_len (2 chars + newline)
            ;; Write to stdout
            (call \$fd_write
              (i32.const 1)      ;; stdout fd
              (i32.const 16)     ;; iovs start
              (i32.const 1)      ;; iovs count
              (i32.const 24))    ;; nwritten ptr
            drop))
        EOF

        wat2wasm math.wat -o math.wasm

        wazero run math.wasm | grep "42"

        rm math.wat math.wasm
    - name: Test global variables and memory operations
      runs: |
        # WebAssembly module with global variables
        cat <<EOF > globals.wat
        (module
          (import "wasi_snapshot_preview1" "fd_write"
            (func \$fd_write (param i32 i32 i32 i32) (result i32)))
          (global \$answer (mut i32) (i32.const 40))
          (memory 1)
          (export "memory" (memory 0))
          (data (i32.const 0) "The answer is: 42\\n")
          (func \$main (export "_start")
            ;; Increment the global by 2 (just to use globals)
            (global.set \$answer
              (i32.add
                (global.get \$answer)
                (i32.const 2)))

            ;; Set up iov for fd_write
            (i32.store (i32.const 20) (i32.const 0))   ;; iov_base
            (i32.store (i32.const 24) (i32.const 17))  ;; iov_len (16 + newline)

            ;; Write to stdout
            (call \$fd_write
              (i32.const 1)      ;; stdout fd
              (i32.const 20)     ;; iovs start
              (i32.const 1)      ;; iovs count
              (i32.const 28))    ;; nwritten ptr
            drop))
        EOF

        wat2wasm globals.wat -o globals.wasm

        wazero run globals.wasm | grep "The answer is: 42"

        rm globals.wat globals.wasm
