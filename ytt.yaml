package:
  name: ytt
  version: "0.51.2"
  epoch: 1
  description: YAML templating tool that works on YAML structure instead of text
  copyright:
    - license: Apache-2.0

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 8f0d6c53ff6b86b6de73e4645035f2122ad93241
      repository: https://github.com/carvel-dev/ytt
      tag: v${{package.version}}

  - uses: go/build
    with:
      packages: ./cmd/ytt
      output: ytt
      ldflags: -X github.com/vmware-tanzu/carvel-ytt/pkg/version.Version=v${{package.version}}

  - uses: strip

update:
  enabled: true
  github:
    identifier: carvel-dev/ytt
    strip-prefix: v

test:
  pipeline:
    - name: version check
      runs: |
        ytt --version
        ytt --help
    - name: simple YAML templating from stdin
      runs: |
        echo "name: world" | ytt -f -
    - name: simple YAML templating from file
      runs: |
        cat <<EOF > test.yaml
        name: world
        # comments are ignored in the output
        demo_list:
        - hello
        - world
        demo_map:
          demo_key: demo_value
        EOF
        ytt -f test.yaml
    - name: test data values
      runs: |
        # Create template file
        cat <<EOF > template.yaml
        #@ load("@ytt:data", "data")

        app_name: #@ data.values.app_name
        version: #@ data.values.version
        env: #@ data.values.env
        EOF

        # Create values file
        cat <<EOF > values.yaml
        #@data/values
        ---
        app_name: my-app
        version: 1.0.0
        env: production
        EOF

        # Test using data values
        ytt -f template.yaml -f values.yaml | grep -q "app_name: my-app"
        ytt -f template.yaml -f values.yaml | grep -q "version: 1.0.0"
        ytt -f template.yaml -f values.yaml | grep -q "env: production"
    - name: test Ytt functions and directives
      runs: |
        cat <<EOF > directives.yaml
        #@ load("@ytt:yaml", "yaml")
        #@ load("@ytt:json", "json")

        #@ def get_ports():
        #@   return [80, 443, 8080]
        #@ end

        #@ my_list = ["item1", "item2", "item3"]

        app:
          name: test-app
          ports: #@ get_ports()
          items:
          #@ for item in my_list:
          #@   if item != "item2":
            - #@ item
          #@   end
          #@ end
        EOF

        # Test function results and loop processing
        RESULT=$(ytt -f directives.yaml)
        echo "$RESULT" | grep -q "ports:"
        echo "$RESULT" | grep -q -- "- 80"
        echo "$RESULT" | grep -q -- "- 443"
        echo "$RESULT" | grep -q -- "- 8080"
        echo "$RESULT" | grep -q -- "- item1"
        echo "$RESULT" | grep -q -- "- item3"
        # item2 should be skipped due to the if condition
        ! echo "$RESULT" | grep -q -- "- item2"
    - name: test binary reliability
      uses: test/tw/ldd-check
