package:
  name: zip
  version: 3.0
  epoch: 6
  description: Creates PKZIP-compatible .zip files
  copyright:
    - license: Info-ZIP

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle

pipeline:
  - uses: fetch
    with:
      expected-sha256: f0e8bb1f9b7eb0b01285495a2699df3a4b766784c1765a8f1aeedf63c0806369
      uri: https://sourceforge.net/projects/infozip/files/Zip%203.x%20%28latest%29/${{package.version}}/zip30.tar.gz

  # Import patches from debian that improve hardening and fix FTBFS
  # with gcc-14
  - uses: patch
    with:
      patches: 06-stack-markings-to-avoid-executable-stack.patch 07-fclose-in-file-not-fclose-x.patch 08-hardening-build-fix-1.patch 09-hardening-build-fix-2.patch 10-remove-build-date.patch 12-fix-build-with-gcc-14.patch 14-buffer-overflow-unicode-filename.patch 15-buffer-overflow-cve-2018-13410.patch 

  - runs: make -f unix/Makefile LOCAL_ZIP="${CFLAGS} ${CPPFLAGS}" prefix=/usr generic

  - runs: make -f unix/Makefile prefix=${{targets.destdir}}/usr MANDIR=${{targets.destdir}}/usr/share/man install

  - uses: strip

subpackages:
  - name: zip-doc
    pipeline:
      - uses: split/manpages
    description: zip manpages
    test:
      pipeline:
        - uses: test/docs

update:
  enabled: true
  release-monitor:
    identifier: 10080

test:
  pipeline:
    # AUTOGENERATED
    - name: Version and help check
      runs: |
        zip --version
        zipcloak --version
        zipnote -v
        zipsplit -v
        zip --help
        zipcloak --help
        zipnote -h
        zipsplit -h
    - name: Basic zip creation test
      runs: |
        # Create test files
        echo "Test file 1" > test1.txt
        echo "Test file 2" > test2.txt

        # Create a zip archive
        zip test.zip test1.txt test2.txt

        # Verify the zip file was created
        ls -la test.zip

        # Check zip file contents
        unzip -l test.zip | grep test1.txt
        unzip -l test.zip | grep test2.txt
    - name: Test zip utilities
      runs: |
        # Create a test file
        echo "Adding comments to zip" > comments.txt

        # Create zip file
        zip -q comment.zip comments.txt

        # Test zipnote (just to make sure it runs)
        zipnote comment.zip > /dev/null

        # Test zipsplit info mode
        zipsplit -t comment.zip
    - name: Binary reliability checks
      uses: test/tw/ldd-check
    - name: Long filename test
      runs: |
        # Create a file with a very long name (over 256 characters)
        longname=$(printf '%*s' 300 | tr ' ' 'A')
        echo "test content" > "$longname"
        zip -q longname.zip "$longname"
        rm "$longname"
        ls -la longname.zip
    - name: Unicode filename test
      runs: |
        # Create a file with a long unicode name
        unicode_name=$(printf '世界レイ%.0s' {1..50})
        echo "test content" > "$unicode_name"
        zip -q unicode.zip "$unicode_name"
        rm "$unicode_name"
        ls -la unicode.zip
    - name: Large file test
      runs: |
        # Create a large file (100MB) and try to zip it
        dd if=/dev/zero of=largefile bs=1M count=100
        zip -q large.zip largefile
        rm largefile
        ls -la large.zip
    - name: Multiple files test
      runs: |
        # Create multiple files with long names
        for i in {1..100}; do
          longname=$(printf 'file_%*s.txt' 100 | tr ' ' 'A')
          echo "test content $i" > "$longname"
        done
        zip -q multiple.zip file_*.txt
        rm file_*.txt
        ls -la multiple.zip
    - name: Nested directory test
      runs: |
        # Create nested directory structure with long names
        mkdir -p "a/$(printf '%*s' 100 | tr ' ' 'B')/c"
        echo "test content" > "a/$(printf '%*s' 100 | tr ' ' 'B')/c/test.txt"
        zip -r -q nested.zip a
        rm -rf a
        ls -la nested.zip
